!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABUF_INIT	shado.h	50;"	d
ARROW_DOWN	shado.h	/^    ARROW_DOWN = 1001,$/;"	e	enum:ARROW_editorKey
ARROW_LEFT	shado.h	/^    ARROW_LEFT = 1000,$/;"	e	enum:ARROW_editorKey
ARROW_RIGHT	shado.h	/^    ARROW_RIGHT = 1003,$/;"	e	enum:ARROW_editorKey
ARROW_UP	shado.h	/^    ARROW_UP = 1002,$/;"	e	enum:ARROW_editorKey
ARROW_editorKey	shado.h	/^enum ARROW_editorKey {$/;"	g
BACKSPACE	shado.h	/^    BACKSPACE = 127,$/;"	e	enum:ARROW_editorKey
BDIR	Makefile	/^BDIR=\/usr\/local\/bin\/$/;"	m
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g -Wno-deprecated -Wall -Wextra -pedantic -std=c99 -pie -pedantic$/;"	m
CTRL_KEY	shado.h	33;"	d
DEL_KEY	shado.h	/^    DEL_KEY = 1004,$/;"	e	enum:ARROW_editorKey
DOWN	shado.h	112;"	d
E	shado.c	/^struct globalState E;$/;"	v	typeref:struct:globalState
END_KEY	shado.h	/^    END_KEY = 1006,$/;"	e	enum:ARROW_editorKey
HLDB	s_synhl.c	/^struct editorSyntax HLDB[] = {$/;"	v	typeref:struct:editorSyntax
HLDB_ENTRIES	shado.h	35;"	d
HL_COMMENT	shado.h	/^    HL_COMMENT,$/;"	e	enum:editorHighlight
HL_HIGHLIGHT_NUMS	shado.h	30;"	d
HL_HIGHLIGHT_STRINGS	shado.h	31;"	d
HL_KEYWORD1	shado.h	/^    HL_KEYWORD1,$/;"	e	enum:editorHighlight
HL_KEYWORD2	shado.h	/^    HL_KEYWORD2,$/;"	e	enum:editorHighlight
HL_MATCH	shado.h	/^    HL_MATCH,$/;"	e	enum:editorHighlight
HL_MLCOMMENT	shado.h	/^    HL_MLCOMMENT,$/;"	e	enum:editorHighlight
HL_NORMAL	shado.h	/^    HL_NORMAL = 0,$/;"	e	enum:editorHighlight
HL_NUMBER	shado.h	/^    HL_NUMBER,$/;"	e	enum:editorHighlight
HL_STRING	shado.h	/^    HL_STRING,$/;"	e	enum:editorHighlight
HOME_KEY	shado.h	/^    HOME_KEY = 1005,$/;"	e	enum:ARROW_editorKey
INSERT	shado.h	39;"	d
LEFT	shado.h	111;"	d
LEN	shado.h	34;"	d
NORMAL	shado.h	38;"	d
OBJ	Makefile	/^OBJ=shado.o s_abuf.o s_synhl.o s_term.o s_rows.o s_ops.o s_bar.o s_io.o s_search.o s_input.o s_output.o$/;"	m
PAGE_DOWN	shado.h	/^    PAGE_DOWN = 1008,$/;"	e	enum:ARROW_editorKey
PAGE_UP	shado.h	/^    PAGE_UP = 1007,$/;"	e	enum:ARROW_editorKey
QUIT_TIMES	shado.h	28;"	d
REPLACE	shado.h	41;"	d
RIGHT	shado.h	114;"	d
SHADO_VERSION	shado.h	24;"	d
SHOW_BAR	shado.h	27;"	d
TAB_STOP	shado.h	26;"	d
UP	shado.h	113;"	d
VISUAL	shado.h	40;"	d
_BSD_SOURCE	shado.h	4;"	d
_DEFAULT_SOURCE	shado.h	3;"	d
_GNU_SOURCE	shado.h	5;"	d
abAppend	s_abuf.c	/^void abAppend(struct abuf *ab, const char *s, int len) {$/;"	f
abFree	s_abuf.c	/^void abFree(struct abuf *ab) {$/;"	f
abuf	shado.h	/^struct abuf {$/;"	s
b	shado.h	/^    char *b;$/;"	m	struct:abuf
c	s_input.c	/^    int c;$/;"	m	struct:mapping	file:
c_hl_extensions	s_synhl.c	/^char *c_hl_extensions[] = { ".c", ".h", ".cpp", ".y", NULL };$/;"	v
c_hl_keywords	s_synhl.c	/^char *c_hl_keywords[] = { $/;"	v
changeCursorShape	s_output.c	/^void changeCursorShape () {$/;"	f
chars	shado.h	/^    char *chars;$/;"	m	struct:erow
cmd_func	s_input.c	/^    handle cmd_func;$/;"	m	struct:mapping	file:
coloff	shado.h	/^    int coloff;$/;"	m	struct:globalState
cx	shado.h	/^    int cx, cy;$/;"	m	struct:globalState
cy	shado.h	/^    int cx, cy;$/;"	m	struct:globalState
dirty	shado.h	/^    int dirty;$/;"	m	struct:globalState
disableRawMode	s_term.c	/^void disableRawMode () { \/\/ Restores on exit to terminal's orig attributes$/;"	f
editorDelChar	s_ops.c	/^void editorDelChar () {$/;"	f
editorDelRow	s_rows.c	/^void editorDelRow (int at) {$/;"	f
editorDrawMessageBar	s_bar.c	/^void editorDrawMessageBar (struct abuf *ab) {$/;"	f
editorDrawRows	s_output.c	/^void editorDrawRows (struct abuf *ab) {$/;"	f
editorDrawStatusBar	s_bar.c	/^void editorDrawStatusBar (struct abuf *ab) {$/;"	f
editorFind	s_search.c	/^void editorFind () {$/;"	f
editorFindCallback	s_search.c	/^void editorFindCallback (char *query, int key) {$/;"	f
editorFreeRow	s_rows.c	/^void editorFreeRow (erow *row) {$/;"	f
editorHighlight	shado.h	/^enum editorHighlight {$/;"	g
editorInsertChar	s_ops.c	/^void editorInsertChar (int c) {$/;"	f
editorInsertNewline	s_ops.c	/^void editorInsertNewline () {$/;"	f
editorInsertRow	s_rows.c	/^void editorInsertRow (int at, char *s, size_t len) {$/;"	f
editorMoveCursor	s_input.c	/^void editorMoveCursor (int key) {$/;"	f
editorOpen	s_io.c	/^void editorOpen (char *filename) {$/;"	f
editorProcessKeypress	s_input.c	/^void editorProcessKeypress () {$/;"	f
editorPrompt	s_input.c	/^char *editorPrompt (char *prompt, void (*callback)(char *, int)) {$/;"	f
editorReadKey	s_term.c	/^int editorReadKey () {$/;"	f
editorRefreshScreen	s_output.c	/^void editorRefreshScreen () {$/;"	f
editorRowAppendString	s_rows.c	/^void editorRowAppendString (erow *row, char *s, size_t len) {$/;"	f
editorRowCxToRx	s_rows.c	/^int editorRowCxToRx (erow *row, int cx) {$/;"	f
editorRowDelChar	s_rows.c	/^void editorRowDelChar(erow *row, int at) {$/;"	f
editorRowInsertChar	s_rows.c	/^void editorRowInsertChar (erow *row, int at, int c) {$/;"	f
editorRowRxToCx	s_rows.c	/^int editorRowRxToCx (erow *row, int rx) {$/;"	f
editorRowsToString	s_io.c	/^char *editorRowsToString (int *buflen) {$/;"	f
editorSave	s_io.c	/^void editorSave () {$/;"	f
editorScroll	s_output.c	/^void editorScroll () {$/;"	f
editorSelectSyntaxHighlight	s_synhl.c	/^void editorSelectSyntaxHighlight () {$/;"	f
editorSetStatusMessage	s_bar.c	/^void editorSetStatusMessage (const char *fmt, ...) {$/;"	f
editorSyntax	shado.h	/^struct editorSyntax {$/;"	s
editorSyntaxToColor	s_synhl.c	/^int editorSyntaxToColor (int hl) {$/;"	f
editorUpdateRow	s_rows.c	/^void editorUpdateRow (erow *row) {$/;"	f
editorUpdateSyntax	s_synhl.c	/^void editorUpdateSyntax (erow *row) {$/;"	f
enterRawMode	s_term.c	/^void enterRawMode () {$/;"	f
erow	shado.h	/^typedef struct erow {$/;"	s
erow	shado.h	/^} erow;$/;"	t	typeref:struct:erow
filematch	shado.h	/^    char **filematch;$/;"	m	struct:editorSyntax
filename	shado.h	/^    char *filename;$/;"	m	struct:globalState
filetype	shado.h	/^    char *filetype;$/;"	m	struct:editorSyntax
flags	shado.h	/^    int flags;$/;"	m	struct:editorSyntax
getCursorPosition	s_term.c	/^int getCursorPosition (int *rows, int *cols) {$/;"	f
getWindowSize	s_term.c	/^int getWindowSize (int *rows, int *cols) {$/;"	f
globalState	shado.h	/^struct globalState {$/;"	s
handle	s_input.c	/^typedef void (*handle)(void);$/;"	t	file:
hl	shado.h	/^    unsigned char *hl;$/;"	m	struct:erow
hl_open_comment	shado.h	/^    int hl_open_comment;$/;"	m	struct:erow
i_backspace	s_input.c	/^void i_backspace() {$/;"	f
i_delete	s_input.c	/^void i_delete() {$/;"	f
i_escape	s_input.c	/^void i_escape() {$/;"	f
i_map	s_input.c	/^const struct mapping i_map[] = { $/;"	v	typeref:struct:mapping
i_move_down	s_input.c	/^void i_move_down() {$/;"	f
i_move_left	s_input.c	/^void i_move_left() {$/;"	f
i_move_right	s_input.c	/^void i_move_right() {$/;"	f
i_move_up	s_input.c	/^void i_move_up() {$/;"	f
i_null	s_input.c	/^void i_null() {$/;"	f
i_return	s_input.c	/^void i_return() {$/;"	f
idx	shado.h	/^    int idx;$/;"	m	struct:erow
initEditor	shado.c	/^void initEditor () {$/;"	f
is_separator	s_synhl.c	/^static int is_separator (int c) {$/;"	f	file:
keywords	shado.h	/^    char **keywords;$/;"	m	struct:editorSyntax
kill	s_term.c	/^void kill (const char *s) {$/;"	f
len	shado.h	/^    int len;$/;"	m	struct:abuf
main	shado.c	/^int main (int argc, char *argv[]) {$/;"	f
mapping	s_input.c	/^const struct mapping {$/;"	s	file:
mode	shado.h	/^    int mode;$/;"	m	struct:globalState
multiline_comment_end	shado.h	/^    char *multiline_comment_end;$/;"	m	struct:editorSyntax
multiline_comment_start	shado.h	/^    char *multiline_comment_start;$/;"	m	struct:editorSyntax
n_append	s_input.c	/^void n_append() {$/;"	f
n_insert	s_input.c	/^void n_insert() {$/;"	f
n_map	s_input.c	/^} n_map[] = { $/;"	v	typeref:struct:mapping
n_move_down	s_input.c	/^void n_move_down() {$/;"	f
n_move_left	s_input.c	/^void n_move_left() {$/;"	f
n_move_right	s_input.c	/^void n_move_right() {$/;"	f
n_move_up	s_input.c	/^void n_move_up() {$/;"	f
n_null	s_input.c	/^void n_null() {$/;"	f
n_quit	s_input.c	/^void n_quit() {$/;"	f
n_return	s_input.c	/^void n_return() {$/;"	f
numrows	shado.h	/^    int numrows;$/;"	m	struct:globalState
orig_termios	shado.h	/^    struct termios orig_termios;$/;"	m	struct:globalState	typeref:struct:globalState::termios
print_flag	shado.h	/^    int print_flag;$/;"	m	struct:globalState
render	shado.h	/^    char *render;$/;"	m	struct:erow
row	shado.h	/^    erow *row;$/;"	m	struct:globalState
rowoff	shado.h	/^    int rowoff;$/;"	m	struct:globalState
rsize	shado.h	/^    int rsize;$/;"	m	struct:erow
rx	shado.h	/^    int rx;$/;"	m	struct:globalState
screencols	shado.h	/^    int screencols;$/;"	m	struct:globalState
screenrows	shado.h	/^    int screenrows;$/;"	m	struct:globalState
setMode	s_modes.c	/^void setMode (int input) {$/;"	f
singleline_comment_start	shado.h	/^    char *singleline_comment_start;$/;"	m	struct:editorSyntax
size	shado.h	/^    int size;$/;"	m	struct:erow
stsmsg	shado.h	/^    char stsmsg[80];$/;"	m	struct:globalState
stsmsg_time	shado.h	/^    time_t stsmsg_time;$/;"	m	struct:globalState
syntax	shado.h	/^    struct editorSyntax *syntax;$/;"	m	struct:globalState	typeref:struct:globalState::editorSyntax
