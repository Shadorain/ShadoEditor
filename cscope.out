cscope 15 $HOME/dev/shado -c -q 0000003663 0000339951
	@s_abuf.c

2 #include 
	~"shado.h
"

4 void 
	$abAppend
(struct 
abuf
 *
ab
, const char *
s
, int 
len
) {

5 char *
new
 = 
	`realloc
(
ab
->
b
, ab->
len
 + len);

7 if (
new
 == 
NULL
) return;

8 
	`memcpy
(&
new
[
ab
->
len
], 
s
, len);

9 
ab
->
b
 = 
new
;

10 
ab
->
len
 += len;

11 
	}
}

13 void 
	$abFree
(struct 
abuf
 *
ab
) {

14 
	`free
(
ab
->
b
);

15 
	}
}

	@s_bar.c

2 #include 
	~"shado.h
"

4 void 
	$editorDrawStatusBar
 (struct 
abuf
 *
ab
) {

5 
	`abAppend
(
ab
, "\x1b[7m", 4);

6 char 
status
[80], 
rstatus
[80];

9 int 
len
 = 
	`snprintf
(
status
, sizeof(status), "%.20s %s",

10 
E
.
filename
 ? E.filename : "[No Name]",

11 
E
.
dirty
 ? "(modified)" : "");

12 int 
rlen
 = 
	`snprintf
(
rstatus
, sizeof(rstatus), "%s | %d:%d",

13 
E
.
syntax
 ? E.syntax->
filetype
 : "no ft", E.
cy
 + 1, E.
numrows
);

14 if (
len
 > 
E
.
screencols
) len = E.screencols;

15 
	`abAppend
(
ab
, 
status
, 
len
);

16 while (
len
 < 
E
.
screencols
) {

17 if (
E
.
screencols
 - 
len
 == 
rlen
) {

18 
	`abAppend
(
ab
, 
rstatus
, 
rlen
);

21 
	`abAppend
(
ab
, " ", 1);

22 
len
++;

25 
	`abAppend
(
ab
, "\x1b[m", 3);

26 
	`abAppend
(
ab
, "\r\n", 2);

27 
	}
}

29 void 
	$editorDrawMessageBar
 (struct 
abuf
 *
ab
) {

30 
	`abAppend
(
ab
, "\x1b[K", 3);

31 int 
msglen
 = 
	`strlen
(
E
.
stsmsg
);

32 if (
msglen
 > 
E
.
screencols
) msglen = E.screencols;

33 if (
msglen
 && 
	`time
(
NULL
) - 
E
.
stsmsg_time
 < 5)

34 
	`abAppend
(
ab
, 
E
.
stsmsg
, 
msglen
);

35 
	}
}

37 void 
	$editorSetStatusMessage
 (const char *
fmt
, ...) {

38 
va_list
 
ap
;

39 
	`va_start
(
ap
, 
fmt
);

40 
	`vsnprintf
(
E
.
stsmsg
, sizeof(E.stsmsg), 
fmt
, 
ap
);

41 
	`va_end
(
ap
);

42 
E
.
stsmsg_time
 = 
	`time
(
NULL
);

43 
	}
}

	@s_input.c

2 #include 
	~"shado.h
"

4 #define 
	#key_a
 'a'

	)

5 #define 
	#key_a
 'a'

	)

6 #define 
	#key_b
 'b'

	)

7 #define 
	#key_c
 'c'

	)

8 #define 
	#key_d
 'd'

	)

9 #define 
	#key_e
 'e'

	)

10 #define 
	#key_f
 'f'

	)

11 #define 
	#key_g
 'g'

	)

12 #define 
	#key_h
 'h'

	)

13 #define 
	#key_i
 'i'

	)

14 #define 
	#key_j
 'j'

	)

15 #define 
	#key_k
 'k'

	)

16 #define 
	#key_l
 'l'

	)

17 #define 
	#key_m
 'm'

	)

18 #define 
	#key_n
 'n'

	)

19 #define 
	#key_o
 'o'

	)

20 #define 
	#key_p
 'p'

	)

21 #define 
	#key_q
 'q'

	)

22 #define 
	#key_r
 'r'

	)

23 #define 
	#key_s
 's'

	)

24 #define 
	#key_t
 't'

	)

25 #define 
	#key_u
 'u'

	)

26 #define 
	#key_v
 'v'

	)

27 #define 
	#key_w
 'w'

	)

28 #define 
	#key_x
 'x'

	)

29 #define 
	#key_y
 'y'

	)

30 #define 
	#key_z
 'z'

	)

31 #define 
	#Ctrl_a
 
	`CTRL_KEY
('a')

	)

32 #define 
	#Ctrl_b
 
	`CTRL_KEY
('b')

	)

33 #define 
	#Ctrl_c
 
	`CTRL_KEY
('c')

	)

34 #define 
	#Ctrl_d
 
	`CTRL_KEY
('d')

	)

35 #define 
	#Ctrl_e
 
	`CTRL_KEY
('e')

	)

36 #define 
	#Ctrl_f
 
	`CTRL_KEY
('f')

	)

37 #define 
	#Ctrl_g
 
	`CTRL_KEY
('g')

	)

38 #define 
	#Ctrl_h
 
	`CTRL_KEY
('h')

	)

39 #define 
	#Ctrl_i
 
	`CTRL_KEY
('i')

	)

40 #define 
	#Ctrl_j
 
	`CTRL_KEY
('j')

	)

41 #define 
	#Ctrl_k
 
	`CTRL_KEY
('k')

	)

42 #define 
	#Ctrl_l
 
	`CTRL_KEY
('l')

	)

43 #define 
	#Ctrl_m
 
	`CTRL_KEY
('m')

	)

44 #define 
	#Ctrl_n
 
	`CTRL_KEY
('n')

	)

45 #define 
	#Ctrl_o
 
	`CTRL_KEY
('o')

	)

46 #define 
	#Ctrl_p
 
	`CTRL_KEY
('p')

	)

47 #define 
	#Ctrl_q
 
	`CTRL_KEY
('q')

	)

48 #define 
	#Ctrl_r
 
	`CTRL_KEY
('r')

	)

49 #define 
	#Ctrl_s
 
	`CTRL_KEY
('s')

	)

50 #define 
	#Ctrl_t
 
	`CTRL_KEY
('t')

	)

51 #define 
	#Ctrl_u
 
	`CTRL_KEY
('u')

	)

52 #define 
	#Ctrl_v
 
	`CTRL_KEY
('v')

	)

53 #define 
	#Ctrl_w
 
	`CTRL_KEY
('w')

	)

54 #define 
	#Ctrl_x
 
	`CTRL_KEY
('x')

	)

55 #define 
	#Ctrl_y
 
	`CTRL_KEY
('y')

	)

56 #define 
	#Ctrl_z
 
	`CTRL_KEY
('z')

	)

58 typedef struct 
	sfunc_args
 {

59 int 
	marg
;

60 } 
	tfuncarg_t
;

62 void 
n_append
(
funcarg_t
 *
args
);

63 typedef void (*
	tfunc_t
)(
	tfuncarg_t
 *
	targs
);

65 static const struct 
	skey_list
 {

66 int 
key
;

67 
func_t
 
cmd_func
;

68 int 
mode
;

69 } 
nv_cmds
[] = {

70 {
a
, 
n_append
, 0},

71 {
Ctrl_a
, 
n_append
, 0},

72 
	}
};

74 void 
	$n_append
(
funcarg_t
 *
args
) {

75 int 
test
 = 
args
->
arg
;

76 
	`printf
("%d\n", 
test
);

77 
	}
}

79 char *
editorPrompt
 (char *
prompt
, void (*
callback
)(char *, int)) {

80 
size_t
 
bufsize
 = 128;

81 char *
buf
 = 
	`malloc
(
bufsize
);

82 
size_t
 
buflen
 = 0;

83 
buf
[0] = '\0';

86 
	`editorSetStatusMessage
(
prompt
, 
buf
);

87 
	`editorRefreshScreen
();

89 int 
c
 = 
	`editorReadKey
();

90 if (
c
 == 
DEL_KEY
 || c == 
	`CTRL_KEY
('h') || c == 
BACKSPACE
) {

91 if (
buflen
 != 0) 
buf
[--buflen] = '\0';

92 } else if (
c
 == '\x1b') {

93 
	`editorSetStatusMessage
("");

94 if (
callback
) 
	`callback
(
buf
, 
c
);

95 
	`free
(
buf
);

96 return 
NULL
;

97 } else if (
c
 == '\r') {

98 if (
buflen
 != 0) {

99 
	`editorSetStatusMessage
("");

100 if (
callback
) 
	`callback
(
buf
, 
c
);

101 return 
buf
;

103 } else if (!
	`iscntrl
(
c
) && c < 128) {

104 if (
buflen
 == 
bufsize
 - 1) {

105 
bufsize
 *= 2;

106 
buf
 = 
	`realloc
(buf, 
bufsize
);

108 
buf
[
buflen
++] = 
c
;

109 
buf
[
buflen
] = '\0';

111 if (
callback
) 
	`callback
(
buf
, 
c
);

113 
	}
}

116 void 
	$editorMoveCursor
 (int 
key
) {

117 
erow
 *
row
 = (
E
.
cy
 >= E.
numrows
) ? 
NULL
 : &E.row[E.cy];

119 switch (
key
) {

120 case 
LEFT
: case 
ARROW_LEFT
:

121 if (
E
.
cx
 != 0)

122 
E
.
cx
--;

123 else if (
E
.
cy
 > 0) {

124 
E
.
cy
--;

125 
E
.
cx
 = E.
row
[E.
cy
].
size
;

128 case 
DOWN
: case 
ARROW_DOWN
:

129 if (
E
.
cy
 < E.
numrows
)

130 
E
.
cy
++;

132 case 
UP
: case 
ARROW_UP
: if (
E
.
cy
 != 0)

133 
E
.
cy
--;

135 case 
RIGHT
: case 
ARROW_RIGHT
:

136 if (
row
 && 
E
.
cx
 < row->
size
)

137 
E
.
cx
++;

138 else if (
row
 && 
E
.
cx
 == row->
size
) {

139 
E
.
cy
++;

140 
E
.
cx
 = 0;

145 
row
 = (
E
.
cy
 >= E.
numrows
) ? 
NULL
 : &E.row[E.cy];

146 int 
rowlen
 = 
row
 ? row->
size
 : 0;

147 if (
E
.
cx
 > 
rowlen
)

148 
E
.
cx
 = 
rowlen
;

149 
	}
}

152 void 
	$editorProcessKeypress
 () {

153 static int 
quit_times
 = 
QUIT_TIMES
;

155 int 
c
 = 
	`editorReadKey
();

158 switch (
c
) {

160 
	`editorInsertNewline
();

163 case 
	`CTRL_KEY
('q'):

164 if (
E
.
dirty
 && 
quit_times
 > 0) {

165 
	`editorSetStatusMessage
("WARNING!! File has unsaved changes. "

166 "Press C-q %d more times to quit", 
quit_times
);

167 
quit_times
--;

170 
	`write
(
STDOUT_FILENO
, "\x1b[2J", 4);

171 
	`write
(
STDOUT_FILENO
, "\x1b[H", 3);

172 
	`exit
(0);

175 case 
BACKSPACE
: case 
	`CTRL_KEY
('h'):

176 case 
DEL_KEY
:

177 if (
c
 == 
DEL_KEY
) 
	`editorMoveCursor
(
RIGHT
);

178 
	`editorDelChar
();

181 case 
	`CTRL_KEY
('s'):

182 
	`editorSave
();

185 case 
	`CTRL_KEY
('l'):

190 case 
	`CTRL_KEY
('f'):

191 
	`editorFind
();

194 case 
HOME_KEY
:

195 
E
.
cx
 = 0;

197 case 
END_KEY
:

198 if (
E
.
cy
 < E.
numrows
)

199 
E
.
cx
 = E.
row
[E.
cy
].
size
;

202 case 
PAGE_UP
: case 
PAGE_DOWN
:

204 if (
c
 == 
PAGE_UP
)

205 
E
.
cy
 = E.
rowoff
;

206 else if (
c
 == 
PAGE_DOWN
) {

207 
E
.
cy
 = E.
rowoff
 + E.
screenrows
 - 1;

208 if (
E
.
cy
 > E.
numrows
) E.cy = E.numrows;

211 int 
times
 = 
E
.
screenrows
;

212 while (
times
--)

213 
	`editorMoveCursor
(
c
 == 
PAGE_UP
 ? 
UP
 : 
DOWN
);

217 case 
LEFT
: case 
DOWN
: case 
UP
: case 
RIGHT
:

218 case 
ARROW_LEFT
: case 
ARROW_DOWN
: case 
ARROW_UP
: case 
ARROW_RIGHT
:

219 
	`editorMoveCursor
(
c
);

223 
	`editorInsertChar
(
c
);

226 
quit_times
 = 
QUIT_TIMES
;

227 
	}
}

	@s_io.c

2 #include 
	~"shado.h
"

4 char *
	$editorRowsToString
 (int *
buflen
) {

5 int 
tlen
 = 0;

6 int 
i
;

7 for (
i
 = 0; i < 
E
.
numrows
; i++)

8 
tlen
 += 
E
.
row
[
i
].
size
 + 1;

9 *
buflen
 = 
tlen
;

11 char *
buf
 = 
	`malloc
(
tlen
);

12 char *
p
 = 
buf
;

13 for (
i
 = 0; i <
E
.
numrows
; i++) {

14 
	`memcpy
(
p
, 
E
.
row
[
i
].
chars
, E.row[i].
size
);

15 
p
 += 
E
.
row
[
i
].
size
;

16 *
p
 = '\n';

17 
p
++;

19 return 
buf
;

20 
	}
}

22 void 
	$editorOpen
 (char *
filename
) {

23 
	`free
(
E
.
filename
);

24 
E
.
filename
 = 
	`strdup
(filename);

26 
	`editorSelectSyntaxHighlight
();

28 
FILE
 *
fp
 = 
	`fopen
(
filename
, "r");

29 if (!
fp
) 
	`kill
("fopen");

31 char *
line
 = 
NULL
;

32 
size_t
 
linecap
 = 0;

33 
ssize_t
 
linelen
;

34 while ((
linelen
 = 
	`getline
(&
line
, &
linecap
, 
fp
)) != -1) {

35 while (
linelen
 > 0 && (
line
[linelen - 1] == '\n' || line[linelen - 1] == '\r'))

36 
linelen
--;

37 
	`editorInsertRow
(
E
.
numrows
, 
line
, 
linelen
);

39 
	`free
(
line
);

40 
	`fclose
(
fp
);

41 
E
.
dirty
 = 0;

42 
	}
}

44 void 
	$editorSave
 () {

45 if (
E
.
filename
 == 
NULL
) {

46 
E
.
filename
 = 
	`editorPrompt
("Save as: %s (ESC: Cancel)", 
NULL
);

47 if (
E
.
filename
 == 
NULL
) {

48 
	`editorSetStatusMessage
("Save aborted");

51 
	`editorSelectSyntaxHighlight
();

54 int 
len
;

55 char *
buf
 = 
	`editorRowsToString
(&
len
);

57 int 
fd
 = 
	`open
(
E
.
filename
, 
O_RDWR
 | 
O_CREAT
, 0644);

58 if (
fd
 != -1) {

59 if (
	`ftruncate
(
fd
, 
len
) != -1)

60 if (
	`write
(
fd
, 
buf
, 
len
) == len) {

61 
	`close
(
fd
);

62 
	`editorSetStatusMessage
("%d bytes written to disk", 
len
);

63 
	`free
(
buf
);

64 
E
.
dirty
 = 0;

67 
	`close
(
fd
);

69 
	`free
(
buf
);

70 
	`editorSetStatusMessage
("Can't save! I/O error: %s", 
	`strerror
(
errno
));

71 
	}
}

	@s_modes.c

2 #include 
	~"shado.h
"

4 void 
	$setMode
 (int 
input
) {

5 switch (
input
) {

28 
	}
}

	@s_ops.c

2 #include 
	~"shado.h
"

4 void 
	$editorInsertChar
 (int 
c
) {

5 if (
E
.
cy
 == E.
numrows
)

6 
	`editorInsertRow
(
E
.
numrows
, "", 0);

7 
	`editorRowInsertChar
(&
E
.
row
[E.
cy
], E.
cx
, 
c
);

8 
E
.
cx
++;

9 
	}
}

11 void 
	$editorDelChar
 () {

12 if (
E
.
cy
 == E.
numrows
) return;

13 if (
E
.
cx
 == 0 && E.
cy
 == 0) return;

15 
erow
 *
row
 = &
E
.row[E.
cy
];

16 if (
E
.
cx
 > 0) {

17 
	`editorRowDelChar
(
row
, 
E
.
cx
 - 1);

18 
E
.
cx
--;

20 
E
.
cx
 = E.
row
[E.
cy
-1].
size
;

21 
	`editorRowAppendString
(&
E
.
row
[E.
cy
-1], row->
chars
, row->
size
);

22 
	`editorDelRow
(
E
.
cy
);

23 
E
.
cy
--;

25 
	}
}

27 void 
	$editorInsertNewline
 () {

28 if (
E
.
cx
 == 0)

29 
	`editorInsertRow
(
E
.
cy
, "", 0);

31 
erow
 *
row
 = &
E
.row[E.
cy
];

32 
	`editorInsertRow
(
E
.
cy
+1, &
row
->
chars
[E.
cx
], row->
size
 - E.cx);

33 
row
 = &
E
.row[E.
cy
];

34 
row
->
size
 = 
E
.
cx
;

35 
row
->
chars
[row->
size
] = '\0';

36 
	`editorUpdateRow
(
row
);

38 
E
.
cy
++;

39 
E
.
cx
 = 0;

40 
	}
}

	@s_output.c

2 #include 
	~"shado.h
"

4 void 
	$editorScroll
 () {

5 
E
.
rx
 = 0;

6 if (
E
.
cy
 < E.
numrows
)

7 
E
.
rx
 = 
	`editorRowCxToRx
(&E.
row
[E.
cy
], E.
cx
);

9 if (
E
.
cy
 < E.
rowoff
)

10 
E
.
rowoff
 = E.
cy
;

11 if (
E
.
cy
 >= E.
rowoff
 + E.
screenrows
)

12 
E
.
rowoff
 = E.
cy
 - E.
screenrows
 + 1;

13 if (
E
.
rx
 < E.
coloff
)

14 
E
.
coloff
 = E.
rx
;

15 if (
E
.
rx
 >= E.
coloff
 + E.
screencols
)

16 
E
.
coloff
 = E.
rx
 - E.
screencols
 + 1;

17 
	}
}

19 void 
	$editorDrawRows
 (struct 
abuf
 *
ab
) {

20 int 
y
;

21 for (
y
 = 0; y < 
E
.
screenrows
; y++) {

22 int 
filerow
 = 
y
 + 
E
.
rowoff
;

23 if (
filerow
 >= 
E
.
numrows
) {

24 if (
E
.
numrows
 == 0 && 
y
 == E.
screenrows
 / 3) {

25 char 
welcome
[80];

26 int 
welcomelen
 = 
	`snprintf
(
welcome
, sizeof(welcome),

27 "Kilo editor -- version %s", 
SHADO_VERSION
);

28 if (
welcomelen
 > 
E
.
screencols
) welcomelen = E.screencols;

29 int 
padding
 = (
E
.
screencols
 - 
welcomelen
) / 2;

30 if (
padding
) {

31 
	`abAppend
(
ab
, "~", 1);

32 
padding
--;

34 while (
padding
--) 
	`abAppend
(
ab
, " ", 1);

35 
	`abAppend
(
ab
, 
welcome
, 
welcomelen
);

37 
	`abAppend
(
ab
, "~", 1);

39 int 
len
 = 
E
.
row
[
filerow
].
rsize
 - E.
coloff
;

40 if (
len
 < 0) len = 0;

41 if (
len
 > 
E
.
screencols
) len = E.screencols;

43 char *
c
 = &
E
.
row
[
filerow
].
render
[E.
coloff
];

44 unsigned char *
hl
 = &
E
.
row
[
filerow
].hl[E.
coloff
];

45 int 
cur_col
 = -1;

46 int 
i
;

47 for (
i
 = 0; i < 
len
; i++)

48 if (
	`iscntrl
(
c
[
i
])) {

49 char 
sym
 = (
c
[
i
] <= 26) ? '@' + c[i] : '?';

50 
	`abAppend
(
ab
, "\x1b[7m", 4);

51 
	`abAppend
(
ab
, &
sym
, 1);

52 
	`abAppend
(
ab
, "\x1b[m", 3);

53 if (
cur_col
 != -1) {

54 char 
buf
[16];

55 int 
clen
 = 
	`snprintf
(
buf
, sizeof(buf), "\x1b[%dm", 
cur_col
);

56 
	`abAppend
(
ab
, 
buf
, 
clen
);

58 } else if (
hl
[
i
] == 
HL_NORMAL
) {

59 if (
cur_col
 != -1) {

60 
	`abAppend
(
ab
, "\x1b[39m", 5);

61 
cur_col
 = -1;

63 
	`abAppend
(
ab
, &
c
[
i
], 1);

65 int 
color
 = 
	`editorSyntaxToColor
(
hl
[
i
]);

66 if (
color
 != 
cur_col
) {

67 
cur_col
 = 
color
;

68 char 
buf
[16];

69 int 
clen
 = 
	`snprintf
(
buf
, sizeof(buf), "\x1b[%dm", 
color
);

70 
	`abAppend
(
ab
, 
buf
, 
clen
);

72 
	`abAppend
(
ab
, &
c
[
i
], 1);

74 
	`abAppend
(
ab
, "\x1b[39m", 5);

76 
	`abAppend
(
ab
, "\x1b[K", 3);

78 
	`abAppend
(
ab
, "\r\n", 2);

80 
	}
}

82 void 
	$editorRefreshScreen
 () {

83 
	`editorScroll
();

84 struct 
abuf
 
ab
 = 
ABUF_INIT
;

85 
	`abAppend
(&
ab
, "\x1b[?25l", 6);

86 
	`abAppend
(&
ab
, "\x1b[H", 3);

88 
	`editorDrawRows
(&
ab
);

89 
	`editorDrawStatusBar
(&
ab
);

90 
	`editorDrawMessageBar
(&
ab
);

92 char 
buf
[32];

93 
	`snprintf
(
buf
, sizeof(buf), "\x1b[%d;%dH", (
E
.
cy
 - E.
rowoff
) + 1,

94 (
E
.
rx
 - E.
coloff
) + 1);

95 
	`abAppend
(&
ab
, 
buf
, 
	`strlen
(buf));

96 
	`abAppend
(&
ab
, "\x1b[?25h", 6);

98 
	`write
(
STDOUT_FILENO
, 
ab
.
b
, ab.
len
);

99 
	`abFree
(&
ab
);

100 
	}
}

	@s_rows.c

2 #include 
	~"shado.h
"

4 int 
	$editorRowCxToRx
 (
erow
 *
row
, int 
cx
) {

5 int 
rx
 = 0;

6 int 
i
;

7 for (
i
 = 0; i < 
cx
; i++) {

8 if (
row
->
chars
[
i
] == '\t')

9 
rx
 += (
TAB_STOP
 - 1) - (rx % TAB_STOP);

10 
rx
++;

12 return 
rx
;

13 
	}
}

15 int 
	$editorRowRxToCx
 (
erow
 *
row
, int 
rx
) {

16 int 
cur_rx
 = 0;

17 int 
cx
;

18 for (
cx
 = 0; cx < 
row
->
size
; cx++) {

19 if (
row
->
chars
[
cx
] == '\t')

20 
cur_rx
 += (
TAB_STOP
 - 1) - (cur_rx % TAB_STOP);

21 
cur_rx
++;

22 if (
cur_rx
 > 
rx
) return 
cx
;

24 return 
cx
;

25 
	}
}

27 void 
	$editorUpdateRow
 (
erow
 *
row
) {

28 int 
tabs
 = 0;

29 int 
j
;

30 for (
j
 = 0; j < 
row
->
size
; j++)

31 if (
row
->
chars
[
j
] == '\t') 
tabs
++;

33 
	`free
(
row
->
render
);

34 
row
->
render
 = 
	`malloc
(row->
size
 + (
tabs
* (
TAB_STOP
 - 1)) + 1);

36 int 
idx
 = 0;

37 for (
j
 = 0; j < 
row
->
size
; j++)

38 if (
row
->
chars
[
j
] == '\t') {

39 
row
->
render
[
idx
++] = row->
chars
[
j
];

40 while (
idx
 % 
TAB_STOP
 != 0) 
row
->
render
[idx++] = ' ';

42 
row
->
render
[
idx
++] = row->
chars
[
j
];

44 
row
->
render
[
idx
] = '\0';

45 
row
->
rsize
 = 
idx
;

47 
	`editorUpdateSyntax
(
row
);

48 
	}
}

50 void 
	$editorInsertRow
 (int 
at
, char *
s
, 
size_t
 
len
) {

51 if (
at
 < 0 || at > 
E
.
numrows
) return;

53 
E
.
row
 = 
	`realloc
(E.row, sizeof(
erow
) * (E.
numrows
 + 1));

54 
	`memmove
(&
E
.
row
[
at
+1], &E.row[at], sizeof(
erow
) * (E.
numrows
 - at));

55 for (int 
j
 = 
at
 + 1; j <= 
E
.
numrows
; j++) E.
row
[j].
idx
++;

57 
E
.
row
[
at
].
idx
 = at;

58 
E
.
row
[
at
].
size
 = 
len
;

59 
E
.
row
[
at
].
chars
 = 
	`malloc
(
len
 + 1);

60 
	`memcpy
(
E
.
row
[
at
].
chars
, 
s
, 
len
);

61 
E
.
row
[
at
].
chars
[
len
] = '\0';

63 
E
.
row
[
at
].
rsize
 = 0;

64 
E
.
row
[
at
].
render
 = 
NULL
;

65 
E
.
row
[
at
].
hl
 = 
NULL
;

66 
E
.
row
[
at
].
hl_open_comment
 = 0;

67 
	`editorUpdateRow
(&
E
.
row
[
at
]);

69 
E
.
numrows
++;

70 
E
.
dirty
++;

71 
	}
}

73 void 
	$editorFreeRow
 (
erow
 *
row
) {

74 
	`free
(
row
->
render
);

75 
	`free
(
row
->
chars
);

76 
	`free
(
row
->
hl
);

77 
	}
}

79 void 
	$editorDelRow
 (int 
at
) {

80 if (
at
 < 0 || at >= 
E
.
numrows
) return;

81 
	`editorFreeRow
(&
E
.
row
[
at
]);

82 
	`memmove
(&
E
.
row
[
at
], &E.row[at+1], sizeof(
erow
) * (E.
numrows
 - at - 1));

83 for (int 
j
 = 
at
; j < 
E
.
numrows
 - 1; j++) E.
row
[j].
idx
--;

84 
E
.
numrows
--;

85 
E
.
dirty
++;

86 
	}
}

88 void 
	$editorRowInsertChar
 (
erow
 *
row
, int 
at
, int 
c
) {

89 if (
at
 < 0 || at > 
row
->
size
) at = row->size;

90 
row
->
chars
 = 
	`realloc
(row->chars, row->
size
 + 2);

91 
	`memmove
(&
row
->
chars
[
at
 + 1], &row->chars[at], row->
size
 - at + 1);

92 
row
->
size
++;

93 
row
->
chars
[
at
] = 
c
;

94 
	`editorUpdateRow
(
row
);

95 
E
.
dirty
++;

96 
	}
}

98 void 
	$editorRowDelChar
(
erow
 *
row
, int 
at
) {

99 if (
at
 < 0 || at >= 
row
->
size
) return;

100 
	`memmove
(&
row
->
chars
[
at
], &row->chars[at + 1], row->
size
 - at);

101 
row
->
size
--;

102 
	`editorUpdateRow
(
row
);

103 
E
.
dirty
++;

104 
	}
}

106 void 
	$editorRowAppendString
 (
erow
 *
row
, char *
s
, 
size_t
 
len
) {

107 
row
->
chars
 = 
	`realloc
(row->chars, row->
size
 + 
len
 + 1);

108 
	`memcpy
(&
row
->
chars
[row->
size
], 
s
, 
len
);

109 
row
->
size
 += 
len
;

110 
row
->
chars
[row->
size
] = '\0';

111 
	`editorUpdateRow
(
row
);

112 
E
.
dirty
++;

113 
	}
}

	@s_search.c

2 #include 
	~"shado.h
"

4 void 
	$editorFindCallback
 (char *
query
, int 
key
) {

5 static int 
last_match
 = -1;

6 static int 
direction
 = 1;

8 static int 
saved_hl_line
;

9 static char *
saved_hl
 = 
NULL
;

11 if (
saved_hl
) {

12 
	`memcpy
(
E
.
row
[
saved_hl_line
].
hl
, 
saved_hl
, E.row[saved_hl_line].
rsize
);

13 
	`free
(
saved_hl
);

14 
saved_hl
 = 
NULL
;

17 if (
key
 == '\r' || key == '\x1b') {

18 
last_match
 = -1;

19 
direction
 = 1;

21 } else if (
key
 == 'n' || key == 
ARROW_DOWN
)

22 
direction
 = 1;

23 else if (
key
 == 'N' || key == 
ARROW_UP
)

24 
direction
 = -1;

26 
last_match
 = -1;

27 
direction
 = 1;

30 if (
last_match
 == -1) 
direction
 = 1;

31 int 
current
 = 
last_match
;

32 int 
i
;

33 for (
i
 = 0; i < 
E
.
numrows
; i++) {

34 
current
 += 
direction
;

35 if (
current
 == -1) current = 
E
.
numrows
 - 1;

36 else if (
current
 == 
E
.
numrows
) current = 0;

38 
erow
 *
row
 = &
E
.row[
current
];

39 char *
match
 = 
	`strstr
(
row
->
render
, 
query
);

40 if (
match
) {

41 
last_match
 = 
current
;

42 
E
.
cy
 = 
current
;

43 
E
.
cx
 = 
	`editorRowRxToCx
(
row
, 
match
 - row->
render
);

44 
E
.
rowoff
 = E.
numrows
;

46 
saved_hl_line
 = 
current
;

47 
saved_hl
 = 
	`malloc
(
row
->
rsize
);

48 
	`memcpy
(
saved_hl
, 
row
->
hl
, row->
rsize
);

49 
	`memset
(&
row
->
hl
[
match
 - row->
render
], 
HL_MATCH
, 
	`strlen
(
query
));

53 
	}
}

55 void 
	$editorFind
 () {

56 int 
saved_cx
 = 
E
.
cx
;

57 int 
saved_cy
 = 
E
.
cy
;

58 int 
saved_coloff
 = 
E
.
coloff
;

59 int 
saved_rowoff
 = 
E
.
rowoff
;

60 char *
query
 = 
	`editorPrompt
("Search: %s (ESC: Cancel | n/N: Move)", 
editorFindCallback
);

62 if (
query
)

63 
	`free
(
query
);

65 
E
.
cx
 = 
saved_cx
;

66 
E
.
cy
 = 
saved_cy
;

67 
E
.
coloff
 = 
saved_coloff
;

68 
E
.
rowoff
 = 
saved_rowoff
;

70 
	}
}

	@s_synhl.c

2 #include 
	~"shado.h
"

4 char *
	gc_hl_extensions
[] = { ".c", ".h", ".cpp", ".y", 
NULL
 };

5 char *
	gc_hl_keywords
[] = {

10 "void|", 
NULL
,

13 struct 
editorSyntax
 
	gHLDB
[] = {

16 
c_hl_extensions
,

17 
c_hl_keywords
,

19 
HL_HIGHLIGHT_NUMS
 | 
HL_HIGHLIGHT_STRINGS
,

23 static int 
	$is_separator
 (int 
c
) {

24 return 
	`isspace
(
c
) || c == '\0' || 
	`strchr
(",.()+-/*=~%><>[];", c) != 
NULL
;

25 
	}
}

27 void 
	$editorUpdateSyntax
 (
erow
 *
row
) {

28 
row
->
hl
 = 
	`realloc
(row->hl, row->
rsize
);

29 
	`memset
(
row
->
hl
, 
HL_NORMAL
, row->
rsize
);

31 if (
E
.
syntax
 == 
NULL
) return;

33 char **
keywords
 = 
E
.
syntax
->keywords;

35 char *
scs
 = 
E
.
syntax
->
singleline_comment_start
;

36 char *
mcs
 = 
E
.
syntax
->
multiline_comment_start
;

37 char *
mce
 = 
E
.
syntax
->
multiline_comment_end
;

39 int 
scs_len
 = 
scs
 ? 
	`strlen
(scs) : 0;

40 int 
mcs_len
 = 
mcs
 ? 
	`strlen
(mcs) : 0;

41 int 
mce_len
 = 
mce
 ? 
	`strlen
(mce) : 0;

43 int 
prev_sep
 = 1;

44 int 
in_string
 = 0;

45 int 
in_comment
 = (
row
->
idx
 > 0 && 
E
.row[row->idx - 1].
hl_open_comment
);

47 int 
i
 = 0;

48 while (
i
 < 
row
->
rsize
) {

49 char 
c
 = 
row
->
render
[
i
];

50 unsigned char 
prev_hl
 = (
i
 > 0) ? 
row
->
hl
[i-1] : 
HL_NORMAL
;

53 if (
scs_len
 && !
in_string
 && !
in_comment
)

54 if (!
	`strncmp
(&
row
->
render
[
i
], 
scs
, 
scs_len
)) {

55 
	`memset
(&
row
->
hl
[
i
], 
HL_COMMENT
, row->
rsize
 - i);

59 if (
mcs_len
 && 
mce_len
 && !
in_string
) {

60 if (
in_comment
) {

61 
row
->
hl
[
i
] = 
HL_MLCOMMENT
;

62 if (!
	`strncmp
(&
row
->
render
[
i
], 
mce
, 
mce_len
)) {

63 
	`memset
(&
row
->
hl
[
i
], 
HL_MLCOMMENT
, 
mce_len
);

64 
i
 += 
mce_len
;

65 
in_comment
 = 0;

66 
prev_sep
 = 1;

69 
i
++;

72 } else if (!
	`strncmp
(&
row
->
render
[
i
], 
mcs
, 
mcs_len
)) {

73 
	`memset
(&
row
->
hl
[
i
], 
HL_MLCOMMENT
, 
mce_len
);

74 
i
 += 
mcs_len
;

75 
in_comment
 = 1;

80 if (
E
.
syntax
->
flags
 & 
HL_HIGHLIGHT_STRINGS
) {

81 if (
in_string
) {

82 
row
->
hl
[
i
] = 
HL_STRING
;

83 if (
c
 == '\\' && 
i
 + 1 < 
row
->
rsize
) {

84 
row
->
hl
[
i
+1] = 
HL_STRING
;

85 
i
 += 2;

88 if (
c
 == 
in_string
) in_string = 0;

89 
i
++;

90 
prev_sep
 = 1;

93 if (
c
 == '"' || c == '\'') {

94 
in_string
 = 
c
;

95 
row
->
hl
[
i
] = 
HL_STRING
;

96 
i
++;

101 if (
E
.
syntax
->
flags
 & 
HL_HIGHLIGHT_NUMS
)

102 if ((
	`isdigit
(
c
) && (
prev_sep
 || 
prev_hl
 == 
HL_NUMBER
)) ||

103 (
c
 == '.' && 
prev_hl
 == 
HL_NUMBER
)) {

104 
row
->
hl
[
i
] = 
HL_NUMBER
;

105 
i
++;

106 
prev_sep
 = 0;

110 if (
prev_sep
) {

111 int 
j
;

112 for (
j
 = 0; 
keywords
[j]; j++) {

113 int 
klen
 = 
	`strlen
(
keywords
[
j
]);

114 int 
kw2
 = 
keywords
[
j
][
klen
-1] == '|';

115 if (
kw2
) 
klen
--;

117 if (!
	`strncmp
(&
row
->
render
[
i
], 
keywords
[
j
], 
klen
) &&

118 
	`is_separator
(
row
->
render
[
i
 + 
klen
])) {

119 
	`memset
(&
row
->
hl
[
i
], 
kw2
 ? 
HL_KEYWORD2
 : 
HL_KEYWORD1
, 
klen
);

120 
i
 += 
klen
;

124 if (
keywords
[
j
] != 
NULL
) {

125 
prev_sep
 = 0;

129 
prev_sep
 = 
	`is_separator
(
c
);

130 
i
++;

132 int 
changed
 = (
row
->
hl_open_comment
 != 
in_comment
);

133 
row
->
hl_open_comment
 = 
in_comment
;

134 if (
changed
 && 
row
->
idx
 + 1 < 
E
.
numrows
)

135 
	`editorUpdateSyntax
(&
E
.
row
[row->
idx
 + 1]);

136 
	}
}

138 int 
	$editorSyntaxToColor
 (int 
hl
) {

139 switch (
hl
) {

140 case 
HL_COMMENT
: case 
HL_MLCOMMENT
: return 36;

141 case 
HL_KEYWORD1
: return 33;

142 case 
HL_KEYWORD2
: return 32;

143 case 
HL_NUMBER
: return 31;

144 case 
HL_STRING
: return 35;

145 case 
HL_MATCH
: return 34;

148 
	}
}

150 void 
	$editorSelectSyntaxHighlight
 () {

151 
E
.
syntax
 = 
NULL
;

152 if (
E
.
filename
 == 
NULL
) return;

154 char *
ext
 = 
	`strrchr
(
E
.
filename
, '.');

155 for (unsigned int 
j
 = 0; j < 
HLDB_ENTRIES
; j++) {

156 struct 
editorSyntax
 *
s
 = &
HLDB
[
j
];

157 unsigned int 
i
 = 0;

158 while (
s
->
filematch
[
i
]) {

159 int 
is_ext
 = (
s
->
filematch
[
i
][0] == '.');

160 if ((
is_ext
 && 
ext
 && !
	`strcmp
(ext, 
s
->
filematch
[
i
])) ||

161 (!
is_ext
 && 
	`strstr
(
E
.
filename
, 
s
->
filematch
[
i
]))) {

162 
E
.
syntax
 = 
s
;

163 int 
filerow
;

164 for (
filerow
 = 0; filerow < 
E
.
numrows
; filerow++)

165 
	`editorUpdateSyntax
(&
E
.
row
[
filerow
]);

168 
i
++;

171 
	}
}

	@s_term.c

2 #include 
	~"shado.h
"

4 void 
	$kill
 (const char *
s
) {

5 
	`write
(
STDOUT_FILENO
, "\x1b[2J", 4);

6 
	`write
(
STDOUT_FILENO
, "\x1b[H", 3);

8 
	`perror
(
s
);

9 
	`exit
(1);

10 
	}
}

12 void 
	$disableRawMode
 () {

13 if (
	`tcsetattr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
E
.
orig_termios
) == -1)

14 
	`kill
("tcsetattr");

15 
	}
}

17 void 
	$enterRawMode
 () {

18 if (
	`tcgetattr
(
STDIN_FILENO
, &
E
.
orig_termios
) == -1) 
	`kill
("tcgetarr");

19 
	`atexit
(
disableRawMode
);

21 struct 
termios
 
raw
 = 
E
.
orig_termios
;

22 
raw
.
c_iflag
 &= ~(
IXON
 | 
ICRNL
 | 
BRKINT
 | 
INPCK
 | 
ISTRIP
);

23 
raw
.
c_oflag
 &= ~(
OPOST
);

24 
raw
.
c_cflag
 |= (
CS8
);

25 
raw
.
c_lflag
 &= ~(
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
);

26 
raw
.
c_cc
[
VMIN
] = 0;

27 
raw
.
c_cc
[
VTIME
] = 1;

29 if(
	`tcsetattr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
raw
) == -1) 
	`kill
("tcsetattr");

30 
	}
}

32 int 
	$editorReadKey
 () {

33 int 
nread
;

34 char 
c
;

36 while ((
nread
 = 
	`read
(
STDIN_FILENO
, &
c
, 1)) != 1)

37 if (
nread
 == -1 && 
errno
 != 
EAGAIN
) 
	`kill
("read");

38 if (
c
 == '\x1b') {

39 char 
seq
[3];

40 if (
	`read
(
STDIN_FILENO
, &
seq
[0], 1) != 1) return '\x1b';

41 if (
	`read
(
STDIN_FILENO
, &
seq
[1], 1) != 1) return '\x1b';

43 if (
seq
[0] == '[') {

44 if (
seq
[1] >= '0' && seq[1] <= '9') {

45 if (
	`read
(
STDIN_FILENO
, &
seq
[2], 1) != 1) return '\x1b';

46 if (
seq
[2] == '~')

47 switch (
seq
[1]) {

48 case '1': return 
HOME_KEY
;

49 case '3': return 
DEL_KEY
;

50 case '4': return 
END_KEY
;

51 case '5': return 
PAGE_UP
;

52 case '6': return 
PAGE_DOWN
;

53 case '7': return 
HOME_KEY
;

54 case '8': return 
END_KEY
;

57 switch (
seq
[1]) {

58 case 'A': return 
LEFT
;

59 case 'B': return 
UP
;

60 case 'C': return 
DOWN
;

61 case 'D': return 
RIGHT
;

62 case 'H': return 
HOME_KEY
;

63 case 'F': return 
END_KEY
;

65 } else if (
seq
[0] == '0')

66 switch (
seq
[1]) {

67 case 'H': return 
HOME_KEY
;

68 case 'F': return 
END_KEY
;

72 return 
c
;

73 
	}
}

75 int 
	$getCursorPosition
 (int *
rows
, int *
cols
) {

76 char 
buf
[32];

77 unsigned int 
i
 = 0;

79 if (
	`write
(
STDOUT_FILENO
, "\x1b[6n", 4) != 4) return -1;

81 while (
i
 < sizeof(
buf
) - 1) {

82 if (
	`read
(
STDIN_FILENO
, &
buf
[
i
], 1) != 1) break;

83 if (
buf
[
i
] == 'R') break;

84 
i
++;

86 
buf
[
i
] = '\0';

87 
	`printf
("\r\n&buf[1]: '%s'\r\n", &
buf
[1]);

89 if (
buf
[0] != '\x1b' || buf[1] != '[') return -1;

90 if (
	`sscanf
(&
buf
[2], "%d;%d", 
rows
, 
cols
) != 2) return -1;

93 
	}
}

95 int 
	$getWindowSize
 (int *
rows
, int *
cols
) {

96 struct 
winsize
 
ws
;

98 if (
	`ioctl
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
ws
) == -1 || ws.
ws_col
 == 0) {

99 if (
	`write
(
STDOUT_FILENO
, "\x1b[999C\x1b[999B", 12) != 12) return -1;

100 return 
	`getCursorPosition
(
rows
, 
cols
);

102 *
cols
 = 
ws
.
ws_col
;

103 *
rows
 = 
ws
.
ws_row
;

106 
	}
}

	@shado.c

2 #include 
	~"shado.h
"

4 struct 
globalState
 
	gE
;

6 void 
	$initEditor
 () {

7 
E
.
cx
 = 0;

8 
E
.
cy
 = 0;

9 
E
.
rx
 = 0;

10 
E
.
numrows
 = 0;

11 
E
.
rowoff
 = 0;

12 
E
.
coloff
 = 0;

13 
E
.
row
 = 
NULL
;

14 
E
.
filename
 = 
NULL
;

15 
E
.
stsmsg
[0] = '\0';

16 
E
.
stsmsg_time
 = 0;

17 
E
.
dirty
 = 0;

18 
E
.
syntax
 = 
NULL
;

20 
E
.
mode
 = 0;

22 if (
	`getWindowSize
(&
E
.
screenrows
, &E.
screencols
) == -1) 
	`kill
("getWindowSize");

23 
E
.
screenrows
 -= 2;

24 
	}
}

26 int 
	$main
 (int 
argc
, char *
argv
[]) {

27 
	`enterRawMode
();

28 
	`initEditor
();

29 if (
argc
 >= 2) 
	`editorOpen
(
argv
[1]);

31 
	`editorSetStatusMessage
("HELP: C-q: Quit | C-s: Save | C-f: Find");

34 
	`editorRefreshScreen
();

35 
	`editorProcessKeypress
();

38 
	}
}

	@shado.h

3 #define 
	#_DEFAULT_SOURCE


	)

4 #define 
	#_BSD_SOURCE


	)

5 #define 
	#_GNU_SOURCE


	)

7 #include 
	~<ctype.h
>

8 #include 
	~<errno.h
>

9 #include 
	~<fcntl.h
>

10 #include 
	~<stdarg.h
>

11 #include 
	~<stdio.h
>

12 #include 
	~<stdlib.h
>

13 #include 
	~<string.h
>

14 #include 
	~<sys/ioctl.h
>

15 #include 
	~<sys/types.h
>

16 #include 
	~<termios.h
>

17 #include 
	~<time.h
>

18 #include 
	~<unistd.h
>

21 extern struct 
globalState
 
E
;

24 #define 
	#SHADO_VERSION
 "0.0.1"

	)

26 #define 
	#TAB_STOP
 4

	)

27 #define 
	#SHOW_BAR
 1

	)

28 #define 
	#QUIT_TIMES
 1

	)

30 #define 
	#HL_HIGHLIGHT_NUMS
 (1<<0)

	)

31 #define 
	#HL_HIGHLIGHT_STRINGS
 (1<<1)

	)

33 #define 
	#CTRL_KEY
(
k
) ((k) & 0x1f)

	)

34 #define 
	#HLDB_ENTRIES
 (sizeof(
HLDB
)) / sizeof(HLDB[0])

	)

38 struct 
	sabuf
 {

39 char *
	mb
;

40 int 
	mlen
;

43 #define 
	#ABUF_INIT
 { 
NULL
, 0 }

	)

46 typedef struct 
	serow
 {

47 int 
	midx
;

48 int 
	msize
;

49 int 
	mrsize
;

50 int 
	mhl_open_comment
;

51 char *
	mchars
;

52 char *
	mrender
;

53 unsigned char *
	mhl
;

54 } 
	terow
;

57 struct 
	sglobalState
 {

58 int 
	mcx
, 
	mcy
;

59 int 
	mrx
;

60 int 
	mrowoff
;

61 int 
	mcoloff
;

62 int 
	mscreenrows
;

63 int 
	mscreencols
;

64 int 
	mnumrows
;

65 int 
	mdirty
;

66 char *
	mfilename
;

67 char 
	mstsmsg
[80];

68 
time_t
 
	mstsmsg_time
;

69 struct 
editorSyntax
 *
	msyntax
;

70 struct 
termios
 
	morig_termios
;

71 
erow
 *
	mrow
;

75 int 
	mmode
;

79 struct 
	seditorSyntax
 {

80 char *
	mfiletype
;

81 char **
	mfilematch
;

82 char **
	mkeywords
;

83 char *
	msingleline_comment_start
;

84 char *
	mmultiline_comment_start
;

85 char *
	mmultiline_comment_end
;

86 int 
	mflags
;

89 enum 
	eeditorHighlight
 {

90 
	mHL_NORMAL
 = 0,

91 
	mHL_COMMENT
,

92 
	mHL_MLCOMMENT
,

93 
	mHL_KEYWORD1
,

94 
	mHL_KEYWORD2
,

95 
	mHL_NUMBER
,

96 
	mHL_STRING
,

97 
	mHL_MATCH
,

101 enum 
	eeditorKey
 {

102 
	mBACKSPACE
 = 127,

103 
	mLEFT
 = 'h',

104 
	mDOWN
 = 'j',

105 
	mUP
 = 'k',

106 
	mRIGHT
 = 'l',

107 
	mARROW_LEFT
 = 1000,

108 
	mARROW_DOWN
,

109 
	mARROW_UP
,

110 
	mARROW_RIGHT
,

111 
	mDEL_KEY
,

112 
	mHOME_KEY
,

113 
	mEND_KEY
,

114 
	mPAGE_UP
,

115 
	mPAGE_DOWN
,

120 void 
editorSetStatusMessage
(const char *
fmt
, ...);

121 void 
editorRefreshScreen
();

122 char *
editorPrompt
(char *
prompt
, void (*
callback
)(char *, int));

125 void 
	`abAppend
(struct 
abuf
 *
ab
, const char *
s
, int 
len
);

126 void 
	`abFree
(struct 
abuf
 *
ab
);

129 void 
	`editorUpdateSyntax
 (
erow
 *
row
);

130 int 
	`editorSyntaxToColor
 (int 
hl
);

131 void 
	`editorSelectSyntaxHighlight
 ();

134 void 
	`kill
 (const char *
s
);

135 void 
	`disableRawMode
 ();

136 void 
	`enterRawMode
 ();

137 int 
	`editorReadKey
 ();

138 int 
	`getCursorPosition
 (int *
rows
, int *
cols
);

139 int 
	`getWindowSize
 (int *
rows
, int *
cols
);

142 int 
	`editorRowCxToRx
 (
erow
 *
row
, int 
cx
);

143 int 
	`editorRowRxToCx
 (
erow
 *
row
, int 
rx
);

144 void 
	`editorUpdateRow
 (
erow
 *
row
);

145 void 
	`editorInsertRow
 (int 
at
, char *
s
, 
size_t
 
len
);

146 void 
	`editorFreeRow
 (
erow
 *
row
);

147 void 
	`editorDelRow
 (int 
at
);

148 void 
	`editorRowInsertChar
 (
erow
 *
row
, int 
at
, int 
c
);

149 void 
	`editorRowDelChar
(
erow
 *
row
, int 
at
);

150 void 
	`editorRowAppendString
 (
erow
 *
row
, char *
s
, 
size_t
 
len
);

153 void 
	`editorInsertChar
 (int 
c
);

154 void 
	`editorDelChar
 ();

155 void 
	`editorInsertNewline
 ();

158 void 
	`editorDrawStatusBar
 (struct 
abuf
 *
ab
);

159 void 
	`editorDrawMessageBar
 (struct 
abuf
 *
ab
);

160 void 
	`editorSetStatusMessage
 (const char *
fmt
, ...);

163 char *
	`editorRowsToString
 (int *
buflen
);

164 void 
	`editorOpen
 (char *
filename
);

165 void 
	`editorSave
 ();

168 void 
	`editorFindCallback
 (char *
query
, int 
key
);

169 void 
	`editorFind
 ();

172 char *
	`editorPrompt
 (char *
prompt
, void (*
callback
)(char *, int));

173 void 
	`editorMoveCursor
 (int 
key
);

174 void 
	`editorProcessKeypress
 ();

177 void 
	`editorScroll
 ();

178 void 
	`editorDrawRows
 (struct 
abuf
 *
ab
);

179 void 
	`editorRefreshScreen
 ();

	@/usr/include/ctype.h

22 #ifndef 
_CTYPE_H


23 #define 
	#_CTYPE_H
 1

	)

25 #include 
	~<features.h
>

26 #include 
	~<bits/types.h
>

28 
	g__BEGIN_DECLS


30 #ifndef 
_ISbit


39 #include 
	~<bits/endian.h
>

40 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


41 #define 
	#_ISbit
(
bit
) (1 << (bit))

	)

43 #define 
	#_ISbit
(
bit
) ((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))

	)

48 
	m_ISupper
 = 
_ISbit
 (0),

49 
	m_ISlower
 = 
_ISbit
 (1),

50 
	m_ISalpha
 = 
_ISbit
 (2),

51 
	m_ISdigit
 = 
_ISbit
 (3),

52 
	m_ISxdigit
 = 
_ISbit
 (4),

53 
	m_ISspace
 = 
_ISbit
 (5),

54 
	m_ISprint
 = 
_ISbit
 (6),

55 
	m_ISgraph
 = 
_ISbit
 (7),

56 
	m_ISblank
 = 
_ISbit
 (8),

57 
	m_IScntrl
 = 
_ISbit
 (9),

58 
	m_ISpunct
 = 
_ISbit
 (10),

59 
	m_ISalnum
 = 
_ISbit
 (11)

79 extern const unsigned short int **
	$__ctype_b_loc
 (void)

80 
__THROW
 
	`__attribute__
 ((
__const__
));

81 extern const 
__int32_t
 **
	$__ctype_tolower_loc
 (void)

82 
__THROW
 
	`__attribute__
 ((
__const__
));

83 extern const 
__int32_t
 **
	$__ctype_toupper_loc
 (void)

84 
__THROW
 
	`__attribute__
 ((
__const__
));

87 #ifndef 
__cplusplus


88 #define 
	#__isctype
(
c
, 
type
) \

89 ((*
	`__ctype_b_loc
 ())[(int) (
c
)] & (unsigned short int) 
type
)

	)

90 #elif 
defined
 
__USE_EXTERN_INLINES


91 #define 
	#__isctype_f
(
type
) \

92 
__extern_inline
 int \

93 
is
##
	`type
 (int 
__c
) 
__THROW
 \

95 return (*
	`__ctype_b_loc
 ())[(int) (
__c
)] & (unsigned short int) 
_IS
##
type
; \

96 
	}

	)
}

99 #define 
	#__isascii
(
c
) (((c) & ~0x7f) == 0)

	)

100 #define 
	#__toascii
(
c
) ((c) & 0x7f)

	)

102 #define 
	#__exctype
(
name
) extern int 
	`name
 (int) 
__THROW


	)

108 
__exctype
 (
isalnum
);

109 
__exctype
 (
isalpha
);

110 
__exctype
 (
iscntrl
);

111 
__exctype
 (
isdigit
);

112 
__exctype
 (
islower
);

113 
__exctype
 (
isgraph
);

114 
__exctype
 (
isprint
);

115 
__exctype
 (
ispunct
);

116 
__exctype
 (
isspace
);

117 
__exctype
 (
isupper
);

118 
__exctype
 (
isxdigit
);

122 extern int 
	$tolower
 (int 
__c
) 
__THROW
;

125 extern int 
	$toupper
 (int 
__c
) 
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__exctype
 (
isblank
);

133 #ifdef 
__USE_GNU


135 extern int 
	$isctype
 (int 
__c
, int 
__mask
) 
__THROW
;

138 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


142 extern int 
	$isascii
 (int 
__c
) 
__THROW
;

146 extern int 
	$toascii
 (int 
__c
) 
__THROW
;

150 
	`__exctype
 (
_toupper
);

151 
	`__exctype
 (
_tolower
);

155 #define 
	#__tobody
(
c
, 
f
, 
a
, 
args
) \

156 (
__extension__
 \

157 ({ int 
__res
; \

158 if (sizeof (
c
) > 1) \

160 if (
	`__builtin_constant_p
 (
c
)) \

162 int 
__c
 = (
c
); \

163 
__res
 = 
__c
 < -128 || __c > 255 ? __c : (
a
)[__c]; \

166 
__res
 = 
f
 
args
; \

169 
__res
 = (
a
)[(int) (
c
)]; \

170 
__res
; 
	}
}))

	)

172 #if !
defined
 
__NO_CTYPE


173 #ifdef 
__isctype_f


174 
	$__isctype_f
 (
alnum
)

175 
	$__isctype_f
 (
alpha
)

176 
	$__isctype_f
 (
cntrl
)

177 
	$__isctype_f
 (
digit
)

178 
	$__isctype_f
 (
lower
)

179 
	$__isctype_f
 (
graph
)

180 
	$__isctype_f
 (
print
)

181 
	$__isctype_f
 (
punct
)

182 
	$__isctype_f
 (
space
)

183 
	$__isctype_f
 (
upper
)

184 
	$__isctype_f
 (
xdigit
)

185 #ifdef 
__USE_ISOC99


186 
	$__isctype_f
 (
blank
)

188 #elif 
defined
 
__isctype


189 #define 
	#isalnum
(
c
) 
	`__isctype
((c), 
_ISalnum
)

	)

190 #define 
	#isalpha
(
c
) 
	`__isctype
((c), 
_ISalpha
)

	)

191 #define 
	#iscntrl
(
c
) 
	`__isctype
((c), 
_IScntrl
)

	)

192 #define 
	#isdigit
(
c
) 
	`__isctype
((c), 
_ISdigit
)

	)

193 #define 
	#islower
(
c
) 
	`__isctype
((c), 
_ISlower
)

	)

194 #define 
	#isgraph
(
c
) 
	`__isctype
((c), 
_ISgraph
)

	)

195 #define 
	#isprint
(
c
) 
	`__isctype
((c), 
_ISprint
)

	)

196 #define 
	#ispunct
(
c
) 
	`__isctype
((c), 
_ISpunct
)

	)

197 #define 
	#isspace
(
c
) 
	`__isctype
((c), 
_ISspace
)

	)

198 #define 
	#isupper
(
c
) 
	`__isctype
((c), 
_ISupper
)

	)

199 #define 
	#isxdigit
(
c
) 
	`__isctype
((c), 
_ISxdigit
)

	)

200 #ifdef 
__USE_ISOC99


201 #define 
	#isblank
(
c
) 
	`__isctype
((c), 
_ISblank
)

	)

205 #ifdef 
__USE_EXTERN_INLINES


206 
__extern_inline
 int

207 
	`__NTH
 (
	$tolower
 (int 
__c
))

209 return 
__c
 >= -128 && __c < 256 ? (*
	`__ctype_tolower_loc
 ())[__c] : __c;

210 
	}
}

212 
__extern_inline
 int

213 
__NTH
 (
	$toupper
 (int 
__c
))

215 return 
__c
 >= -128 && __c < 256 ? (*
	`__ctype_toupper_loc
 ())[__c] : __c;

216 
	}
}

219 #if 
__GNUC__
 >= 2 && 
defined
 
__OPTIMIZE__
 && !defined 
__cplusplus


220 #define 
	#tolower
(
c
) 
	`__tobody
 (c, 
tolower
, *
	`__ctype_tolower_loc
 (), (c))

	)

221 #define 
	#toupper
(
c
) 
	`__tobody
 (c, 
toupper
, *
	`__ctype_toupper_loc
 (), (c))

	)

224 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


225 #define 
	#isascii
(
c
) 
	`__isascii
 (c)

	)

226 #define 
	#toascii
(
c
) 
	`__toascii
 (c)

	)

228 #define 
	#_tolower
(
c
) ((int) (*
	`__ctype_tolower_loc
 ())[(int) (c)])

	)

229 #define 
	#_toupper
(
c
) ((int) (*
	`__ctype_toupper_loc
 ())[(int) (c)])

	)

235 #ifdef 
__USE_XOPEN2K8


237 #include 
	~<bits/types/locale_t.h
>

241 #define 
	#__isctype_l
(
c
, 
type
, 
locale
) \

242 ((
locale
)->
__ctype_b
[(int) (
c
)] & (unsigned short int) 
type
)

	)

244 #define 
	#__exctype_l
(
name
) \

245 extern int 
	`name
 (int, 
locale_t
) 
__THROW


	)

251 
__exctype_l
 (
isalnum_l
);

252 
__exctype_l
 (
isalpha_l
);

253 
__exctype_l
 (
iscntrl_l
);

254 
__exctype_l
 (
isdigit_l
);

255 
__exctype_l
 (
islower_l
);

256 
__exctype_l
 (
isgraph_l
);

257 
__exctype_l
 (
isprint_l
);

258 
__exctype_l
 (
ispunct_l
);

259 
__exctype_l
 (
isspace_l
);

260 
__exctype_l
 (
isupper_l
);

261 
__exctype_l
 (
isxdigit_l
);

263 
__exctype_l
 (
isblank_l
);

267 extern int 
	$__tolower_l
 (int 
__c
, 
locale_t
 
__l
) 
__THROW
;

268 extern int 
	$tolower_l
 (int 
__c
, 
locale_t
 
__l
) 
__THROW
;

271 extern int 
	$__toupper_l
 (int 
__c
, 
locale_t
 
__l
) 
__THROW
;

272 extern int 
	$toupper_l
 (int 
__c
, 
locale_t
 
__l
) 
__THROW
;

274 #if 
__GNUC__
 >= 2 && 
defined
 
__OPTIMIZE__
 && !defined 
__cplusplus


275 #define 
	#__tolower_l
(
c
, 
locale
) \

276 
	`__tobody
 (
c
, 
__tolower_l
, (
locale
)->
__ctype_tolower
, (c, locale))

	)

277 #define 
	#__toupper_l
(
c
, 
locale
) \

278 
	`__tobody
 (
c
, 
__toupper_l
, (
locale
)->
__ctype_toupper
, (c, locale))

	)

279 #define 
	#tolower_l
(
c
, 
locale
) 
	`__tolower_l
 ((c), (locale))

	)

280 #define 
	#toupper_l
(
c
, 
locale
) 
	`__toupper_l
 ((c), (locale))

	)

284 #ifndef 
__NO_CTYPE


285 #define 
	#__isalnum_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISalnum
, (l))

	)

286 #define 
	#__isalpha_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISalpha
, (l))

	)

287 #define 
	#__iscntrl_l
(
c
,
l
) 
	`__isctype_l
((c), 
_IScntrl
, (l))

	)

288 #define 
	#__isdigit_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISdigit
, (l))

	)

289 #define 
	#__islower_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISlower
, (l))

	)

290 #define 
	#__isgraph_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISgraph
, (l))

	)

291 #define 
	#__isprint_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISprint
, (l))

	)

292 #define 
	#__ispunct_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISpunct
, (l))

	)

293 #define 
	#__isspace_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISspace
, (l))

	)

294 #define 
	#__isupper_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISupper
, (l))

	)

295 #define 
	#__isxdigit_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISxdigit
, (l))

	)

297 #define 
	#__isblank_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISblank
, (l))

	)

299 #ifdef 
__USE_MISC


300 #define 
	#__isascii_l
(
c
,
l
) ((l), 
	`__isascii
 (c))

	)

301 #define 
	#__toascii_l
(
c
,
l
) ((l), 
	`__toascii
 (c))

	)

304 #define 
	#isalnum_l
(
c
,
l
) 
	`__isalnum_l
 ((c), (l))

	)

305 #define 
	#isalpha_l
(
c
,
l
) 
	`__isalpha_l
 ((c), (l))

	)

306 #define 
	#iscntrl_l
(
c
,
l
) 
	`__iscntrl_l
 ((c), (l))

	)

307 #define 
	#isdigit_l
(
c
,
l
) 
	`__isdigit_l
 ((c), (l))

	)

308 #define 
	#islower_l
(
c
,
l
) 
	`__islower_l
 ((c), (l))

	)

309 #define 
	#isgraph_l
(
c
,
l
) 
	`__isgraph_l
 ((c), (l))

	)

310 #define 
	#isprint_l
(
c
,
l
) 
	`__isprint_l
 ((c), (l))

	)

311 #define 
	#ispunct_l
(
c
,
l
) 
	`__ispunct_l
 ((c), (l))

	)

312 #define 
	#isspace_l
(
c
,
l
) 
	`__isspace_l
 ((c), (l))

	)

313 #define 
	#isupper_l
(
c
,
l
) 
	`__isupper_l
 ((c), (l))

	)

314 #define 
	#isxdigit_l
(
c
,
l
) 
	`__isxdigit_l
 ((c), (l))

	)

316 #define 
	#isblank_l
(
c
,
l
) 
	`__isblank_l
 ((c), (l))

	)

318 #ifdef 
__USE_MISC


319 #define 
	#isascii_l
(
c
,
l
) 
	`__isascii_l
 ((c), (l))

	)

320 #define 
	#toascii_l
(
c
,
l
) 
	`__toascii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/errno.h

22 #ifndef 
_ERRNO_H


23 #define 
	#_ERRNO_H
 1

	)

25 #include 
	~<features.h
>

28 #include 
	~<bits/errno.h
>

32 #ifndef 
__ASSEMBLER__


34 
__BEGIN_DECLS


37 extern int *
	$__errno_location
 (void) 
__THROW
 
__attribute_const__
;

38 #define 
	#errno
 (*
	`__errno_location
 ())

	)

40 #ifdef 
__USE_GNU


45 extern char *
program_invocation_name
;

46 extern char *
program_invocation_short_name
;

48 #include 
	~<bits/types/error_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #ifndef 
_FCNTL_H


23 #define 
	#_FCNTL_H
 1

	)

25 #include 
	~<features.h
>

28 
	g__BEGIN_DECLS


31 #include 
	~<bits/types.h
>

35 #include 
	~<bits/fcntl.h
>

39 #ifdef 
__O_TMPFILE


40 #define 
	#__OPEN_NEEDS_MODE
(
oflag
) \

41 (((
oflag
) & 
O_CREAT
) != 0 || ((oflag) & 
__O_TMPFILE
) == __O_TMPFILE)

	)

43 #define 
	#__OPEN_NEEDS_MODE
(
oflag
) (((oflag) & 
O_CREAT
) != 0)

	)

49 #ifndef 
__mode_t_defined


50 typedef 
__mode_t
 
	tmode_t
;

51 #define 
	#__mode_t_defined


	)

54 #ifndef 
__off_t_defined


55 #ifndef 
__USE_FILE_OFFSET64


56 typedef 
__off_t
 
	toff_t
;

58 typedef 
__off64_t
 
	toff_t
;

60 #define 
	#__off_t_defined


	)

63 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


64 typedef 
__off64_t
 
	toff64_t
;

65 #define 
	#__off64_t_defined


	)

68 #ifndef 
__pid_t_defined


69 typedef 
__pid_t
 
	tpid_t
;

70 #define 
	#__pid_t_defined


	)

74 #ifdef 
__USE_XOPEN2K8


75 #include 
	~<bits/types/struct_timespec.h
>

77 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


78 #include 
	~<bits/stat.h
>

80 #define 
	#S_IFMT
 
__S_IFMT


	)

81 #define 
	#S_IFDIR
 
__S_IFDIR


	)

82 #define 
	#S_IFCHR
 
__S_IFCHR


	)

83 #define 
	#S_IFBLK
 
__S_IFBLK


	)

84 #define 
	#S_IFREG
 
__S_IFREG


	)

85 #ifdef 
__S_IFIFO


86 #define 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifdef 
__S_IFLNK


89 #define 
	#S_IFLNK
 
__S_IFLNK


	)

91 #if (
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8
) && defined 
__S_IFSOCK


92 #define 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 #define 
	#S_ISUID
 
__S_ISUID


	)

98 #define 
	#S_ISGID
 
__S_ISGID


	)

100 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


102 #define 
	#S_ISVTX
 
__S_ISVTX


	)

105 #define 
	#S_IRUSR
 
__S_IREAD


	)

106 #define 
	#S_IWUSR
 
__S_IWRITE


	)

107 #define 
	#S_IXUSR
 
__S_IEXEC


	)

109 #define 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 #define 
	#S_IRGRP
 (
S_IRUSR
 >> 3)

	)

112 #define 
	#S_IWGRP
 (
S_IWUSR
 >> 3)

	)

113 #define 
	#S_IXGRP
 (
S_IXUSR
 >> 3)

	)

115 #define 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 #define 
	#S_IROTH
 (
S_IRGRP
 >> 3)

	)

118 #define 
	#S_IWOTH
 (
S_IWGRP
 >> 3)

	)

119 #define 
	#S_IXOTH
 (
S_IXGRP
 >> 3)

	)

121 #define 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #ifndef 
R_OK


128 #define 
	#R_OK
 4

	)

129 #define 
	#W_OK
 2

	)

130 #define 
	#X_OK
 1

	)

131 #define 
	#F_OK
 0

	)

136 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


137 #define 
	#SEEK_SET
 0

	)

138 #define 
	#SEEK_CUR
 1

	)

139 #define 
	#SEEK_END
 2

	)

148 #ifdef 
__USE_ATFILE


149 #define 
	#AT_FDCWD
 -100

	)

152 #define 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

153 #define 
	#AT_REMOVEDIR
 0x200

	)

155 #define 
	#AT_SYMLINK_FOLLOW
 0x400

	)

156 #ifdef 
__USE_GNU


157 #define 
	#AT_NO_AUTOMOUNT
 0x800

	)

159 #define 
	#AT_EMPTY_PATH
 0x1000

	)

160 #define 
	#AT_STATX_SYNC_TYPE
 0x6000

	)

161 #define 
	#AT_STATX_SYNC_AS_STAT
 0x0000

	)

162 #define 
	#AT_STATX_FORCE_SYNC
 0x2000

	)

163 #define 
	#AT_STATX_DONT_SYNC
 0x4000

	)

164 #define 
	#AT_RECURSIVE
 0x8000

	)

166 #define 
	#AT_EACCESS
 0x200

	)

175 #ifndef 
__USE_FILE_OFFSET64


176 extern int 
fcntl
 (int 
__fd
, int 
__cmd
, ...);

178 #ifdef 
__REDIRECT


179 extern int 
__REDIRECT
 (
fcntl
, (int 
__fd
, int 
__cmd
, ...), 
fcntl64
);

181 #define 
	#fcntl
 
fcntl64


	)

184 #ifdef 
__USE_LARGEFILE64


185 extern int 
fcntl64
 (int 
__fd
, int 
__cmd
, ...);

195 #ifndef 
__USE_FILE_OFFSET64


196 extern int 
	$open
 (const char *
__file
, int 
__oflag
, ...) 
	`__nonnull
 ((1));

198 #ifdef 
__REDIRECT


199 extern int 
	`__REDIRECT
 (
open
, (const char *
__file
, int 
__oflag
, ...), 
open64
)

200 
	`__nonnull
 ((1));

202 #define 
	#open
 
open64


	)

205 #ifdef 
__USE_LARGEFILE64


206 extern int 
	$open64
 (const char *
__file
, int 
__oflag
, ...) 
	`__nonnull
 ((1));

209 #ifdef 
__USE_ATFILE


219 #ifndef 
__USE_FILE_OFFSET64


220 extern int 
	$openat
 (int 
__fd
, const char *
__file
, int 
__oflag
, ...)

221 
	`__nonnull
 ((2));

223 #ifdef 
__REDIRECT


224 extern int 
	`__REDIRECT
 (
openat
, (int 
__fd
, const char *
__file
, int 
__oflag
,

225 ...), 
openat64
) 
	`__nonnull
 ((2));

227 #define 
	#openat
 
openat64


	)

230 #ifdef 
__USE_LARGEFILE64


231 extern int 
	$openat64
 (int 
__fd
, const char *
__file
, int 
__oflag
, ...)

232 
	`__nonnull
 ((2));

241 #ifndef 
__USE_FILE_OFFSET64


242 extern int 
	$creat
 (const char *
__file
, 
mode_t
 
__mode
) 
	`__nonnull
 ((1));

244 #ifdef 
__REDIRECT


245 extern int 
	`__REDIRECT
 (
creat
, (const char *
__file
, 
mode_t
 
__mode
),

246 
creat64
) 
	`__nonnull
 ((1));

248 #define 
	#creat
 
creat64


	)

251 #ifdef 
__USE_LARGEFILE64


252 extern int 
	$creat64
 (const char *
__file
, 
mode_t
 
__mode
) 
	`__nonnull
 ((1));

255 #if !
defined
 
F_LOCK
 && (defined 
__USE_MISC
 || (defined 
__USE_XOPEN_EXTENDED
 \

256 && !
defined
 
__USE_POSIX
))

265 #define 
	#F_ULOCK
 0

	)

266 #define 
	#F_LOCK
 1

	)

267 #define 
	#F_TLOCK
 2

	)

268 #define 
	#F_TEST
 3

	)

270 #ifndef 
__USE_FILE_OFFSET64


271 extern int 
	`lockf
 (int 
__fd
, int 
__cmd
, 
off_t
 
__len
);

273 #ifdef 
__REDIRECT


274 extern int 
	`__REDIRECT
 (
lockf
, (int 
__fd
, int 
__cmd
, 
__off64_t
 
__len
), 
lockf64
);

276 #define 
	#lockf
 
lockf64


	)

279 #ifdef 
__USE_LARGEFILE64


280 extern int 
	`lockf64
 (int 
__fd
, int 
__cmd
, 
off64_t
 
__len
);

284 #ifdef 
__USE_XOPEN2K


287 #ifndef 
__USE_FILE_OFFSET64


288 extern int 
	$posix_fadvise
 (int 
__fd
, 
off_t
 
__offset
, off_t 
__len
,

289 int 
__advise
) 
__THROW
;

291 #ifdef 
__REDIRECT_NTH


292 extern int 
	`__REDIRECT_NTH
 (
posix_fadvise
, (int 
__fd
, 
__off64_t
 
__offset
,

293 
__off64_t
 
__len
, int 
__advise
),

294 
posix_fadvise64
);

296 #define 
	#posix_fadvise
 
posix_fadvise64


	)

299 #ifdef 
__USE_LARGEFILE64


300 extern int 
	$posix_fadvise64
 (int 
__fd
, 
off64_t
 
__offset
, off64_t 
__len
,

301 int 
__advise
) 
__THROW
;

309 #ifndef 
__USE_FILE_OFFSET64


310 extern int 
	`posix_fallocate
 (int 
__fd
, 
off_t
 
__offset
, off_t 
__len
);

312 #ifdef 
__REDIRECT


313 extern int 
	`__REDIRECT
 (
posix_fallocate
, (int 
__fd
, 
__off64_t
 
__offset
,

314 
__off64_t
 
__len
),

315 
posix_fallocate64
);

317 #define 
	#posix_fallocate
 
posix_fallocate64


	)

320 #ifdef 
__USE_LARGEFILE64


321 extern int 
	`posix_fallocate64
 (int 
__fd
, 
off64_t
 
__offset
, off64_t 
__len
);

327 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function
 \

328 && 
defined
 
__va_arg_pack_len


329 #include 
	~<bits/fcntl2.h
>

332 
__END_DECLS


	@/usr/include/stdio.h

23 #ifndef 
_STDIO_H


24 #define 
	#_STDIO_H
 1

	)

26 #define 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 #include 
	~<bits/libc-header-start.h
>

29 
	g__BEGIN_DECLS


31 #define 
	#__need_size_t


	)

32 #define 
	#__need_NULL


	)

33 #include 
	~<stddef.h
>

35 #define 
	#__need___va_list


	)

36 #include 
	~<stdarg.h
>

38 #include 
	~<bits/types.h
>

39 #include 
	~<bits/types/__fpos_t.h
>

40 #include 
	~<bits/types/__fpos64_t.h
>

41 #include 
	~<bits/types/__FILE.h
>

42 #include 
	~<bits/types/FILE.h
>

43 #include 
	~<bits/types/struct_FILE.h
>

45 #ifdef 
__USE_GNU


46 #include 
	~<bits/types/cookie_io_functions_t.h
>

49 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


50 #ifdef 
__GNUC__


51 #ifndef 
_VA_LIST_DEFINED


52 typedef 
__gnuc_va_list
 
	tva_list
;

53 #define 
	#_VA_LIST_DEFINED


	)

56 #include 
	~<stdarg.h
>

60 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


61 #ifndef 
__off_t_defined


62 #ifndef 
__USE_FILE_OFFSET64


63 typedef 
__off_t
 
	toff_t
;

65 typedef 
__off64_t
 
	toff_t
;

67 #define 
	#__off_t_defined


	)

69 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


70 typedef 
__off64_t
 
	toff64_t
;

71 #define 
	#__off64_t_defined


	)

75 #ifdef 
__USE_XOPEN2K8


76 #ifndef 
__ssize_t_defined


77 typedef 
__ssize_t
 
	tssize_t
;

78 #define 
	#__ssize_t_defined


	)

83 #ifndef 
__USE_FILE_OFFSET64


84 typedef 
__fpos_t
 
	tfpos_t
;

86 typedef 
__fpos64_t
 
	tfpos_t
;

88 #ifdef 
__USE_LARGEFILE64


89 typedef 
__fpos64_t
 
	tfpos64_t
;

93 #define 
	#_IOFBF
 0

	)

94 #define 
	#_IOLBF
 1

	)

95 #define 
	#_IONBF
 2

	)

99 #define 
	#BUFSIZ
 8192

	)

104 #define 
	#EOF
 (-1)

	)

109 #define 
	#SEEK_SET
 0

	)

110 #define 
	#SEEK_CUR
 1

	)

111 #define 
	#SEEK_END
 2

	)

112 #ifdef 
__USE_GNU


113 #define 
	#SEEK_DATA
 3

	)

114 #define 
	#SEEK_HOLE
 4

	)

118 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


120 #define 
	#P_tmpdir
 "/tmp"

	)

133 #include 
	~<bits/stdio_lim.h
>

137 extern 
FILE
 *
stdin
;

138 extern 
FILE
 *
stdout
;

139 extern 
FILE
 *
stderr
;

141 #define 
	#stdin
 
stdin


	)

142 #define 
	#stdout
 
stdout


	)

143 #define 
	#stderr
 
stderr


	)

146 extern int 
	$remove
 (const char *
__filename
) 
__THROW
;

148 extern int 
	$rename
 (const char *
__old
, const char *
__new
) 
__THROW
;

150 #ifdef 
__USE_ATFILE


152 extern int 
	$renameat
 (int 
__oldfd
, const char *
__old
, int 
__newfd
,

153 const char *
__new
) 
__THROW
;

156 #ifdef 
__USE_GNU


158 #define 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 #define 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 #define 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 extern int 
	$renameat2
 (int 
__oldfd
, const char *
__old
, int 
__newfd
,

165 const char *
__new
, unsigned int 
__flags
) 
__THROW
;

172 #ifndef 
__USE_FILE_OFFSET64


173 extern 
FILE
 *
	$tmpfile
 (void) 
__wur
;

175 #ifdef 
__REDIRECT


176 extern 
FILE
 *
	`__REDIRECT
 (
tmpfile
, (void), 
tmpfile64
) 
__wur
;

178 #define 
	#tmpfile
 
tmpfile64


	)

182 #ifdef 
__USE_LARGEFILE64


183 extern 
FILE
 *
	$tmpfile64
 (void) 
__wur
;

187 extern char *
	$tmpnam
 (char *
__s
) 
__THROW
 
__wur
;

189 #ifdef 
__USE_MISC


192 extern char *
	$tmpnam_r
 (char *
__s
) 
__THROW
 
__wur
;

196 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


204 extern char *
	$tempnam
 (const char *
__dir
, const char *
__pfx
)

205 
__THROW
 
__attribute_malloc__
 
__wur
;

213 extern int 
	`fclose
 (
FILE
 *
__stream
);

218 extern int 
	`fflush
 (
FILE
 *
__stream
);

220 #ifdef 
__USE_MISC


227 extern int 
	`fflush_unlocked
 (
FILE
 *
__stream
);

230 #ifdef 
__USE_GNU


237 extern int 
	`fcloseall
 (void);

241 #ifndef 
__USE_FILE_OFFSET64


246 extern 
FILE
 *
	$fopen
 (const char *
__restrict
 
__filename
,

247 const char *
__restrict
 
__modes
) 
__wur
;

252 extern 
FILE
 *
	$freopen
 (const char *
__restrict
 
__filename
,

253 const char *
__restrict
 
__modes
,

254 
FILE
 *
__restrict
 
__stream
) 
__wur
;

256 #ifdef 
__REDIRECT


257 extern 
FILE
 *
	`__REDIRECT
 (
fopen
, (const char *
__restrict
 
__filename
,

258 const char *
__restrict
 
__modes
), 
fopen64
)

259 
__wur
;

260 extern 
FILE
 *
	`__REDIRECT
 (
freopen
, (const char *
__restrict
 
__filename
,

261 const char *
__restrict
 
__modes
,

262 
FILE
 *
__restrict
 
__stream
), 
freopen64
)

263 
__wur
;

265 #define 
	#fopen
 
fopen64


	)

266 #define 
	#freopen
 
freopen64


	)

269 #ifdef 
__USE_LARGEFILE64


270 extern 
FILE
 *
	$fopen64
 (const char *
__restrict
 
__filename
,

271 const char *
__restrict
 
__modes
) 
__wur
;

272 extern 
FILE
 *
	$freopen64
 (const char *
__restrict
 
__filename
,

273 const char *
__restrict
 
__modes
,

274 
FILE
 *
__restrict
 
__stream
) 
__wur
;

277 #ifdef 
__USE_POSIX


279 extern 
FILE
 *
	$fdopen
 (int 
__fd
, const char *
__modes
) 
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 extern 
FILE
 *
	$fopencookie
 (void *
__restrict
 
__magic_cookie
,

286 const char *
__restrict
 
__modes
,

287 
cookie_io_functions_t
 
__io_funcs
) 
__THROW
 
__wur
;

290 #if 
defined
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 extern 
FILE
 *
	$fmemopen
 (void *
__s
, 
size_t
 
__len
, const char *
__modes
)

293 
__THROW
 
__wur
;

298 extern 
FILE
 *
	$open_memstream
 (char **
__bufloc
, 
size_t
 *
__sizeloc
) 
__THROW
 
__wur
;

304 extern void 
	$setbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
) 
__THROW
;

308 extern int 
	$setvbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

309 int 
__modes
, 
size_t
 
__n
) 
__THROW
;

311 #ifdef 
__USE_MISC


314 extern void 
	$setbuffer
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

315 
size_t
 
__size
) 
__THROW
;

318 extern void 
	$setlinebuf
 (
FILE
 *
__stream
) 
__THROW
;

326 extern int 
	`fprintf
 (
FILE
 *
__restrict
 
__stream
,

327 const char *
__restrict
 
__format
, ...);

332 extern int 
	`printf
 (const char *
__restrict
 
__format
, ...);

334 extern int 
	$sprintf
 (char *
__restrict
 
__s
,

335 const char *
__restrict
 
__format
, ...) 
__THROWNL
;

341 extern int 
	`vfprintf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

342 
__gnuc_va_list
 
__arg
);

347 extern int 
	`vprintf
 (const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
);

349 extern int 
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__format
,

350 
__gnuc_va_list
 
__arg
) 
__THROWNL
;

352 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_UNIX98


354 extern int 
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

355 const char *
__restrict
 
__format
, ...)

356 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

358 extern int 
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

359 const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
)

360 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

363 #if 
	`__GLIBC_USE
 (
LIB_EXT2
)

366 extern int 
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__f
,

367 
__gnuc_va_list
 
__arg
)

368 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 0))) 
__wur
;

369 extern int 
	$__asprintf
 (char **
__restrict
 
__ptr
,

370 const char *
__restrict
 
__fmt
, ...)

371 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

372 extern int 
	$asprintf
 (char **
__restrict
 
__ptr
,

373 const char *
__restrict
 
__fmt
, ...)

374 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

377 #ifdef 
__USE_XOPEN2K8


379 extern int 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
,

380 
__gnuc_va_list
 
__arg
)

381 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

382 extern int 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

383 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

391 extern int 
	$fscanf
 (
FILE
 *
__restrict
 
__stream
,

392 const char *
__restrict
 
__format
, ...) 
__wur
;

397 extern int 
	$scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

399 extern int 
	$sscanf
 (const char *
__restrict
 
__s
,

400 const char *
__restrict
 
__format
, ...) 
__THROW
;

406 #include 
	~<bits/floatn.h
>

407 #if !
	`__GLIBC_USE
 (
DEPRECATED_SCANF
) && !
defined
 
__LDBL_COMPAT
 \

408 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

409 #ifdef 
__REDIRECT


410 extern int 
	`__REDIRECT
 (
fscanf
, (
FILE
 *
__restrict
 
__stream
,

411 const char *
__restrict
 
__format
, ...),

412 
__isoc99_fscanf
) 
__wur
;

413 extern int 
	`__REDIRECT
 (
scanf
, (const char *
__restrict
 
__format
, ...),

414 
__isoc99_scanf
) 
__wur
;

415 extern int 
	`__REDIRECT_NTH
 (
sscanf
, (const char *
__restrict
 
__s
,

416 const char *
__restrict
 
__format
, ...),

417 
__isoc99_sscanf
);

419 extern int 
	$__isoc99_fscanf
 (
FILE
 *
__restrict
 
__stream
,

420 const char *
__restrict
 
__format
, ...) 
__wur
;

421 extern int 
	$__isoc99_scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

422 extern int 
	$__isoc99_sscanf
 (const char *
__restrict
 
__s
,

423 const char *
__restrict
 
__format
, ...) 
__THROW
;

424 #define 
	#fscanf
 
__isoc99_fscanf


	)

425 #define 
	#scanf
 
__isoc99_scanf


	)

426 #define 
	#sscanf
 
__isoc99_sscanf


	)

430 #ifdef 
__USE_ISOC99


435 extern int 
	$vfscanf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

436 
__gnuc_va_list
 
__arg
)

437 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

443 extern int 
	$vscanf
 (const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
)

444 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

447 extern int 
	$vsscanf
 (const char *
__restrict
 
__s
,

448 const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
)

449 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

452 #if !
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

453 #if 
defined
 
__REDIRECT
 && !defined 
__LDBL_COMPAT
 \

454 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

455 extern int 
	`__REDIRECT
 (
vfscanf
,

456 (
FILE
 *
__restrict
 
__s
,

457 const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__arg
),

458 
__isoc99_vfscanf
)

459 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

460 extern int 
	`__REDIRECT
 (
vscanf
, (const char *
__restrict
 
__format
,

461 
__gnuc_va_list
 
__arg
), 
__isoc99_vscanf
)

462 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

463 extern int 
	`__REDIRECT_NTH
 (
vsscanf
,

464 (const char *
__restrict
 
__s
,

465 const char *
__restrict
 
__format
,

466 
__gnuc_va_list
 
__arg
), 
__isoc99_vsscanf
)

467 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

468 #elif !
defined
 
__REDIRECT


469 extern int 
	$__isoc99_vfscanf
 (
FILE
 *
__restrict
 
__s
,

470 const char *
__restrict
 
__format
,

471 
__gnuc_va_list
 
__arg
) 
__wur
;

472 extern int 
	$__isoc99_vscanf
 (const char *
__restrict
 
__format
,

473 
__gnuc_va_list
 
__arg
) 
__wur
;

474 extern int 
	$__isoc99_vsscanf
 (const char *
__restrict
 
__s
,

475 const char *
__restrict
 
__format
,

476 
__gnuc_va_list
 
__arg
) 
__THROW
;

477 #define 
	#vfscanf
 
__isoc99_vfscanf


	)

478 #define 
	#vscanf
 
__isoc99_vscanf


	)

479 #define 
	#vsscanf
 
__isoc99_vsscanf


	)

489 extern int 
	`fgetc
 (
FILE
 *
__stream
);

490 extern int 
	`getc
 (
FILE
 *
__stream
);

496 extern int 
	`getchar
 (void);

498 #ifdef 
__USE_POSIX199506


503 extern int 
	`getc_unlocked
 (
FILE
 *
__stream
);

504 extern int 
	`getchar_unlocked
 (void);

507 #ifdef 
__USE_MISC


514 extern int 
	`fgetc_unlocked
 (
FILE
 *
__stream
);

525 extern int 
	`fputc
 (int 
__c
, 
FILE
 *
__stream
);

526 extern int 
	`putc
 (int 
__c
, 
FILE
 *
__stream
);

532 extern int 
	`putchar
 (int 
__c
);

534 #ifdef 
__USE_MISC


541 extern int 
	`fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

544 #ifdef 
__USE_POSIX199506


549 extern int 
	`putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

550 extern int 
	`putchar_unlocked
 (int 
__c
);

554 #if 
defined
 
__USE_MISC
 \

555 || (
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

557 extern int 
	`getw
 (
FILE
 *
__stream
);

560 extern int 
	`putw
 (int 
__w
, 
FILE
 *
__stream
);

568 extern char *
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

569 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

571 #if 
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

581 extern char *
	$gets
 (char *
__s
) 
__wur
 
__attribute_deprecated__
;

584 #ifdef 
__USE_GNU


591 extern char *
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
,

592 
FILE
 *
__restrict
 
__stream
) 
__wur


593 
	`__attr_access
 ((
__write_only__
, 1, 2));

597 #if 
defined
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

608 extern 
__ssize_t
 
	$__getdelim
 (char **
__restrict
 
__lineptr
,

609 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

610 
FILE
 *
__restrict
 
__stream
) 
__wur
;

611 extern 
__ssize_t
 
	$getdelim
 (char **
__restrict
 
__lineptr
,

612 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

613 
FILE
 *
__restrict
 
__stream
) 
__wur
;

621 extern 
__ssize_t
 
	$getline
 (char **
__restrict
 
__lineptr
,

622 
size_t
 *
__restrict
 
__n
,

623 
FILE
 *
__restrict
 
__stream
) 
__wur
;

631 extern int 
	`fputs
 (const char *
__restrict
 
__s
, 
FILE
 *__restrict 
__stream
);

637 extern int 
	`puts
 (const char *
__s
);

644 extern int 
	`ungetc
 (int 
__c
, 
FILE
 *
__stream
);

651 extern 
size_t
 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

652 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

657 extern 
size_t
 
	`fwrite
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

658 
size_t
 
__n
, 
FILE
 *
__restrict
 
__s
);

660 #ifdef 
__USE_GNU


667 extern int 
	`fputs_unlocked
 (const char *
__restrict
 
__s
,

668 
FILE
 *
__restrict
 
__stream
);

671 #ifdef 
__USE_MISC


678 extern 
size_t
 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

679 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

680 extern 
size_t
 
	`fwrite_unlocked
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

681 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
);

689 extern int 
	`fseek
 (
FILE
 *
__stream
, long int 
__off
, int 
__whence
);

694 extern long int 
	$ftell
 (
FILE
 *
__stream
) 
__wur
;

699 extern void 
	`rewind
 (
FILE
 *
__stream
);

706 #if 
defined
 
__USE_LARGEFILE
 || defined 
__USE_XOPEN2K


707 #ifndef 
__USE_FILE_OFFSET64


712 extern int 
	`fseeko
 (
FILE
 *
__stream
, 
__off_t
 
__off
, int 
__whence
);

717 extern 
__off_t
 
	$ftello
 (
FILE
 *
__stream
) 
__wur
;

719 #ifdef 
__REDIRECT


720 extern int 
	`__REDIRECT
 (
fseeko
,

721 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
),

722 
fseeko64
);

723 extern 
__off64_t
 
	`__REDIRECT
 (
ftello
, (
FILE
 *
__stream
), 
ftello64
);

725 #define 
	#fseeko
 
fseeko64


	)

726 #define 
	#ftello
 
ftello64


	)

731 #ifndef 
__USE_FILE_OFFSET64


736 extern int 
	`fgetpos
 (
FILE
 *
__restrict
 
__stream
, 
fpos_t
 *__restrict 
__pos
);

741 extern int 
	`fsetpos
 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
);

743 #ifdef 
__REDIRECT


744 extern int 
	`__REDIRECT
 (
fgetpos
, (
FILE
 *
__restrict
 
__stream
,

745 
fpos_t
 *
__restrict
 
__pos
), 
fgetpos64
);

746 extern int 
	`__REDIRECT
 (
fsetpos
,

747 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
), 
fsetpos64
);

749 #define 
	#fgetpos
 
fgetpos64


	)

750 #define 
	#fsetpos
 
fsetpos64


	)

754 #ifdef 
__USE_LARGEFILE64


755 extern int 
	`fseeko64
 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
);

756 extern 
__off64_t
 
	$ftello64
 (
FILE
 *
__stream
) 
__wur
;

757 extern int 
	`fgetpos64
 (
FILE
 *
__restrict
 
__stream
, 
fpos64_t
 *__restrict 
__pos
);

758 extern int 
	`fsetpos64
 (
FILE
 *
__stream
, const 
fpos64_t
 *
__pos
);

762 extern void 
	$clearerr
 (
FILE
 *
__stream
) 
__THROW
;

764 extern int 
	$feof
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

766 extern int 
	$ferror
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

768 #ifdef 
__USE_MISC


770 extern void 
	$clearerr_unlocked
 (
FILE
 *
__stream
) 
__THROW
;

771 extern int 
	$feof_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

772 extern int 
	$ferror_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

780 extern void 
	`perror
 (const char *
__s
);

783 #ifdef 
__USE_POSIX


785 extern int 
	$fileno
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

788 #ifdef 
__USE_MISC


790 extern int 
	$fileno_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

794 #ifdef 
__USE_POSIX2


799 extern 
FILE
 *
	$popen
 (const char *
__command
, const char *
__modes
) 
__wur
;

805 extern int 
	`pclose
 (
FILE
 *
__stream
);

809 #ifdef 
__USE_POSIX


811 extern char *
	$ctermid
 (char *
__s
) 
__THROW
;

815 #if (
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
) || defined 
__USE_GNU


817 extern char *
	`cuserid
 (char *
__s
);

821 #ifdef 
__USE_GNU


822 struct 
obstack
;

825 extern int 
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

826 const char *
__restrict
 
__format
, ...)

827 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

828 extern int 
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

829 const char *
__restrict
 
__format
,

830 
__gnuc_va_list
 
__args
)

831 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

835 #ifdef 
__USE_POSIX199506


839 extern void 
	$flockfile
 (
FILE
 *
__stream
) 
__THROW
;

843 extern int 
	$ftrylockfile
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

846 extern void 
	$funlockfile
 (
FILE
 *
__stream
) 
__THROW
;

849 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
 && !defined 
__USE_GNU


852 #include 
	~<bits/getopt_posix.h
>

857 extern int 
	`__uflow
 (
FILE
 *);

858 extern int 
	`__overflow
 (
FILE
 *, int);

862 #ifdef 
__USE_EXTERN_INLINES


863 #include 
	~<bits/stdio.h
>

865 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


866 #include 
	~<bits/stdio2.h
>

869 #include 
	~<bits/floatn.h
>

870 #if 
defined
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

871 #include 
	~<bits/stdio-ldbl.h
>

874 
__END_DECLS


	@/usr/include/stdlib.h

22 #ifndef 
_STDLIB_H


24 #define 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 #include 
	~<bits/libc-header-start.h
>

28 #define 
	#__need_size_t


	)

29 #define 
	#__need_wchar_t


	)

30 #define 
	#__need_NULL


	)

31 #include 
	~<stddef.h
>

33 
	g__BEGIN_DECLS


35 #define 
	#_STDLIB_H
 1

	)

37 #if (
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8
) && !defined 
_SYS_WAIT_H


39 #include 
	~<bits/waitflags.h
>

40 #include 
	~<bits/waitstatus.h
>

43 #define 
	#WEXITSTATUS
(
status
) 
	`__WEXITSTATUS
 (status)

	)

44 #define 
	#WTERMSIG
(
status
) 
	`__WTERMSIG
 (status)

	)

45 #define 
	#WSTOPSIG
(
status
) 
	`__WSTOPSIG
 (status)

	)

46 #define 
	#WIFEXITED
(
status
) 
	`__WIFEXITED
 (status)

	)

47 #define 
	#WIFSIGNALED
(
status
) 
	`__WIFSIGNALED
 (status)

	)

48 #define 
	#WIFSTOPPED
(
status
) 
	`__WIFSTOPPED
 (status)

	)

49 #ifdef 
__WIFCONTINUED


50 #define 
	#WIFCONTINUED
(
status
) 
	`__WIFCONTINUED
 (status)

	)

55 #include 
	~<bits/floatn.h
>

60 int 
	mquot
;

61 int 
	mrem
;

62 } 
	tdiv_t
;

65 #ifndef 
__ldiv_t_defined


68 long int 
	mquot
;

69 long int 
	mrem
;

70 } 
	tldiv_t
;

71 #define 
	#__ldiv_t_defined
 1

	)

74 #if 
defined
 
__USE_ISOC99
 && !defined 
__lldiv_t_defined


76 
__extension__
 typedef struct

78 long long int 
	mquot
;

79 long long int 
	mrem
;

80 } 
	tlldiv_t
;

81 #define 
	#__lldiv_t_defined
 1

	)

86 #define 
	#RAND_MAX
 2147483647

	)

91 #define 
	#EXIT_FAILURE
 1

	)

92 #define 
	#EXIT_SUCCESS
 0

	)

96 #define 
	#MB_CUR_MAX
 (
	`__ctype_get_mb_cur_max
 ())

	)

97 extern 
size_t
 
	$__ctype_get_mb_cur_max
 (void) 
__THROW
 
__wur
;

101 extern double 
	$atof
 (const char *
__nptr
)

102 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

104 extern int 
	$atoi
 (const char *
__nptr
)

105 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

107 extern long int 
	$atol
 (const char *
__nptr
)

108 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

110 #ifdef 
__USE_ISOC99


112 
__extension__
 extern long long int 
	$atoll
 (const char *
__nptr
)

113 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

117 extern double 
	$strtod
 (const char *
__restrict
 
__nptr
,

118 char **
__restrict
 
__endptr
)

119 
__THROW
 
	`__nonnull
 ((1));

121 #ifdef 
__USE_ISOC99


123 extern float 
	$strtof
 (const char *
__restrict
 
__nptr
,

124 char **
__restrict
 
__endptr
) 
__THROW
 
	`__nonnull
 ((1));

126 extern long double 
	$strtold
 (const char *
__restrict
 
__nptr
,

127 char **
__restrict
 
__endptr
)

128 
__THROW
 
	`__nonnull
 ((1));

133 #if 
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 extern 
_Float16
 
	$strtof16
 (const char *
__restrict
 
__nptr
,

135 char **
__restrict
 
__endptr
)

136 
__THROW
 
	`__nonnull
 ((1));

139 #if 
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 extern 
_Float32
 
	$strtof32
 (const char *
__restrict
 
__nptr
,

141 char **
__restrict
 
__endptr
)

142 
__THROW
 
	`__nonnull
 ((1));

145 #if 
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 extern 
_Float64
 
	$strtof64
 (const char *
__restrict
 
__nptr
,

147 char **
__restrict
 
__endptr
)

148 
__THROW
 
	`__nonnull
 ((1));

151 #if 
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 extern 
_Float128
 
	$strtof128
 (const char *
__restrict
 
__nptr
,

153 char **
__restrict
 
__endptr
)

154 
__THROW
 
	`__nonnull
 ((1));

157 #if 
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 extern 
_Float32x
 
	$strtof32x
 (const char *
__restrict
 
__nptr
,

159 char **
__restrict
 
__endptr
)

160 
__THROW
 
	`__nonnull
 ((1));

163 #if 
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 extern 
_Float64x
 
	$strtof64x
 (const char *
__restrict
 
__nptr
,

165 char **
__restrict
 
__endptr
)

166 
__THROW
 
	`__nonnull
 ((1));

169 #if 
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 extern 
_Float128x
 
	$strtof128x
 (const char *
__restrict
 
__nptr
,

171 char **
__restrict
 
__endptr
)

172 
__THROW
 
	`__nonnull
 ((1));

176 extern long int 
	$strtol
 (const char *
__restrict
 
__nptr
,

177 char **
__restrict
 
__endptr
, int 
__base
)

178 
__THROW
 
	`__nonnull
 ((1));

180 extern unsigned long int 
	$strtoul
 (const char *
__restrict
 
__nptr
,

181 char **
__restrict
 
__endptr
, int 
__base
)

182 
__THROW
 
	`__nonnull
 ((1));

184 #ifdef 
__USE_MISC


186 
__extension__


187 extern long long int 
	$strtoq
 (const char *
__restrict
 
__nptr
,

188 char **
__restrict
 
__endptr
, int 
__base
)

189 
__THROW
 
	`__nonnull
 ((1));

191 
__extension__


192 extern unsigned long long int 
	$strtouq
 (const char *
__restrict
 
__nptr
,

193 char **
__restrict
 
__endptr
, int 
__base
)

194 
__THROW
 
	`__nonnull
 ((1));

197 #ifdef 
__USE_ISOC99


199 
__extension__


200 extern long long int 
	$strtoll
 (const char *
__restrict
 
__nptr
,

201 char **
__restrict
 
__endptr
, int 
__base
)

202 
__THROW
 
	`__nonnull
 ((1));

204 
__extension__


205 extern unsigned long long int 
	$strtoull
 (const char *
__restrict
 
__nptr
,

206 char **
__restrict
 
__endptr
, int 
__base
)

207 
__THROW
 
	`__nonnull
 ((1));

211 #if 
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 extern int 
	$strfromd
 (char *
__dest
, 
size_t
 
__size
, const char *
__format
,

213 double 
__f
)

214 
__THROW
 
	`__nonnull
 ((3));

216 extern int 
	$strfromf
 (char *
__dest
, 
size_t
 
__size
, const char *
__format
,

217 float 
__f
)

218 
__THROW
 
	`__nonnull
 ((3));

220 extern int 
	$strfroml
 (char *
__dest
, 
size_t
 
__size
, const char *
__format
,

221 long double 
__f
)

222 
__THROW
 
	`__nonnull
 ((3));

225 #if 
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 extern int 
	$strfromf16
 (char *
__dest
, 
size_t
 
__size
, const char * 
__format
,

227 
_Float16
 
__f
)

228 
__THROW
 
	`__nonnull
 ((3));

231 #if 
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 extern int 
	$strfromf32
 (char *
__dest
, 
size_t
 
__size
, const char * 
__format
,

233 
_Float32
 
__f
)

234 
__THROW
 
	`__nonnull
 ((3));

237 #if 
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 extern int 
	$strfromf64
 (char *
__dest
, 
size_t
 
__size
, const char * 
__format
,

239 
_Float64
 
__f
)

240 
__THROW
 
	`__nonnull
 ((3));

243 #if 
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 extern int 
	$strfromf128
 (char *
__dest
, 
size_t
 
__size
, const char * 
__format
,

245 
_Float128
 
__f
)

246 
__THROW
 
	`__nonnull
 ((3));

249 #if 
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 extern int 
	$strfromf32x
 (char *
__dest
, 
size_t
 
__size
, const char * 
__format
,

251 
_Float32x
 
__f
)

252 
__THROW
 
	`__nonnull
 ((3));

255 #if 
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 extern int 
	$strfromf64x
 (char *
__dest
, 
size_t
 
__size
, const char * 
__format
,

257 
_Float64x
 
__f
)

258 
__THROW
 
	`__nonnull
 ((3));

261 #if 
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 extern int 
	$strfromf128x
 (char *
__dest
, 
size_t
 
__size
, const char * 
__format
,

263 
_Float128x
 
__f
)

264 
__THROW
 
	`__nonnull
 ((3));

268 #ifdef 
__USE_GNU


272 #include 
	~<bits/types/locale_t.h
>

274 extern long int 
	$strtol_l
 (const char *
__restrict
 
__nptr
,

275 char **
__restrict
 
__endptr
, int 
__base
,

276 
locale_t
 
__loc
) 
__THROW
 
	`__nonnull
 ((1, 4));

278 extern unsigned long int 
	$strtoul_l
 (const char *
__restrict
 
__nptr
,

279 char **
__restrict
 
__endptr
,

280 int 
__base
, 
locale_t
 
__loc
)

281 
__THROW
 
	`__nonnull
 ((1, 4));

283 
__extension__


284 extern long long int 
	$strtoll_l
 (const char *
__restrict
 
__nptr
,

285 char **
__restrict
 
__endptr
, int 
__base
,

286 
locale_t
 
__loc
)

287 
__THROW
 
	`__nonnull
 ((1, 4));

289 
__extension__


290 extern unsigned long long int 
	$strtoull_l
 (const char *
__restrict
 
__nptr
,

291 char **
__restrict
 
__endptr
,

292 int 
__base
, 
locale_t
 
__loc
)

293 
__THROW
 
	`__nonnull
 ((1, 4));

295 extern double 
	$strtod_l
 (const char *
__restrict
 
__nptr
,

296 char **
__restrict
 
__endptr
, 
locale_t
 
__loc
)

297 
__THROW
 
	`__nonnull
 ((1, 3));

299 extern float 
	$strtof_l
 (const char *
__restrict
 
__nptr
,

300 char **
__restrict
 
__endptr
, 
locale_t
 
__loc
)

301 
__THROW
 
	`__nonnull
 ((1, 3));

303 extern long double 
	$strtold_l
 (const char *
__restrict
 
__nptr
,

304 char **
__restrict
 
__endptr
,

305 
locale_t
 
__loc
)

306 
__THROW
 
	`__nonnull
 ((1, 3));

308 #if 
__HAVE_FLOAT16


309 extern 
_Float16
 
	$strtof16_l
 (const char *
__restrict
 
__nptr
,

310 char **
__restrict
 
__endptr
,

311 
locale_t
 
__loc
)

312 
__THROW
 
	`__nonnull
 ((1, 3));

315 #if 
__HAVE_FLOAT32


316 extern 
_Float32
 
	$strtof32_l
 (const char *
__restrict
 
__nptr
,

317 char **
__restrict
 
__endptr
,

318 
locale_t
 
__loc
)

319 
__THROW
 
	`__nonnull
 ((1, 3));

322 #if 
__HAVE_FLOAT64


323 extern 
_Float64
 
	$strtof64_l
 (const char *
__restrict
 
__nptr
,

324 char **
__restrict
 
__endptr
,

325 
locale_t
 
__loc
)

326 
__THROW
 
	`__nonnull
 ((1, 3));

329 #if 
__HAVE_FLOAT128


330 extern 
_Float128
 
	$strtof128_l
 (const char *
__restrict
 
__nptr
,

331 char **
__restrict
 
__endptr
,

332 
locale_t
 
__loc
)

333 
__THROW
 
	`__nonnull
 ((1, 3));

336 #if 
__HAVE_FLOAT32X


337 extern 
_Float32x
 
	$strtof32x_l
 (const char *
__restrict
 
__nptr
,

338 char **
__restrict
 
__endptr
,

339 
locale_t
 
__loc
)

340 
__THROW
 
	`__nonnull
 ((1, 3));

343 #if 
__HAVE_FLOAT64X


344 extern 
_Float64x
 
	$strtof64x_l
 (const char *
__restrict
 
__nptr
,

345 char **
__restrict
 
__endptr
,

346 
locale_t
 
__loc
)

347 
__THROW
 
	`__nonnull
 ((1, 3));

350 #if 
__HAVE_FLOAT128X


351 extern 
_Float128x
 
	$strtof128x_l
 (const char *
__restrict
 
__nptr
,

352 char **
__restrict
 
__endptr
,

353 
locale_t
 
__loc
)

354 
__THROW
 
	`__nonnull
 ((1, 3));

359 #ifdef 
__USE_EXTERN_INLINES


360 
__extern_inline
 int

361 
	`__NTH
 (
	$atoi
 (const char *
__nptr
))

363 return (int) 
	`strtol
 (
__nptr
, (char **) 
NULL
, 10);

364 
	}
}

365 
__extern_inline
 long int

366 
__NTH
 (
	$atol
 (const char *
__nptr
))

368 return 
	`strtol
 (
__nptr
, (char **) 
NULL
, 10);

369 
	}
}

371 #ifdef 
__USE_ISOC99


372 
__extension__
 
__extern_inline
 long long int

373 
__NTH
 (
	$atoll
 (const char *
__nptr
))

375 return 
	`strtoll
 (
__nptr
, (char **) 
NULL
, 10);

376 
	}
}

381 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED


385 extern char *
	$l64a
 (long int 
__n
) 
__THROW
 
__wur
;

388 extern long int 
	$a64l
 (const char *
__s
)

389 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1)) 
__wur
;

393 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED


394 #include 
	~<sys/types.h
>

401 extern long int 
	$random
 (void) 
__THROW
;

404 extern void 
	$srandom
 (unsigned int 
__seed
) 
__THROW
;

410 extern char *
	$initstate
 (unsigned int 
__seed
, char *
__statebuf
,

411 
size_t
 
__statelen
) 
__THROW
 
	`__nonnull
 ((2));

415 extern char *
	$setstate
 (char *
__statebuf
) 
__THROW
 
	`__nonnull
 ((1));

418 #ifdef 
__USE_MISC


423 struct 
	srandom_data


425 
int32_t
 *
fptr
;

426 
int32_t
 *
rptr
;

427 
int32_t
 *
state
;

428 int 
rand_type
;

429 int 
rand_deg
;

430 int 
rand_sep
;

431 
int32_t
 *
end_ptr
;

434 extern int 
	$random_r
 (struct 
random_data
 *
__restrict
 
__buf
,

435 
int32_t
 *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

437 extern int 
	$srandom_r
 (unsigned int 
__seed
, struct 
random_data
 *
__buf
)

438 
__THROW
 
	`__nonnull
 ((2));

440 extern int 
	$initstate_r
 (unsigned int 
__seed
, char *
__restrict
 
__statebuf
,

441 
size_t
 
__statelen
,

442 struct 
random_data
 *
__restrict
 
__buf
)

443 
__THROW
 
	`__nonnull
 ((2, 4));

445 extern int 
	$setstate_r
 (char *
__restrict
 
__statebuf
,

446 struct 
random_data
 *
__restrict
 
__buf
)

447 
__THROW
 
	`__nonnull
 ((1, 2));

453 extern int 
	$rand
 (void) 
__THROW
;

455 extern void 
	$srand
 (unsigned int 
__seed
) 
__THROW
;

457 #ifdef 
__USE_POSIX199506


459 extern int 
	$rand_r
 (unsigned int *
__seed
) 
__THROW
;

463 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


467 extern double 
	$drand48
 (void) 
__THROW
;

468 extern double 
	$erand48
 (unsigned short int 
__xsubi
[3]) 
__THROW
 
	`__nonnull
 ((1));

471 extern long int 
	$lrand48
 (void) 
__THROW
;

472 extern long int 
	$nrand48
 (unsigned short int 
__xsubi
[3])

473 
__THROW
 
	`__nonnull
 ((1));

476 extern long int 
	$mrand48
 (void) 
__THROW
;

477 extern long int 
	$jrand48
 (unsigned short int 
__xsubi
[3])

478 
__THROW
 
	`__nonnull
 ((1));

481 extern void 
	$srand48
 (long int 
__seedval
) 
__THROW
;

482 extern unsigned short int *
	$seed48
 (unsigned short int 
__seed16v
[3])

483 
__THROW
 
	`__nonnull
 ((1));

484 extern void 
	$lcong48
 (unsigned short int 
__param
[7]) 
__THROW
 
	`__nonnull
 ((1));

486 #ifdef 
__USE_MISC


490 struct 
	sdrand48_data


492 unsigned short int 
__x
[3];

493 unsigned short int 
__old_x
[3];

494 unsigned short int 
__c
;

495 unsigned short int 
__init
;

496 
__extension__
 unsigned long long int 
__a
;

501 extern int 
	$drand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

502 double *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

503 extern int 
	$erand48_r
 (unsigned short int 
__xsubi
[3],

504 struct 
drand48_data
 *
__restrict
 
__buffer
,

505 double *
__restrict
 
__result
) 
__THROW
 
	`__nonnull
 ((1, 2));

508 extern int 
	$lrand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

509 long int *
__restrict
 
__result
)

510 
__THROW
 
	`__nonnull
 ((1, 2));

511 extern int 
	$nrand48_r
 (unsigned short int 
__xsubi
[3],

512 struct 
drand48_data
 *
__restrict
 
__buffer
,

513 long int *
__restrict
 
__result
)

514 
__THROW
 
	`__nonnull
 ((1, 2));

517 extern int 
	$mrand48_r
 (struct 
drand48_data
 *
__restrict
 
__buffer
,

518 long int *
__restrict
 
__result
)

519 
__THROW
 
	`__nonnull
 ((1, 2));

520 extern int 
	$jrand48_r
 (unsigned short int 
__xsubi
[3],

521 struct 
drand48_data
 *
__restrict
 
__buffer
,

522 long int *
__restrict
 
__result
)

523 
__THROW
 
	`__nonnull
 ((1, 2));

526 extern int 
	$srand48_r
 (long int 
__seedval
, struct 
drand48_data
 *
__buffer
)

527 
__THROW
 
	`__nonnull
 ((2));

529 extern int 
	$seed48_r
 (unsigned short int 
__seed16v
[3],

530 struct 
drand48_data
 *
__buffer
) 
__THROW
 
	`__nonnull
 ((1, 2));

532 extern int 
	$lcong48_r
 (unsigned short int 
__param
[7],

533 struct 
drand48_data
 *
__buffer
)

534 
__THROW
 
	`__nonnull
 ((1, 2));

539 extern void *
	$malloc
 (
size_t
 
__size
) 
__THROW
 
__attribute_malloc__


540 
	`__attribute_alloc_size__
 ((1)) 
__wur
;

542 extern void *
	$calloc
 (
size_t
 
__nmemb
, size_t 
__size
)

543 
__THROW
 
__attribute_malloc__
 
	`__attribute_alloc_size__
 ((1, 2)) 
__wur
;

550 extern void *
	$realloc
 (void *
__ptr
, 
size_t
 
__size
)

551 
__THROW
 
__attribute_warn_unused_result__
 
	`__attribute_alloc_size__
 ((2));

553 #ifdef 
__USE_MISC


559 extern void *
	$reallocarray
 (void *
__ptr
, 
size_t
 
__nmemb
, size_t 
__size
)

560 
__THROW
 
__attribute_warn_unused_result__


561 
	`__attribute_alloc_size__
 ((2, 3));

565 extern void 
	$free
 (void *
__ptr
) 
__THROW
;

567 #ifdef 
__USE_MISC


568 #include 
	~<alloca.h
>

571 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K
) \

572 || 
defined
 
__USE_MISC


574 extern void *
	$valloc
 (
size_t
 
__size
) 
__THROW
 
__attribute_malloc__


575 
	`__attribute_alloc_size__
 ((1)) 
__wur
;

578 #ifdef 
__USE_XOPEN2K


580 extern int 
	$posix_memalign
 (void **
__memptr
, 
size_t
 
__alignment
, size_t 
__size
)

581 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

584 #ifdef 
__USE_ISOC11


586 extern void *
	$aligned_alloc
 (
size_t
 
__alignment
, size_t 
__size
)

587 
__THROW
 
__attribute_malloc__
 
	`__attribute_alloc_size__
 ((2)) 
__wur
;

591 extern void 
	$abort
 (void) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

595 extern int 
	`atexit
 (void (*
__func
) (void)) 
__THROW
 
	`__nonnull
 ((1));

597 #if 
defined
 
__USE_ISOC11
 || defined 
__USE_ISOCXX11


599 #ifdef 
__cplusplus


600 extern "C++" int 
	`at_quick_exit
 (void (*
__func
) (void))

601 
__THROW
 
	`__asm
 ("at_quick_exit") 
	`__nonnull
 ((1));

603 extern int 
	`at_quick_exit
 (void (*
__func
) (void)) 
__THROW
 
	`__nonnull
 ((1));

607 #ifdef 
__USE_MISC


610 extern int 
	`on_exit
 (void (*
__func
) (int 
__status
, void *
__arg
), void *__arg)

611 
__THROW
 
	`__nonnull
 ((1));

617 extern void 
	$exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

619 #if 
defined
 
__USE_ISOC11
 || defined 
__USE_ISOCXX11


623 extern void 
	$quick_exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

626 #ifdef 
__USE_ISOC99


629 extern void 
	$_Exit
 (int 
__status
) 
__THROW
 
	`__attribute__
 ((
__noreturn__
));

634 extern char *
	$getenv
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

636 #ifdef 
__USE_GNU


639 extern char *
	$secure_getenv
 (const char *
__name
)

640 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

643 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


647 extern int 
	$putenv
 (char *
__string
) 
__THROW
 
	`__nonnull
 ((1));

650 #ifdef 
__USE_XOPEN2K


653 extern int 
	$setenv
 (const char *
__name
, const char *
__value
, int 
__replace
)

654 
__THROW
 
	`__nonnull
 ((2));

657 extern int 
	$unsetenv
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

660 #ifdef 
__USE_MISC


664 extern int 
	$clearenv
 (void) 
__THROW
;

668 #if 
defined
 
__USE_MISC
 \

669 || (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
)

675 extern char *
	$mktemp
 (char *
__template
) 
__THROW
 
	`__nonnull
 ((1));

678 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


687 #ifndef 
__USE_FILE_OFFSET64


688 extern int 
	$mkstemp
 (char *
__template
) 
	`__nonnull
 ((1)) 
__wur
;

690 #ifdef 
__REDIRECT


691 extern int 
	`__REDIRECT
 (
mkstemp
, (char *
__template
), 
mkstemp64
)

692 
	`__nonnull
 ((1)) 
__wur
;

694 #define 
	#mkstemp
 
mkstemp64


	)

697 #ifdef 
__USE_LARGEFILE64


698 extern int 
	$mkstemp64
 (char *
__template
) 
	`__nonnull
 ((1)) 
__wur
;

702 #ifdef 
__USE_MISC


709 #ifndef 
__USE_FILE_OFFSET64


710 extern int 
	$mkstemps
 (char *
__template
, int 
__suffixlen
) 
	`__nonnull
 ((1)) 
__wur
;

712 #ifdef 
__REDIRECT


713 extern int 
	`__REDIRECT
 (
mkstemps
, (char *
__template
, int 
__suffixlen
),

714 
mkstemps64
) 
	`__nonnull
 ((1)) 
__wur
;

716 #define 
	#mkstemps
 
mkstemps64


	)

719 #ifdef 
__USE_LARGEFILE64


720 extern int 
	$mkstemps64
 (char *
__template
, int 
__suffixlen
)

721 
	`__nonnull
 ((1)) 
__wur
;

725 #ifdef 
__USE_XOPEN2K8


731 extern char *
	$mkdtemp
 (char *
__template
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

734 #ifdef 
__USE_GNU


741 #ifndef 
__USE_FILE_OFFSET64


742 extern int 
	$mkostemp
 (char *
__template
, int 
__flags
) 
	`__nonnull
 ((1)) 
__wur
;

744 #ifdef 
__REDIRECT


745 extern int 
	`__REDIRECT
 (
mkostemp
, (char *
__template
, int 
__flags
), 
mkostemp64
)

746 
	`__nonnull
 ((1)) 
__wur
;

748 #define 
	#mkostemp
 
mkostemp64


	)

751 #ifdef 
__USE_LARGEFILE64


752 extern int 
	$mkostemp64
 (char *
__template
, int 
__flags
) 
	`__nonnull
 ((1)) 
__wur
;

761 #ifndef 
__USE_FILE_OFFSET64


762 extern int 
	$mkostemps
 (char *
__template
, int 
__suffixlen
, int 
__flags
)

763 
	`__nonnull
 ((1)) 
__wur
;

765 #ifdef 
__REDIRECT


766 extern int 
	`__REDIRECT
 (
mkostemps
, (char *
__template
, int 
__suffixlen
,

767 int 
__flags
), 
mkostemps64
)

768 
	`__nonnull
 ((1)) 
__wur
;

770 #define 
	#mkostemps
 
mkostemps64


	)

773 #ifdef 
__USE_LARGEFILE64


774 extern int 
	$mkostemps64
 (char *
__template
, int 
__suffixlen
, int 
__flags
)

775 
	`__nonnull
 ((1)) 
__wur
;

784 extern int 
	$system
 (const char *
__command
) 
__wur
;

787 #ifdef 
__USE_GNU


790 extern char *
	$canonicalize_file_name
 (const char *
__name
)

791 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

794 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED


800 extern char *
	$realpath
 (const char *
__restrict
 
__name
,

801 char *
__restrict
 
__resolved
) 
__THROW
 
__wur
;

806 #ifndef 
__COMPAR_FN_T


807 #define 
	#__COMPAR_FN_T


	)

808 typedef int (*
	t__compar_fn_t
) (const void *, const void *);

810 #ifdef 
__USE_GNU


811 typedef 
__compar_fn_t
 
	tcomparison_fn_t
;

814 #ifdef 
__USE_GNU


815 typedef int (*
	t__compar_d_fn_t
) (const void *, const void *, void *);

820 extern void *
	$bsearch
 (const void *
__key
, const void *
__base
,

821 
size_t
 
__nmemb
, size_t 
__size
, 
__compar_fn_t
 
__compar
)

822 
	`__nonnull
 ((1, 2, 5)) 
__wur
;

824 #ifdef 
__USE_EXTERN_INLINES


825 #include 
	~<bits/stdlib-bsearch.h
>

830 extern void 
	$qsort
 (void *
__base
, 
size_t
 
__nmemb
, size_t 
__size
,

831 
__compar_fn_t
 
__compar
) 
	`__nonnull
 ((1, 4));

832 #ifdef 
__USE_GNU


833 extern void 
	$qsort_r
 (void *
__base
, 
size_t
 
__nmemb
, size_t 
__size
,

834 
__compar_d_fn_t
 
__compar
, void *
__arg
)

835 
	`__nonnull
 ((1, 4));

840 extern int 
	$abs
 (int 
__x
) 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

841 extern long int 
	$labs
 (long int 
__x
) 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

843 #ifdef 
__USE_ISOC99


844 
__extension__
 extern long long int 
	$llabs
 (long long int 
__x
)

845 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

852 extern 
div_t
 
	$div
 (int 
__numer
, int 
__denom
)

853 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

854 extern 
ldiv_t
 
	$ldiv
 (long int 
__numer
, long int 
__denom
)

855 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

857 #ifdef 
__USE_ISOC99


858 
__extension__
 extern 
lldiv_t
 
	$lldiv
 (long long int 
__numer
,

859 long long int 
__denom
)

860 
__THROW
 
	`__attribute__
 ((
__const__
)) 
__wur
;

864 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

865 || 
defined
 
__USE_MISC


872 extern char *
	$ecvt
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

873 int *
__restrict
 
__sign
) 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

878 extern char *
	$fcvt
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

879 int *
__restrict
 
__sign
) 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

884 extern char *
	$gcvt
 (double 
__value
, int 
__ndigit
, char *
__buf
)

885 
__THROW
 
	`__nonnull
 ((3)) 
__wur
;

888 #ifdef 
__USE_MISC


890 extern char *
	$qecvt
 (long double 
__value
, int 
__ndigit
,

891 int *
__restrict
 
__decpt
, int *__restrict 
__sign
)

892 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

893 extern char *
	$qfcvt
 (long double 
__value
, int 
__ndigit
,

894 int *
__restrict
 
__decpt
, int *__restrict 
__sign
)

895 
__THROW
 
	`__nonnull
 ((3, 4)) 
__wur
;

896 extern char *
	$qgcvt
 (long double 
__value
, int 
__ndigit
, char *
__buf
)

897 
__THROW
 
	`__nonnull
 ((3)) 
__wur
;

902 extern int 
	$ecvt_r
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

903 int *
__restrict
 
__sign
, char *__restrict 
__buf
,

904 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((3, 4, 5));

905 extern int 
	$fcvt_r
 (double 
__value
, int 
__ndigit
, int *
__restrict
 
__decpt
,

906 int *
__restrict
 
__sign
, char *__restrict 
__buf
,

907 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((3, 4, 5));

909 extern int 
	$qecvt_r
 (long double 
__value
, int 
__ndigit
,

910 int *
__restrict
 
__decpt
, int *__restrict 
__sign
,

911 char *
__restrict
 
__buf
, 
size_t
 
__len
)

912 
__THROW
 
	`__nonnull
 ((3, 4, 5));

913 extern int 
	$qfcvt_r
 (long double 
__value
, int 
__ndigit
,

914 int *
__restrict
 
__decpt
, int *__restrict 
__sign
,

915 char *
__restrict
 
__buf
, 
size_t
 
__len
)

916 
__THROW
 
	`__nonnull
 ((3, 4, 5));

922 extern int 
	$mblen
 (const char *
__s
, 
size_t
 
__n
) 
__THROW
;

925 extern int 
	$mbtowc
 (
wchar_t
 *
__restrict
 
__pwc
,

926 const char *
__restrict
 
__s
, 
size_t
 
__n
) 
__THROW
;

929 extern int 
	$wctomb
 (char *
__s
, 
wchar_t
 
__wchar
) 
__THROW
;

933 extern 
size_t
 
	$mbstowcs
 (
wchar_t
 *
__restrict
 
__pwcs
,

934 const char *
__restrict
 
__s
, 
size_t
 
__n
) 
__THROW


935 
	`__attr_access
 ((
__read_only__
, 2));

937 extern 
size_t
 
	$wcstombs
 (char *
__restrict
 
__s
,

938 const 
wchar_t
 *
__restrict
 
__pwcs
, 
size_t
 
__n
)

939 
__THROW


940 
	`__attr_access
 ((
__write_only__
, 1, 3)) __attr_access ((
__read_only__
, 2));

942 #ifdef 
__USE_MISC


947 extern int 
	$rpmatch
 (const char *
__response
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

951 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


958 extern int 
	$getsubopt
 (char **
__restrict
 
__optionp
,

959 char *const *
__restrict
 
__tokens
,

960 char **
__restrict
 
__valuep
)

961 
__THROW
 
	`__nonnull
 ((1, 2, 3)) 
__wur
;

967 #ifdef 
__USE_XOPEN2KXSI


969 extern int 
	$posix_openpt
 (int 
__oflag
) 
__wur
;

972 #ifdef 
__USE_XOPEN_EXTENDED


977 extern int 
	$grantpt
 (int 
__fd
) 
__THROW
;

981 extern int 
	$unlockpt
 (int 
__fd
) 
__THROW
;

986 extern char *
	$ptsname
 (int 
__fd
) 
__THROW
 
__wur
;

989 #ifdef 
__USE_GNU


993 extern int 
	$ptsname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
)

994 
__THROW
 
	`__nonnull
 ((2)) 
	`__attr_access
 ((
__write_only__
, 2, 3));

997 extern int 
	`getpt
 (void);

1000 #ifdef 
__USE_MISC


1004 extern int 
	$getloadavg
 (double 
__loadavg
[], int 
__nelem
)

1005 
__THROW
 
	`__nonnull
 ((1));

1008 #if 
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K


1011 extern int 
	$ttyslot
 (void) 
__THROW
;

1014 #include 
	~<bits/stdlib-float.h
>

1017 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


1018 #include 
	~<bits/stdlib.h
>

1021 #include 
	~<bits/floatn.h
>

1022 #if 
defined
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1023 #include 
	~<bits/stdlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #ifndef 
_STRING_H


23 #define 
	#_STRING_H
 1

	)

25 #define 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 #include 
	~<bits/libc-header-start.h
>

28 
	g__BEGIN_DECLS


31 #define 
	#__need_size_t


	)

32 #define 
	#__need_NULL


	)

33 #include 
	~<stddef.h
>

36 #if 
defined
 
__cplusplus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_clang_prereq
 (3, 5))

38 #define 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 extern void *
	$memcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

44 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

47 extern void *
	$memmove
 (void *
__dest
, const void *
__src
, 
size_t
 
__n
)

48 
__THROW
 
	`__nonnull
 ((1, 2));

53 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 extern void *
	$memccpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

55 int 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__nonnull
 ((1, 2)) 
	`__attr_access
 ((
__write_only__
, 1, 4));

61 extern void *
	$memset
 (void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

64 extern int 
	$memcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

68 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


71 extern void *
	`memchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

73 extern const void *
	`memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

76 #ifdef 
__OPTIMIZE__


77 
__extern_always_inline
 void *

78 
	`memchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW


80 return 
	`__builtin_memchr
 (
__s
, 
__c
, 
__n
);

83 
__extern_always_inline
 const void *

84 
	`memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
) 
__THROW


86 return 
	`__builtin_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 extern void *
	$memchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

95 #ifdef 
__USE_GNU


98 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


99 extern "C++" void *
	$rawmemchr
 (void *
__s
, int 
__c
)

100 
__THROW
 
	`__asm
 ("rawmemchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

101 extern "C++" const void *
	$rawmemchr
 (const void *
__s
, int 
__c
)

102 
__THROW
 
	`__asm
 ("rawmemchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

104 extern void *
	$rawmemchr
 (const void *
__s
, int 
__c
)

105 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

109 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


110 extern "C++" void *
	$memrchr
 (void *
__s
, int 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr") 
__attribute_pure__
 
	`__nonnull
 ((1))

112 
	`__attr_access
 ((
__read_only__
, 1, 3));

113 extern "C++" const void *
	$memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

114 
__THROW
 
	`__asm
 ("memrchr") 
__attribute_pure__
 
	`__nonnull
 ((1))

115 
	`__attr_access
 ((
__read_only__
, 1, 3));

117 extern void *
	$memrchr
 (const void *
__s
, int 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1))

119 
	`__attr_access
 ((
__read_only__
, 1, 3));

125 extern char *
	$strcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

126 
__THROW
 
	`__nonnull
 ((1, 2));

128 extern char *
	$strncpy
 (char *
__restrict
 
__dest
,

129 const char *
__restrict
 
__src
, 
size_t
 
__n
)

130 
__THROW
 
	`__nonnull
 ((1, 2));

133 extern char *
	$strcat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

134 
__THROW
 
	`__nonnull
 ((1, 2));

136 extern char *
	$strncat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

137 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2));

140 extern int 
	$strcmp
 (const char *
__s1
, const char *
__s2
)

141 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

143 extern int 
	$strncmp
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

147 extern int 
	$strcoll
 (const char *
__s1
, const char *
__s2
)

148 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

150 extern 
size_t
 
	$strxfrm
 (char *
__restrict
 
__dest
,

151 const char *
__restrict
 
__src
, 
size_t
 
__n
)

152 
__THROW
 
	`__nonnull
 ((2)) 
	`__attr_access
 ((
__write_only__
, 1, 3));

154 #ifdef 
__USE_XOPEN2K8


156 #include 
	~<bits/types/locale_t.h
>

159 extern int 
	$strcoll_l
 (const char *
__s1
, const char *
__s2
, 
locale_t
 
__l
)

160 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 3));

163 extern 
size_t
 
	$strxfrm_l
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
,

164 
locale_t
 
__l
) 
__THROW
 
	`__nonnull
 ((2, 4))

165 
	`__attr_access
 ((
__write_only__
, 1, 3));

168 #if (
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8
 \

169 || 
	`__GLIBC_USE
 (
LIB_EXT2
) || 
	$__GLIBC_USE
 (
ISOC2X
))

171 extern char *
	$strdup
 (const char *
__s
)

172 
__THROW
 
__attribute_malloc__
 
	`__nonnull
 ((1));

178 #if 
defined
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
) || __GLIBC_USE (
ISOC2X
)

179 extern char *
	$strndup
 (const char *
__string
, 
size_t
 
__n
)

180 
__THROW
 
__attribute_malloc__
 
	`__nonnull
 ((1));

183 #if 
defined
 
__USE_GNU
 && defined 
__GNUC__


185 #define 
	#strdupa
(
s
) \

186 (
__extension__
 \

188 const char *
__old
 = (
s
); \

189 
size_t
 
__len
 = 
	`strlen
 (
__old
) + 1; \

190 char *
__new
 = (char *) 
	`__builtin_alloca
 (
__len
); \

191 (char *) 
	`memcpy
 (
__new
, 
__old
, 
__len
); \

192 
	}
}))

	)

195 #define 
	#strndupa
(
s
, 
n
) \

196 (
__extension__
 \

198 const char *
__old
 = (
s
); \

199 
size_t
 
__len
 = 
	`strnlen
 (
__old
, (
n
)); \

200 char *
__new
 = (char *) 
	`__builtin_alloca
 (
__len
 + 1); \

201 
__new
[
__len
] = '\0'; \

202 (char *) 
	`memcpy
 (
__new
, 
__old
, 
__len
); \

203 }))

	)

207 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


210 extern char *
strchr
 (char *
__s
, int 
__c
)

211 
__THROW
 
__asm
 ("strchr") 
__attribute_pure__
 
__nonnull
 ((1));

212 extern const char *
strchr
 (const char *
__s
, int 
__c
)

213 
__THROW
 
__asm
 ("strchr") 
__attribute_pure__
 
__nonnull
 ((1));

215 #ifdef 
__OPTIMIZE__


216 
__extern_always_inline
 char *

217 
strchr
 (char *
__s
, int 
__c
) 
	g__THROW


219 return 
__builtin_strchr
 (
__s
, 
__c
);

222 
__extern_always_inline
 const char *

223 
strchr
 (const char *
__s
, int 
__c
) 
	g__THROW


225 return 
__builtin_strchr
 (
__s
, 
__c
);

230 extern char *
	$strchr
 (const char *
__s
, int 
__c
)

231 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

234 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


237 extern char *
	`strrchr
 (char *
__s
, int 
__c
)

238 
__THROW
 
	`__asm
 ("strrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

239 extern const char *
	`strrchr
 (const char *
__s
, int 
__c
)

240 
__THROW
 
	`__asm
 ("strrchr") 
__attribute_pure__
 
	`__nonnull
 ((1));

242 #ifdef 
__OPTIMIZE__


243 
__extern_always_inline
 char *

244 
	`strrchr
 (char *
__s
, int 
__c
) 
__THROW


246 return 
	`__builtin_strrchr
 (
__s
, 
__c
);

249 
__extern_always_inline
 const char *

250 
	`strrchr
 (const char *
__s
, int 
__c
) 
__THROW


252 return 
	`__builtin_strrchr
 (
__s
, 
__c
);

255 
	}
}

257 extern char *
	$strrchr
 (const char *
__s
, int 
__c
)

258 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

261 #ifdef 
__USE_GNU


264 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


265 extern "C++" char *
	$strchrnul
 (char *
__s
, int 
__c
)

266 
__THROW
 
	`__asm
 ("strchrnul") 
__attribute_pure__
 
	`__nonnull
 ((1));

267 extern "C++" const char *
	$strchrnul
 (const char *
__s
, int 
__c
)

268 
__THROW
 
	`__asm
 ("strchrnul") 
__attribute_pure__
 
	`__nonnull
 ((1));

270 extern char *
	$strchrnul
 (const char *
__s
, int 
__c
)

271 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

277 extern 
size_t
 
	$strcspn
 (const char *
__s
, const char *
__reject
)

278 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

281 extern 
size_t
 
	$strspn
 (const char *
__s
, const char *
__accept
)

282 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

284 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


287 extern char *
	`strpbrk
 (char *
__s
, const char *
__accept
)

288 
__THROW
 
	`__asm
 ("strpbrk") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

289 extern const char *
	`strpbrk
 (const char *
__s
, const char *
__accept
)

290 
__THROW
 
	`__asm
 ("strpbrk") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

292 #ifdef 
__OPTIMIZE__


293 
__extern_always_inline
 char *

294 
	`strpbrk
 (char *
__s
, const char *
__accept
) 
__THROW


296 return 
	`__builtin_strpbrk
 (
__s
, 
__accept
);

299 
__extern_always_inline
 const char *

300 
	`strpbrk
 (const char *
__s
, const char *
__accept
) 
__THROW


302 return 
	`__builtin_strpbrk
 (
__s
, 
__accept
);

305 
	}
}

307 extern char *
	$strpbrk
 (const char *
__s
, const char *
__accept
)

308 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

311 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


314 extern char *
	`strstr
 (char *
__haystack
, const char *
__needle
)

315 
__THROW
 
	`__asm
 ("strstr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

316 extern const char *
	`strstr
 (const char *
__haystack
, const char *
__needle
)

317 
__THROW
 
	`__asm
 ("strstr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

319 #ifdef 
__OPTIMIZE__


320 
__extern_always_inline
 char *

321 
	`strstr
 (char *
__haystack
, const char *
__needle
) 
__THROW


323 return 
	`__builtin_strstr
 (
__haystack
, 
__needle
);

326 
__extern_always_inline
 const char *

327 
	`strstr
 (const char *
__haystack
, const char *
__needle
) 
__THROW


329 return 
	`__builtin_strstr
 (
__haystack
, 
__needle
);

332 
	}
}

334 extern char *
	$strstr
 (const char *
__haystack
, const char *
__needle
)

335 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

340 extern char *
	$strtok
 (char *
__restrict
 
__s
, const char *__restrict 
__delim
)

341 
__THROW
 
	`__nonnull
 ((2));

345 extern char *
	$__strtok_r
 (char *
__restrict
 
__s
,

346 const char *
__restrict
 
__delim
,

347 char **
__restrict
 
__save_ptr
)

348 
__THROW
 
	`__nonnull
 ((2, 3));

349 #ifdef 
__USE_POSIX


350 extern char *
	$strtok_r
 (char *
__restrict
 
__s
, const char *__restrict 
__delim
,

351 char **
__restrict
 
__save_ptr
)

352 
__THROW
 
	`__nonnull
 ((2, 3));

355 #ifdef 
__USE_GNU


357 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


358 extern "C++" char *
	$strcasestr
 (char *
__haystack
, const char *
__needle
)

359 
__THROW
 
	`__asm
 ("strcasestr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

360 extern "C++" const char *
	$strcasestr
 (const char *
__haystack
,

361 const char *
__needle
)

362 
__THROW
 
	`__asm
 ("strcasestr") 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

364 extern char *
	$strcasestr
 (const char *
__haystack
, const char *
__needle
)

365 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

369 #ifdef 
__USE_GNU


373 extern void *
	$memmem
 (const void *
__haystack
, 
size_t
 
__haystacklen
,

374 const void *
__needle
, 
size_t
 
__needlelen
)

375 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 3))

376 
	`__attr_access
 ((
__read_only__
, 1, 2))

377 
	`__attr_access
 ((
__read_only__
, 3, 4));

381 extern void *
	$__mempcpy
 (void *
__restrict
 
__dest
,

382 const void *
__restrict
 
__src
, 
size_t
 
__n
)

383 
__THROW
 
	`__nonnull
 ((1, 2));

384 extern void *
	$mempcpy
 (void *
__restrict
 
__dest
,

385 const void *
__restrict
 
__src
, 
size_t
 
__n
)

386 
__THROW
 
	`__nonnull
 ((1, 2));

391 extern 
size_t
 
	$strlen
 (const char *
__s
)

392 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

394 #ifdef 
__USE_XOPEN2K8


397 extern 
size_t
 
	$strnlen
 (const char *
__string
, 
size_t
 
__maxlen
)

398 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

403 extern char *
	$strerror
 (int 
__errnum
) 
__THROW
;

404 #ifdef 
__USE_XOPEN2K


412 #if 
defined
 
__USE_XOPEN2K
 && !defined 
__USE_GNU


415 #ifdef 
__REDIRECT_NTH


416 extern int 
	`__REDIRECT_NTH
 (
strerror_r
,

417 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
),

418 
__xpg_strerror_r
) 
	`__nonnull
 ((2))

419 
	`__attr_access
 ((
__write_only__
, 2, 3));

421 extern int 
	$__xpg_strerror_r
 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
)

422 
__THROW
 
	`__nonnull
 ((2)) 
	`__attr_access
 ((
__write_only__
, 2, 3));

423 #define 
	#strerror_r
 
__xpg_strerror_r


	)

428 extern char *
	$strerror_r
 (int 
__errnum
, char *
__buf
, 
size_t
 
__buflen
)

429 
__THROW
 
	`__nonnull
 ((2)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

432 #ifdef 
__USE_GNU


434 extern const char *
	$strerrordesc_np
 (int 
__err
) 
__THROW
;

436 extern const char *
	$strerrorname_np
 (int 
__err
) 
__THROW
;

440 #ifdef 
__USE_XOPEN2K8


442 extern char *
	$strerror_l
 (int 
__errnum
, 
locale_t
 
__l
) 
__THROW
;

445 #ifdef 
__USE_MISC


446 #include 
	~<strings.h
>

450 extern void 
	$explicit_bzero
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1))

451 
	`__attr_access
 ((
__write_only__
, 1, 2));

455 extern char *
	$strsep
 (char **
__restrict
 
__stringp
,

456 const char *
__restrict
 
__delim
)

457 
__THROW
 
	`__nonnull
 ((1, 2));

460 #ifdef 
__USE_XOPEN2K8


462 extern char *
	$strsignal
 (int 
__sig
) 
__THROW
;

464 #ifdef 
__USE_GNU


466 extern const char *
	$sigabbrev_np
 (int 
__sig
) 
__THROW
;

469 extern const char *
	$sigdescr_np
 (int 
__sig
) 
__THROW
;

473 extern char *
	$__stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

474 
__THROW
 
	`__nonnull
 ((1, 2));

475 extern char *
	$stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
)

476 
__THROW
 
	`__nonnull
 ((1, 2));

480 extern char *
	$__stpncpy
 (char *
__restrict
 
__dest
,

481 const char *
__restrict
 
__src
, 
size_t
 
__n
)

482 
__THROW
 
	`__nonnull
 ((1, 2));

483 extern char *
	$stpncpy
 (char *
__restrict
 
__dest
,

484 const char *
__restrict
 
__src
, 
size_t
 
__n
)

485 
__THROW
 
	`__nonnull
 ((1, 2));

488 #ifdef 
__USE_GNU


490 extern int 
	$strverscmp
 (const char *
__s1
, const char *
__s2
)

491 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

494 extern char *
	$strfry
 (char *
__string
) 
__THROW
 
	`__nonnull
 ((1));

497 extern void *
	$memfrob
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1))

498 
	`__attr_access
 ((
__write_only__
, 1, 2));

500 #ifndef 
basename


505 #ifdef 
__CORRECT_ISO_CPP_STRING_H_PROTO


506 extern "C++" char *
	$basename
 (char *
__filename
)

507 
__THROW
 
	`__asm
 ("basename") 
	`__nonnull
 ((1));

508 extern "C++" const char *
	$basename
 (const char *
__filename
)

509 
__THROW
 
	`__asm
 ("basename") 
	`__nonnull
 ((1));

511 extern char *
	$basename
 (const char *
__filename
) 
__THROW
 
	`__nonnull
 ((1));

516 #if 
	`__GNUC_PREREQ
 (3,4)

517 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


519 #include 
	~<bits/string_fortified.h
>

523 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #ifndef 
_SYS_IOCTL_H


19 #define 
	#_SYS_IOCTL_H
 1

	)

21 #include 
	~<features.h
>

23 
	g__BEGIN_DECLS


26 #include 
	~<bits/ioctls.h
>

29 #include 
	~<bits/ioctl-types.h
>

36 #include 
	~<sys/ttydefaults.h
>

41 extern int 
	$ioctl
 (int 
__fd
, unsigned long int 
__request
, ...) 
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/types.h

22 #ifndef 
_SYS_TYPES_H


23 #define 
	#_SYS_TYPES_H
 1

	)

25 #include 
	~<features.h
>

27 
	g__BEGIN_DECLS


29 #include 
	~<bits/types.h
>

31 #ifdef 
__USE_MISC


32 #ifndef 
__u_char_defined


33 typedef 
__u_char
 
	tu_char
;

34 typedef 
__u_short
 
	tu_short
;

35 typedef 
__u_int
 
	tu_int
;

36 typedef 
__u_long
 
	tu_long
;

37 typedef 
__quad_t
 
	tquad_t
;

38 typedef 
__u_quad_t
 
	tu_quad_t
;

39 typedef 
__fsid_t
 
	tfsid_t
;

40 #define 
	#__u_char_defined


	)

42 typedef 
__loff_t
 
	tloff_t
;

45 #ifndef 
__ino_t_defined


46 #ifndef 
__USE_FILE_OFFSET64


47 typedef 
__ino_t
 
	tino_t
;

49 typedef 
__ino64_t
 
	tino_t
;

51 #define 
	#__ino_t_defined


	)

53 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__ino64_t_defined


54 typedef 
__ino64_t
 
	tino64_t
;

55 #define 
	#__ino64_t_defined


	)

58 #ifndef 
__dev_t_defined


59 typedef 
__dev_t
 
	tdev_t
;

60 #define 
	#__dev_t_defined


	)

63 #ifndef 
__gid_t_defined


64 typedef 
__gid_t
 
	tgid_t
;

65 #define 
	#__gid_t_defined


	)

68 #ifndef 
__mode_t_defined


69 typedef 
__mode_t
 
	tmode_t
;

70 #define 
	#__mode_t_defined


	)

73 #ifndef 
__nlink_t_defined


74 typedef 
__nlink_t
 
	tnlink_t
;

75 #define 
	#__nlink_t_defined


	)

78 #ifndef 
__uid_t_defined


79 typedef 
__uid_t
 
	tuid_t
;

80 #define 
	#__uid_t_defined


	)

83 #ifndef 
__off_t_defined


84 #ifndef 
__USE_FILE_OFFSET64


85 typedef 
__off_t
 
	toff_t
;

87 typedef 
__off64_t
 
	toff_t
;

89 #define 
	#__off_t_defined


	)

91 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


92 typedef 
__off64_t
 
	toff64_t
;

93 #define 
	#__off64_t_defined


	)

96 #ifndef 
__pid_t_defined


97 typedef 
__pid_t
 
	tpid_t
;

98 #define 
	#__pid_t_defined


	)

101 #if (
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8
) \

102 && !
defined
 
__id_t_defined


103 typedef 
__id_t
 
	tid_t
;

104 #define 
	#__id_t_defined


	)

107 #ifndef 
__ssize_t_defined


108 typedef 
__ssize_t
 
	tssize_t
;

109 #define 
	#__ssize_t_defined


	)

112 #ifdef 
__USE_MISC


113 #ifndef 
__daddr_t_defined


114 typedef 
__daddr_t
 
	tdaddr_t
;

115 typedef 
__caddr_t
 
	tcaddr_t
;

116 #define 
	#__daddr_t_defined


	)

120 #if (
defined
 
__USE_MISC
 || defined 
__USE_XOPEN
) && !defined 
__key_t_defined


121 typedef 
__key_t
 
	tkey_t
;

122 #define 
	#__key_t_defined


	)

125 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


126 #include 
	~<bits/types/clock_t.h
>

128 #include 
	~<bits/types/clockid_t.h
>

129 #include 
	~<bits/types/time_t.h
>

130 #include 
	~<bits/types/timer_t.h
>

132 #ifdef 
__USE_XOPEN


133 #ifndef 
__useconds_t_defined


134 typedef 
__useconds_t
 
	tuseconds_t
;

135 #define 
	#__useconds_t_defined


	)

137 #ifndef 
__suseconds_t_defined


138 typedef 
__suseconds_t
 
	tsuseconds_t
;

139 #define 
	#__suseconds_t_defined


	)

143 #define 
	#__need_size_t


	)

144 #include 
	~<stddef.h
>

146 #ifdef 
__USE_MISC


148 typedef unsigned long int 
	tulong
;

149 typedef unsigned short int 
	tushort
;

150 typedef unsigned int 
	tuint
;

155 #include 
	~<bits/stdint-intn.h
>

158 typedef 
__uint8_t
 
	tu_int8_t
;

159 typedef 
__uint16_t
 
	tu_int16_t
;

160 typedef 
__uint32_t
 
	tu_int32_t
;

161 typedef 
__uint64_t
 
	tu_int64_t
;

163 #if 
__GNUC_PREREQ
 (2, 7)

164 typedef int 
	tregister_t
 
	t__attribute__
 ((
	t__mode__
 (
	t__word__
)));

166 typedef int 
	tregister_t
;

171 #define 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 #include 
	~<endian.h
>

179 #include 
	~<sys/select.h
>

183 #if (
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8
) \

184 && !
defined
 
__blksize_t_defined


185 typedef 
__blksize_t
 
	tblksize_t
;

186 #define 
	#__blksize_t_defined


	)

190 #ifndef 
__USE_FILE_OFFSET64


191 #ifndef 
__blkcnt_t_defined


192 typedef 
__blkcnt_t
 
	tblkcnt_t
;

193 #define 
	#__blkcnt_t_defined


	)

195 #ifndef 
__fsblkcnt_t_defined


196 typedef 
__fsblkcnt_t
 
	tfsblkcnt_t
;

197 #define 
	#__fsblkcnt_t_defined


	)

199 #ifndef 
__fsfilcnt_t_defined


200 typedef 
__fsfilcnt_t
 
	tfsfilcnt_t
;

201 #define 
	#__fsfilcnt_t_defined


	)

204 #ifndef 
__blkcnt_t_defined


205 typedef 
__blkcnt64_t
 
	tblkcnt_t
;

206 #define 
	#__blkcnt_t_defined


	)

208 #ifndef 
__fsblkcnt_t_defined


209 typedef 
__fsblkcnt64_t
 
	tfsblkcnt_t
;

210 #define 
	#__fsblkcnt_t_defined


	)

212 #ifndef 
__fsfilcnt_t_defined


213 typedef 
__fsfilcnt64_t
 
	tfsfilcnt_t
;

214 #define 
	#__fsfilcnt_t_defined


	)

218 #ifdef 
__USE_LARGEFILE64


219 typedef 
__blkcnt64_t
 
	tblkcnt64_t
;

220 typedef 
__fsblkcnt64_t
 
	tfsblkcnt64_t
;

221 typedef 
__fsfilcnt64_t
 
	tfsfilcnt64_t
;

226 #if 
defined
 
__USE_POSIX199506
 || defined 
__USE_UNIX98


227 #include 
	~<bits/pthreadtypes.h
>

230 
	g__END_DECLS


	@/usr/include/termios.h

22 #ifndef 
_TERMIOS_H


23 #define 
	#_TERMIOS_H
 1

	)

25 #include 
	~<features.h
>

26 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


28 #include 
	~<bits/types.h
>

29 #ifndef 
__pid_t_defined


30 typedef 
__pid_t
 
	tpid_t
;

31 #define 
	#__pid_t_defined


	)

35 
	g__BEGIN_DECLS


39 #include 
	~<bits/termios.h
>

41 #ifdef 
__USE_MISC


44 #define 
	#CCEQ
(
val
, 
c
) ((c) == (val) && (val) != 
_POSIX_VDISABLE
)

	)

48 extern 
speed_t
 
	$cfgetospeed
 (const struct 
termios
 *
__termios_p
) 
__THROW
;

51 extern 
speed_t
 
	$cfgetispeed
 (const struct 
termios
 *
__termios_p
) 
__THROW
;

54 extern int 
	$cfsetospeed
 (struct 
termios
 *
__termios_p
, 
speed_t
 
__speed
) 
__THROW
;

57 extern int 
	$cfsetispeed
 (struct 
termios
 *
__termios_p
, 
speed_t
 
__speed
) 
__THROW
;

59 #ifdef 
__USE_MISC


61 extern int 
	$cfsetspeed
 (struct 
termios
 *
__termios_p
, 
speed_t
 
__speed
) 
__THROW
;

66 extern int 
	$tcgetattr
 (int 
__fd
, struct 
termios
 *
__termios_p
) 
__THROW
;

70 extern int 
	$tcsetattr
 (int 
__fd
, int 
__optional_actions
,

71 const struct 
termios
 *
__termios_p
) 
__THROW
;

74 #ifdef 
__USE_MISC


76 extern void 
	$cfmakeraw
 (struct 
termios
 *
__termios_p
) 
__THROW
;

80 extern int 
	$tcsendbreak
 (int 
__fd
, int 
__duration
) 
__THROW
;

86 extern int 
	`tcdrain
 (int 
__fd
);

90 extern int 
	$tcflush
 (int 
__fd
, int 
__queue_selector
) 
__THROW
;

94 extern int 
	$tcflow
 (int 
__fd
, int 
__action
) 
__THROW
;

97 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


99 extern 
__pid_t
 
	$tcgetsid
 (int 
__fd
) 
__THROW
;

103 #ifdef 
__USE_MISC


104 #include 
	~<sys/ttydefaults.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #ifndef 
_TIME_H


23 #define 
	#_TIME_H
 1

	)

25 #include 
	~<features.h
>

27 #define 
	#__need_size_t


	)

28 #define 
	#__need_NULL


	)

29 #include 
	~<stddef.h
>

33 #include 
	~<bits/time.h
>

37 #include 
	~<bits/types/clock_t.h
>

38 #include 
	~<bits/types/time_t.h
>

39 #include 
	~<bits/types/struct_tm.h
>

41 #if 
defined
 
__USE_POSIX199309
 || defined 
__USE_ISOC11


42 #include 
	~<bits/types/struct_timespec.h
>

45 #ifdef 
__USE_POSIX199309


46 #include 
	~<bits/types/clockid_t.h
>

47 #include 
	~<bits/types/timer_t.h
>

48 #include 
	~<bits/types/struct_itimerspec.h
>

49 struct 
	gsigevent
;

52 #ifdef 
__USE_XOPEN2K


53 #ifndef 
__pid_t_defined


54 typedef 
__pid_t
 
	tpid_t
;

55 #define 
	#__pid_t_defined


	)

59 #ifdef 
__USE_XOPEN2K8


60 #include 
	~<bits/types/locale_t.h
>

63 #ifdef 
__USE_ISOC11


65 #define 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 extern 
clock_t
 
	$clock
 (void) 
__THROW
;

75 extern 
time_t
 
	$time
 (
time_t
 *
__timer
) 
__THROW
;

78 extern double 
	$difftime
 (
time_t
 
__time1
, time_t 
__time0
)

79 
__THROW
 
	`__attribute__
 ((
__const__
));

82 extern 
time_t
 
	$mktime
 (struct 
tm
 *
__tp
) 
__THROW
;

88 extern 
size_t
 
	$strftime
 (char *
__restrict
 
__s
, 
size_t
 
__maxsize
,

89 const char *
__restrict
 
__format
,

90 const struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

92 #ifdef 
__USE_XOPEN


95 extern char *
	$strptime
 (const char *
__restrict
 
__s
,

96 const char *
__restrict
 
__fmt
, struct 
tm
 *
__tp
)

97 
__THROW
;

100 #ifdef 
__USE_XOPEN2K8


104 extern 
size_t
 
	$strftime_l
 (char *
__restrict
 
__s
, 
size_t
 
__maxsize
,

105 const char *
__restrict
 
__format
,

106 const struct 
tm
 *
__restrict
 
__tp
,

107 
locale_t
 
__loc
) 
__THROW
;

110 #ifdef 
__USE_GNU


111 extern char *
	$strptime_l
 (const char *
__restrict
 
__s
,

112 const char *
__restrict
 
__fmt
, struct 
tm
 *
__tp
,

113 
locale_t
 
__loc
) 
__THROW
;

119 extern struct 
tm
 *
	$gmtime
 (const 
time_t
 *
__timer
) 
__THROW
;

123 extern struct 
tm
 *
	$localtime
 (const 
time_t
 *
__timer
) 
__THROW
;

125 #if 
defined
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 extern struct 
tm
 *
	$gmtime_r
 (const 
time_t
 *
__restrict
 
__timer
,

129 struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

133 extern struct 
tm
 *
	$localtime_r
 (const 
time_t
 *
__restrict
 
__timer
,

134 struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

139 extern char *
	$asctime
 (const struct 
tm
 *
__tp
) 
__THROW
;

142 extern char *
	$ctime
 (const 
time_t
 *
__timer
) 
__THROW
;

144 #if 
defined
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 extern char *
	$asctime_r
 (const struct 
tm
 *
__restrict
 
__tp
,

150 char *
__restrict
 
__buf
) 
__THROW
;

153 extern char *
	$ctime_r
 (const 
time_t
 *
__restrict
 
__timer
,

154 char *
__restrict
 
__buf
) 
__THROW
;

159 extern char *
__tzname
[2];

160 extern int 
__daylight
;

161 extern long int 
__timezone
;

164 #ifdef 
__USE_POSIX


166 extern char *
tzname
[2];

170 extern void 
	$tzset
 (void) 
__THROW
;

173 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


174 extern int 
daylight
;

175 extern long int 
timezone
;

181 #define 
	#__isleap
(
year
) \

182 ((
year
) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))

	)

185 #ifdef 
__USE_MISC


190 extern 
time_t
 
	$timegm
 (struct 
tm
 *
__tp
) 
__THROW
;

193 extern 
time_t
 
	$timelocal
 (struct 
tm
 *
__tp
) 
__THROW
;

196 extern int 
	$dysize
 (int 
__year
) 
__THROW
 
	`__attribute__
 ((
__const__
));

200 #ifdef 
__USE_POSIX199309


205 extern int 
	`nanosleep
 (const struct 
timespec
 *
__requested_time
,

206 struct 
timespec
 *
__remaining
);

210 extern int 
	$clock_getres
 (
clockid_t
 
__clock_id
, struct 
timespec
 *
__res
) 
__THROW
;

213 extern int 
	$clock_gettime
 (
clockid_t
 
__clock_id
, struct 
timespec
 *
__tp
) 
__THROW
;

216 extern int 
	$clock_settime
 (
clockid_t
 
__clock_id
, const struct 
timespec
 *
__tp
)

217 
__THROW
;

219 #ifdef 
__USE_XOPEN2K


224 extern int 
	`clock_nanosleep
 (
clockid_t
 
__clock_id
, int 
__flags
,

225 const struct 
timespec
 *
__req
,

226 struct 
timespec
 *
__rem
);

229 extern int 
	$clock_getcpuclockid
 (
pid_t
 
__pid
, 
clockid_t
 *
__clock_id
) 
__THROW
;

234 extern int 
	$timer_create
 (
clockid_t
 
__clock_id
,

235 struct 
sigevent
 *
__restrict
 
__evp
,

236 
timer_t
 *
__restrict
 
__timerid
) 
__THROW
;

239 extern int 
	$timer_delete
 (
timer_t
 
__timerid
) 
__THROW
;

242 extern int 
	$timer_settime
 (
timer_t
 
__timerid
, int 
__flags
,

243 const struct 
itimerspec
 *
__restrict
 
__value
,

244 struct 
itimerspec
 *
__restrict
 
__ovalue
) 
__THROW
;

247 extern int 
	$timer_gettime
 (
timer_t
 
__timerid
, struct 
itimerspec
 *
__value
)

248 
__THROW
;

251 extern int 
	$timer_getoverrun
 (
timer_t
 
__timerid
) 
__THROW
;

255 #ifdef 
__USE_ISOC11


257 extern int 
	$timespec_get
 (struct 
timespec
 *
__ts
, int 
__base
)

258 
__THROW
 
	`__nonnull
 ((1));

262 #ifdef 
__USE_XOPEN_EXTENDED


274 extern int 
getdate_err
;

283 extern struct 
tm
 *
	`getdate
 (const char *
__string
);

286 #ifdef 
__USE_GNU


297 extern int 
	`getdate_r
 (const char *
__restrict
 
__string
,

298 struct 
tm
 *
__restrict
 
__resbufp
);

301 
__END_DECLS


	@/usr/include/unistd.h

22 #ifndef 
_UNISTD_H


23 #define 
	#_UNISTD_H
 1

	)

25 #include 
	~<features.h
>

27 
	g__BEGIN_DECLS


32 #ifdef 
__USE_XOPEN2K8


34 #define 
	#_POSIX_VERSION
 200809L

	)

35 #elif 
defined
 
__USE_XOPEN2K


37 #define 
	#_POSIX_VERSION
 200112L

	)

38 #elif 
defined
 
__USE_POSIX199506


40 #define 
	#_POSIX_VERSION
 199506L

	)

41 #elif 
defined
 
__USE_POSIX199309


43 #define 
	#_POSIX_VERSION
 199309L

	)

46 #define 
	#_POSIX_VERSION
 199009L

	)

52 #ifdef 
__USE_XOPEN2K8


53 #define 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #elif 
defined
 
__USE_XOPEN2K


57 #define 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #elif 
defined
 
__USE_POSIX199506


60 #define 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 #define 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 #define 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 #define 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 #define 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 #define 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 #define 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 #define 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifdef 
__USE_XOPEN2K8


90 #define 
	#_XOPEN_VERSION
 700

	)

91 #elif 
defined
 
__USE_XOPEN2K


92 #define 
	#_XOPEN_VERSION
 600

	)

93 #elif 
defined
 
__USE_UNIX98


94 #define 
	#_XOPEN_VERSION
 500

	)

96 #define 
	#_XOPEN_VERSION
 4

	)

100 #define 
	#_XOPEN_XCU_VERSION
 4

	)

103 #define 
	#_XOPEN_XPG2
 1

	)

104 #define 
	#_XOPEN_XPG3
 1

	)

105 #define 
	#_XOPEN_XPG4
 1

	)

108 #define 
	#_XOPEN_UNIX
 1

	)

112 #define 
	#_XOPEN_ENH_I18N
 1

	)

115 #define 
	#_XOPEN_LEGACY
 1

	)

202 #include 
	~<bits/posix_opt.h
>

205 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


206 #include 
	~<bits/environments.h
>

210 #define 
	#STDIN_FILENO
 0

	)

211 #define 
	#STDOUT_FILENO
 1

	)

212 #define 
	#STDERR_FILENO
 2

	)

217 #include 
	~<bits/types.h
>

219 #ifndef 
__ssize_t_defined


220 typedef 
__ssize_t
 
	tssize_t
;

221 #define 
	#__ssize_t_defined


	)

224 #define 
	#__need_size_t


	)

225 #define 
	#__need_NULL


	)

226 #include 
	~<stddef.h
>

228 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K


231 #ifndef 
__gid_t_defined


232 typedef 
__gid_t
 
	tgid_t
;

233 #define 
	#__gid_t_defined


	)

236 #ifndef 
__uid_t_defined


237 typedef 
__uid_t
 
	tuid_t
;

238 #define 
	#__uid_t_defined


	)

241 #ifndef 
__off_t_defined


242 #ifndef 
__USE_FILE_OFFSET64


243 typedef 
__off_t
 
	toff_t
;

245 typedef 
__off64_t
 
	toff_t
;

247 #define 
	#__off_t_defined


	)

249 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


250 typedef 
__off64_t
 
	toff64_t
;

251 #define 
	#__off64_t_defined


	)

254 #ifndef 
__useconds_t_defined


255 typedef 
__useconds_t
 
	tuseconds_t
;

256 #define 
	#__useconds_t_defined


	)

259 #ifndef 
__pid_t_defined


260 typedef 
__pid_t
 
	tpid_t
;

261 #define 
	#__pid_t_defined


	)

265 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


266 #ifndef 
__intptr_t_defined


267 typedef 
__intptr_t
 
	tintptr_t
;

268 #define 
	#__intptr_t_defined


	)

272 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


273 #ifndef 
__socklen_t_defined


274 typedef 
__socklen_t
 
	tsocklen_t
;

275 #define 
	#__socklen_t_defined


	)

281 #define 
	#R_OK
 4

	)

282 #define 
	#W_OK
 2

	)

283 #define 
	#X_OK
 1

	)

284 #define 
	#F_OK
 0

	)

287 extern int 
	$access
 (const char *
__name
, int 
__type
) 
__THROW
 
	`__nonnull
 ((1));

289 #ifdef 
__USE_GNU


292 extern int 
	$euidaccess
 (const char *
__name
, int 
__type
)

293 
__THROW
 
	`__nonnull
 ((1));

296 extern int 
	$eaccess
 (const char *
__name
, int 
__type
)

297 
__THROW
 
	`__nonnull
 ((1));

300 #ifdef 
__USE_ATFILE


304 extern int 
	$faccessat
 (int 
__fd
, const char *
__file
, int 
__type
, int 
__flag
)

305 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

310 #ifndef 
_STDIO_H


311 #define 
	#SEEK_SET
 0

	)

312 #define 
	#SEEK_CUR
 1

	)

313 #define 
	#SEEK_END
 2

	)

314 #ifdef 
__USE_GNU


315 #define 
	#SEEK_DATA
 3

	)

316 #define 
	#SEEK_HOLE
 4

	)

320 #if 
defined
 
__USE_MISC
 && !defined 
L_SET


322 #define 
	#L_SET
 
SEEK_SET


	)

323 #define 
	#L_INCR
 
SEEK_CUR


	)

324 #define 
	#L_XTND
 
SEEK_END


	)

333 #ifndef 
__USE_FILE_OFFSET64


334 extern 
__off_t
 
	$lseek
 (int 
__fd
, 
__off_t
 
__offset
, int 
__whence
) 
__THROW
;

336 #ifdef 
__REDIRECT_NTH


337 extern 
__off64_t
 
	`__REDIRECT_NTH
 (
lseek
,

338 (int 
__fd
, 
__off64_t
 
__offset
, int 
__whence
),

339 
lseek64
);

341 #define 
	#lseek
 
lseek64


	)

344 #ifdef 
__USE_LARGEFILE64


345 extern 
__off64_t
 
	$lseek64
 (int 
__fd
, 
__off64_t
 
__offset
, int 
__whence
)

346 
__THROW
;

353 extern int 
	`close
 (int 
__fd
);

360 extern 
ssize_t
 
	$read
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
) 
__wur


361 
	`__attr_access
 ((
__write_only__
, 2, 3));

367 extern 
ssize_t
 
	$write
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
) 
__wur


368 
	`__attr_access
 ((
__read_only__
, 2, 3));

370 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


371 #ifndef 
__USE_FILE_OFFSET64


378 extern 
ssize_t
 
	$pread
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

379 
__off_t
 
__offset
) 
__wur


380 
	`__attr_access
 ((
__write_only__
, 2, 3));

387 extern 
ssize_t
 
	$pwrite
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__offset
) 
__wur


389 
	`__attr_access
 ((
__read_only__
, 2, 3));

392 #ifdef 
__REDIRECT


393 extern 
ssize_t
 
	`__REDIRECT
 (
pread
, (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

394 
__off64_t
 
__offset
),

395 
pread64
) 
__wur


396 
	`__attr_access
 ((
__write_only__
, 2, 3));

397 extern 
ssize_t
 
	`__REDIRECT
 (
pwrite
, (int 
__fd
, const void *
__buf
,

398 
size_t
 
__nbytes
, 
__off64_t
 
__offset
),

399 
pwrite64
) 
__wur


400 
	`__attr_access
 ((
__read_only__
, 2, 3));

402 #define 
	#pread
 
pread64


	)

403 #define 
	#pwrite
 
pwrite64


	)

407 #ifdef 
__USE_LARGEFILE64


411 extern 
ssize_t
 
	$pread64
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

412 
__off64_t
 
__offset
) 
__wur


413 
	`__attr_access
 ((
__write_only__
, 2, 3));

416 extern 
ssize_t
 
	$pwrite64
 (int 
__fd
, const void *
__buf
, 
size_t
 
__n
,

417 
__off64_t
 
__offset
) 
__wur


418 
	`__attr_access
 ((
__read_only__
, 2, 3));

426 extern int 
	$pipe
 (int 
__pipedes
[2]) 
__THROW
 
__wur
;

428 #ifdef 
__USE_GNU


431 extern int 
	$pipe2
 (int 
__pipedes
[2], int 
__flags
) 
__THROW
 
__wur
;

441 extern unsigned int 
	$alarm
 (unsigned int 
__seconds
) 
__THROW
;

453 extern unsigned int 
	`sleep
 (unsigned int 
__seconds
);

455 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

456 || 
defined
 
__USE_MISC


461 extern 
__useconds_t
 
	$ualarm
 (
__useconds_t
 
__value
, __useconds_t 
__interval
)

462 
__THROW
;

469 extern int 
	`usleep
 (
__useconds_t
 
__useconds
);

478 extern int 
	`pause
 (void);

482 extern int 
	$chown
 (const char *
__file
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
)

483 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

485 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


487 extern int 
	$fchown
 (int 
__fd
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
) 
__THROW
 
__wur
;

492 extern int 
	$lchown
 (const char *
__file
, 
__uid_t
 
__owner
, 
__gid_t
 
__group
)

493 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

497 #ifdef 
__USE_ATFILE


500 extern int 
	$fchownat
 (int 
__fd
, const char *
__file
, 
__uid_t
 
__owner
,

501 
__gid_t
 
__group
, int 
__flag
)

502 
__THROW
 
	`__nonnull
 ((2)) 
__wur
;

506 extern int 
	$chdir
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

508 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


510 extern int 
	$fchdir
 (int 
__fd
) 
__THROW
 
__wur
;

520 extern char *
	$getcwd
 (char *
__buf
, 
size_t
 
__size
) 
__THROW
 
__wur


521 
	`__attr_access
 ((
__write_only__
, 1, 2));

523 #ifdef 
__USE_GNU


527 extern char *
	$get_current_dir_name
 (void) 
__THROW
;

530 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

531 || 
defined
 
__USE_MISC


535 extern char *
	$getwd
 (char *
__buf
)

536 
__THROW
 
	`__nonnull
 ((1)) 
__attribute_deprecated__
 
__wur


537 
	`__attr_access
 ((
__write_only__
, 1));

542 extern int 
	$dup
 (int 
__fd
) 
__THROW
 
__wur
;

545 extern int 
	$dup2
 (int 
__fd
, int 
__fd2
) 
__THROW
;

547 #ifdef 
__USE_GNU


550 extern int 
	$dup3
 (int 
__fd
, int 
__fd2
, int 
__flags
) 
__THROW
;

554 extern char **
__environ
;

555 #ifdef 
__USE_GNU


556 extern char **
environ
;

562 extern int 
	$execve
 (const char *
__path
, char *const 
__argv
[],

563 char *const 
__envp
[]) 
__THROW
 
	`__nonnull
 ((1, 2));

565 #ifdef 
__USE_XOPEN2K8


568 extern int 
	$fexecve
 (int 
__fd
, char *const 
__argv
[], char *const 
__envp
[])

569 
__THROW
 
	`__nonnull
 ((2));

574 extern int 
	$execv
 (const char *
__path
, char *const 
__argv
[])

575 
__THROW
 
	`__nonnull
 ((1, 2));

579 extern int 
	$execle
 (const char *
__path
, const char *
__arg
, ...)

580 
__THROW
 
	`__nonnull
 ((1, 2));

584 extern int 
	$execl
 (const char *
__path
, const char *
__arg
, ...)

585 
__THROW
 
	`__nonnull
 ((1, 2));

589 extern int 
	$execvp
 (const char *
__file
, char *const 
__argv
[])

590 
__THROW
 
	`__nonnull
 ((1, 2));

595 extern int 
	$execlp
 (const char *
__file
, const char *
__arg
, ...)

596 
__THROW
 
	`__nonnull
 ((1, 2));

598 #ifdef 
__USE_GNU


601 extern int 
	$execvpe
 (const char *
__file
, char *const 
__argv
[],

602 char *const 
__envp
[])

603 
__THROW
 
	`__nonnull
 ((1, 2));

607 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


609 extern int 
	$nice
 (int 
__inc
) 
__THROW
 
__wur
;

614 extern void 
	$_exit
 (int 
__status
) 
	`__attribute__
 ((
__noreturn__
));

620 #include 
	~<bits/confname.h
>

623 extern long int 
	$pathconf
 (const char *
__path
, int 
__name
)

624 
__THROW
 
	`__nonnull
 ((1));

627 extern long int 
	$fpathconf
 (int 
__fd
, int 
__name
) 
__THROW
;

630 extern long int 
	$sysconf
 (int 
__name
) 
__THROW
;

632 #ifdef 
__USE_POSIX2


634 extern 
size_t
 
	$confstr
 (int 
__name
, char *
__buf
, 
size_t
 
__len
) 
__THROW


635 
	`__attr_access
 ((
__write_only__
, 2, 3));

640 extern 
__pid_t
 
	$getpid
 (void) 
__THROW
;

643 extern 
__pid_t
 
	$getppid
 (void) 
__THROW
;

646 extern 
__pid_t
 
	$getpgrp
 (void) 
__THROW
;

649 extern 
__pid_t
 
	$__getpgid
 (
__pid_t
 
__pid
) 
__THROW
;

650 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


651 extern 
__pid_t
 
	$getpgid
 (
__pid_t
 
__pid
) 
__THROW
;

658 extern int 
	$setpgid
 (
__pid_t
 
__pid
, __pid_t 
__pgid
) 
__THROW
;

660 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED


672 extern int 
	$setpgrp
 (void) 
__THROW
;

679 extern 
__pid_t
 
	$setsid
 (void) 
__THROW
;

681 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


683 extern 
__pid_t
 
	$getsid
 (
__pid_t
 
__pid
) 
__THROW
;

687 extern 
__uid_t
 
	$getuid
 (void) 
__THROW
;

690 extern 
__uid_t
 
	$geteuid
 (void) 
__THROW
;

693 extern 
__gid_t
 
	$getgid
 (void) 
__THROW
;

696 extern 
__gid_t
 
	$getegid
 (void) 
__THROW
;

701 extern int 
	$getgroups
 (int 
__size
, 
__gid_t
 
__list
[]) 
__THROW
 
__wur


702 
	`__attr_access
 ((
__write_only__
, 2, 1));

703 #ifdef 
__USE_GNU


705 extern int 
	$group_member
 (
__gid_t
 
__gid
) 
__THROW
;

712 extern int 
	$setuid
 (
__uid_t
 
__uid
) 
__THROW
 
__wur
;

714 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED


717 extern int 
	$setreuid
 (
__uid_t
 
__ruid
, __uid_t 
__euid
) 
__THROW
 
__wur
;

720 #ifdef 
__USE_XOPEN2K


722 extern int 
	$seteuid
 (
__uid_t
 
__uid
) 
__THROW
 
__wur
;

729 extern int 
	$setgid
 (
__gid_t
 
__gid
) 
__THROW
 
__wur
;

731 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED


734 extern int 
	$setregid
 (
__gid_t
 
__rgid
, __gid_t 
__egid
) 
__THROW
 
__wur
;

737 #ifdef 
__USE_XOPEN2K


739 extern int 
	$setegid
 (
__gid_t
 
__gid
) 
__THROW
 
__wur
;

742 #ifdef 
__USE_GNU


745 extern int 
	$getresuid
 (
__uid_t
 *
__ruid
, __uid_t *
__euid
, __uid_t *
__suid
)

746 
__THROW
;

750 extern int 
	$getresgid
 (
__gid_t
 *
__rgid
, __gid_t *
__egid
, __gid_t *
__sgid
)

751 
__THROW
;

755 extern int 
	$setresuid
 (
__uid_t
 
__ruid
, __uid_t 
__euid
, __uid_t 
__suid
)

756 
__THROW
 
__wur
;

760 extern int 
	$setresgid
 (
__gid_t
 
__rgid
, __gid_t 
__egid
, __gid_t 
__sgid
)

761 
__THROW
 
__wur
;

768 extern 
__pid_t
 
	$fork
 (void) 
__THROWNL
;

770 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K8
) \

771 || 
defined
 
__USE_MISC


776 extern 
__pid_t
 
	$vfork
 (void) 
__THROW
;

782 extern char *
	$ttyname
 (int 
__fd
) 
__THROW
;

786 extern int 
	$ttyname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
)

787 
__THROW
 
	`__nonnull
 ((2)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

791 extern int 
	$isatty
 (int 
__fd
) 
__THROW
;

793 #ifdef 
__USE_MISC


796 extern int 
	$ttyslot
 (void) 
__THROW
;

801 extern int 
	$link
 (const char *
__from
, const char *
__to
)

802 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

804 #ifdef 
__USE_ATFILE


807 extern int 
	$linkat
 (int 
__fromfd
, const char *
__from
, int 
__tofd
,

808 const char *
__to
, int 
__flags
)

809 
__THROW
 
	`__nonnull
 ((2, 4)) 
__wur
;

812 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


814 extern int 
	$symlink
 (const char *
__from
, const char *
__to
)

815 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
;

820 extern 
ssize_t
 
	$readlink
 (const char *
__restrict
 
__path
,

821 char *
__restrict
 
__buf
, 
size_t
 
__len
)

822 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

826 #ifdef 
__USE_ATFILE


828 extern int 
	$symlinkat
 (const char *
__from
, int 
__tofd
,

829 const char *
__to
) 
__THROW
 
	`__nonnull
 ((1, 3)) 
__wur
;

832 extern 
ssize_t
 
	$readlinkat
 (int 
__fd
, const char *
__restrict
 
__path
,

833 char *
__restrict
 
__buf
, 
size_t
 
__len
)

834 
__THROW
 
	`__nonnull
 ((2, 3)) 
__wur
 
	`__attr_access
 ((
__read_only__
, 3, 4));

838 extern int 
	$unlink
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

840 #ifdef 
__USE_ATFILE


842 extern int 
	$unlinkat
 (int 
__fd
, const char *
__name
, int 
__flag
)

843 
__THROW
 
	`__nonnull
 ((2));

847 extern int 
	$rmdir
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1));

851 extern 
__pid_t
 
	$tcgetpgrp
 (int 
__fd
) 
__THROW
;

854 extern int 
	$tcsetpgrp
 (int 
__fd
, 
__pid_t
 
__pgrp_id
) 
__THROW
;

861 extern char *
	`getlogin
 (void);

862 #ifdef 
__USE_POSIX199506


869 extern int 
	$getlogin_r
 (char *
__name
, 
size_t
 
__name_len
) 
	`__nonnull
 ((1))

870 
	`__attr_access
 ((
__write_only__
, 1, 2));

873 #ifdef 
__USE_MISC


875 extern int 
	$setlogin
 (const char *
__name
) 
__THROW
 
	`__nonnull
 ((1));

879 #ifdef 
__USE_POSIX2


883 #include 
	~<bits/getopt_posix.h
>

887 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


891 extern int 
	$gethostname
 (char *
__name
, 
size_t
 
__len
) 
__THROW
 
	`__nonnull
 ((1))

892 
	`__attr_access
 ((
__write_only__
, 1, 2));

896 #if 
defined
 
__USE_MISC


899 extern int 
	$sethostname
 (const char *
__name
, 
size_t
 
__len
)

900 
__THROW
 
	`__nonnull
 ((1)) 
__wur
 
	`__attr_access
 ((
__read_only__
, 1, 2));

904 extern int 
	$sethostid
 (long int 
__id
) 
__THROW
 
__wur
;

910 extern int 
	$getdomainname
 (char *
__name
, 
size_t
 
__len
)

911 
__THROW
 
	`__nonnull
 ((1)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

912 extern int 
	$setdomainname
 (const char *
__name
, 
size_t
 
__len
)

913 
__THROW
 
	`__nonnull
 ((1)) 
__wur
 
	`__attr_access
 ((
__read_only__
, 1, 2));

918 extern int 
	$vhangup
 (void) 
__THROW
;

921 extern int 
	$revoke
 (const char *
__file
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

929 extern int 
	$profil
 (unsigned short int *
__sample_buffer
, 
size_t
 
__size
,

930 
size_t
 
__offset
, unsigned int 
__scale
)

931 
__THROW
 
	`__nonnull
 ((1));

937 extern int 
	$acct
 (const char *
__name
) 
__THROW
;

941 extern char *
	$getusershell
 (void) 
__THROW
;

942 extern void 
	$endusershell
 (void) 
__THROW
;

943 extern void 
	$setusershell
 (void) 
__THROW
;

949 extern int 
	$daemon
 (int 
__nochdir
, int 
__noclose
) 
__THROW
 
__wur
;

953 #if 
defined
 
__USE_MISC
 || (defined 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

956 extern int 
	$chroot
 (const char *
__path
) 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

960 extern char *
	$getpass
 (const char *
__prompt
) 
	`__nonnull
 ((1));

968 extern int 
	`fsync
 (int 
__fd
);

971 #ifdef 
__USE_GNU


974 extern int 
	$syncfs
 (int 
__fd
) 
__THROW
;

978 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED


981 extern long int 
	`gethostid
 (void);

984 extern void 
	$sync
 (void) 
__THROW
;

987 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K


990 extern int 
	$getpagesize
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

995 extern int 
	$getdtablesize
 (void) 
__THROW
;

1001 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


1004 #ifndef 
__USE_FILE_OFFSET64


1005 extern int 
	$truncate
 (const char *
__file
, 
__off_t
 
__length
)

1006 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

1008 #ifdef 
__REDIRECT_NTH


1009 extern int 
	`__REDIRECT_NTH
 (
truncate
,

1010 (const char *
__file
, 
__off64_t
 
__length
),

1011 
truncate64
) 
	`__nonnull
 ((1)) 
__wur
;

1013 #define 
	#truncate
 
truncate64


	)

1016 #ifdef 
__USE_LARGEFILE64


1017 extern int 
	$truncate64
 (const char *
__file
, 
__off64_t
 
__length
)

1018 
__THROW
 
	`__nonnull
 ((1)) 
__wur
;

1023 #if 
defined
 
__USE_POSIX199309
 \

1024 || 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


1027 #ifndef 
__USE_FILE_OFFSET64


1028 extern int 
	$ftruncate
 (int 
__fd
, 
__off_t
 
__length
) 
__THROW
 
__wur
;

1030 #ifdef 
__REDIRECT_NTH


1031 extern int 
	`__REDIRECT_NTH
 (
ftruncate
, (int 
__fd
, 
__off64_t
 
__length
),

1032 
ftruncate64
) 
__wur
;

1034 #define 
	#ftruncate
 
ftruncate64


	)

1037 #ifdef 
__USE_LARGEFILE64


1038 extern int 
	$ftruncate64
 (int 
__fd
, 
__off64_t
 
__length
) 
__THROW
 
__wur
;

1044 #if (
defined
 
__USE_XOPEN_EXTENDED
 && !defined 
__USE_XOPEN2K
) \

1045 || 
defined
 
__USE_MISC


1049 extern int 
	$brk
 (void *
__addr
) 
__THROW
 
__wur
;

1055 extern void *
	$sbrk
 (
intptr_t
 
__delta
) 
__THROW
;

1059 #ifdef 
__USE_MISC


1070 extern long int 
	$syscall
 (long int 
__sysno
, ...) 
__THROW
;

1075 #if (
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED
) && !defined 
F_LOCK


1087 #define 
	#F_ULOCK
 0

	)

1088 #define 
	#F_LOCK
 1

	)

1089 #define 
	#F_TLOCK
 2

	)

1090 #define 
	#F_TEST
 3

	)

1092 #ifndef 
__USE_FILE_OFFSET64


1093 extern int 
	$lockf
 (int 
__fd
, int 
__cmd
, 
__off_t
 
__len
) 
__wur
;

1095 #ifdef 
__REDIRECT


1096 extern int 
	`__REDIRECT
 (
lockf
, (int 
__fd
, int 
__cmd
, 
__off64_t
 
__len
),

1097 
lockf64
) 
__wur
;

1099 #define 
	#lockf
 
lockf64


	)

1102 #ifdef 
__USE_LARGEFILE64


1103 extern int 
	$lockf64
 (int 
__fd
, int 
__cmd
, 
__off64_t
 
__len
) 
__wur
;

1108 #ifdef 
__USE_GNU


1113 #define 
	#TEMP_FAILURE_RETRY
(
expression
) \

1114 (
__extension__
 \

1115 ({ long int 
__result
; \

1116 do 
__result
 = (long int) (
expression
); \

1117 while (
__result
 == -1L && 
errno
 == 
EINTR
); \

1118 
__result
; 
	}
}))

	)

1121 
ssize_t
 
copy_file_range
 (int 
__infd
, 
__off64_t
 *
__pinoff
,

1122 int 
__outfd
, 
__off64_t
 *
__poutoff
,

1123 
size_t
 
__length
, unsigned int 
__flags
);

1126 #if 
defined
 
__USE_POSIX199309
 || defined 
__USE_UNIX98


1129 extern int 
fdatasync
 (int 
__fildes
);

1132 #ifdef 
__USE_MISC


1138 extern char *
	$crypt
 (const char *
__key
, const char *
__salt
)

1139 
__THROW
 
	`__nonnull
 ((1, 2));

1142 #ifdef 
__USE_XOPEN


1147 extern void 
	$swab
 (const void *
__restrict
 
__from
, void *__restrict 
__to
,

1148 
ssize_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1, 2))

1149 
	`__attr_access
 ((
__read_only__
, 1, 3))

1150 
	`__attr_access
 ((
__write_only__
, 2, 3));

1157 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K


1159 extern char *
	$ctermid
 (char *
__s
) 
__THROW
;

1162 extern char *
	`cuserid
 (char *
__s
);

1168 #if 
defined
 
__USE_UNIX98
 && !defined 
__USE_XOPEN2K


1169 extern int 
	`pthread_atfork
 (void (*
__prepare
) (void),

1170 void (*
__parent
) (void),

1171 void (*
__child
) (void)) 
__THROW
;

1174 #ifdef 
__USE_MISC


1177 int 
	$getentropy
 (void *
__buffer
, 
size_t
 
__length
) 
__wur


1178 
	`__attr_access
 ((
__write_only__
, 1, 2));

1182 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


1183 #include 
	~<bits/unistd.h
>

1187 #include 
	~<bits/unistd_ext.h
>

1189 
__END_DECLS


	@/usr/include/alloca.h

18 #ifndef 
_ALLOCA_H


19 #define 
	#_ALLOCA_H
 1

	)

21 #include 
	~<features.h
>

23 #define 
	#__need_size_t


	)

24 #include 
	~<stddef.h
>

26 
	g__BEGIN_DECLS


29 #undef 
alloca


32 extern void *
	$alloca
 (
size_t
 
__size
) 
__THROW
;

34 #ifdef 
__GNUC__


35 #define 
	#alloca
(
size
) 
	`__builtin_alloca
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

19 #ifndef 
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 #define 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 #define 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 #define 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 #define 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 #define 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 #define 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 #define 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 #define 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 #define 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 #define 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 #define 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 #define 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 #define 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 #define 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 #define 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 #define 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 #define 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 #define 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 #define 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 #define 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 #define 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 #define 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 #define 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 #define 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 #define 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 #define 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 #define 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 #define 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 #define 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 #define 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 #define 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 #define 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 #define 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 #define 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 #define 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 #define 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 #define 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 #define 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 #define 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 #define 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 #define 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 #define 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 #define 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 #define 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 #define 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 #define 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 #define 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 #define 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 #define 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 #define 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 #define 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 #define 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 #define 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 #define 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 #define 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 #define 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 #define 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 #define 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 #define 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 #define 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 #define 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 #define 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 #define 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 #define 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 #define 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 #define 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 #define 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 #define 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 #define 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 #define 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 #define 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 #define 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 #define 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 #define 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 #define 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 #define 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 #define 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 #define 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 #define 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 #define 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 #define 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 #define 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 #define 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 #define 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 #define 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 #define 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 #define 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 #define 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 #define 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 #define 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 #define 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 #define 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 #define 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 #define 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 #define 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 #define 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 #define 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 #define 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 #define 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 #define 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 #define 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 #define 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 #define 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 #define 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 #define 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 #define 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 #define 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 #define 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 #define 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 #define 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 #define 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 #define 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 #define 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 #define 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 #define 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 #define 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 #define 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 #define 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 #define 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 #define 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 #define 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 #define 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 #define 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 #define 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 #define 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 #define 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 #define 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 #define 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 #define 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 #define 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 #define 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 #define 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 #define 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 #define 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 #define 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 #define 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 #define 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 #define 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 #define 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 #define 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 #define 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 #define 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 #define 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 #define 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 #define 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 #define 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 #define 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 #define 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 #define 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 #define 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 #define 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 #define 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 #define 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 #define 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 #define 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 #define 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 #define 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 #define 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 #define 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 #define 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 #define 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 #define 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 #define 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 #define 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 #define 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 #define 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 #define 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 #define 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 #define 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 #define 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 #define 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 #define 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 #define 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 #define 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 #define 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 #define 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 #define 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 #define 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 #define 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 #define 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 #define 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 #define 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 #define 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 #define 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 #define 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 #define 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 #define 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 #define 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 #define 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 #define 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 #define 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 #define 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 #define 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 #define 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 #define 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 #define 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 #define 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 #define 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 #define 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 #define 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 #define 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 #define 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 #define 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 #define 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 #define 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 #define 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 #define 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 #define 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 #define 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 #define 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 #define 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 #define 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 #define 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 #define 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 #define 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 #define 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 #define 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 #define 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 #define 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 #define 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 #define 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 #define 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 #define 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 #define 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 #define 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 #define 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 #define 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 #define 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 #define 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 #define 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 #define 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 #define 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 #define 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 #define 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 #define 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 #define 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 #define 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 #define 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 #define 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 #define 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 #define 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 #define 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 #define 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 #define 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 #define 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 #define 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 #define 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 #define 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 #define 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 #define 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 #define 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 #define 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 #define 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 #define 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 #define 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 #define 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 #define 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 #define 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 #define 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 #define 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 #define 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 #define 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 #define 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 #define 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 #define 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 #define 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 #define 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 #define 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 #define 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 #define 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 #define 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 #define 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 #define 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 #define 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 #define 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 #define 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 #define 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 #define 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 #define 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 #define 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 #define 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 #define 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 #define 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 #define 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 #define 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 #define 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 #define 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 #define 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 #define 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 #define 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 #define 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 #define 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 #define 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 #define 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 #define 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 #define 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 #define 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 #define 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 #define 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 #define 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 #define 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 #define 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 #define 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 #define 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/endian.h

19 #ifndef 
_BITS_ENDIAN_H


20 #define 
	#_BITS_ENDIAN_H
 1

	)

30 #define 
	#__LITTLE_ENDIAN
 1234

	)

31 #define 
	#__BIG_ENDIAN
 4321

	)

32 #define 
	#__PDP_ENDIAN
 3412

	)

35 #include 
	~<bits/endianness.h
>

39 #ifndef 
__FLOAT_WORD_ORDER


40 #define 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

43 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


44 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) LO, 
	)
HI

45 #elif 
__BYTE_ORDER
 == 
__BIG_ENDIAN


46 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) HI, 
	)
LO

	@/usr/include/bits/environments.h

18 #ifndef 
_UNISTD_H


22 #include 
	~<bits/wordsize.h
>

42 #if 
__WORDSIZE
 == 64

56 #define 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 #define 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 #define 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 #define 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 #define 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 #define 
	#_XBS5_LP64_OFF64
 1

	)

69 #define 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 #define 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 #define 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #ifndef 
__x86_64__


75 #define 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 #define 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 #define 
	#_XBS5_ILP32_OFF32
 1

	)

95 #define 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 #define 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


98 #define 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 #define 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 #define 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 #define 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 #define 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 #define 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifndef 
_BITS_ERRNO_H


20 #define 
	#_BITS_ERRNO_H
 1

	)

22 #if !
defined
 
_ERRNO_H


26 #include 
	~<linux/errno.h
>

29 #ifndef 
ENOTSUP


30 #define 
	#ENOTSUP
 
EOPNOTSUPP


	)

33 #ifndef 
ECANCELED


34 #define 
	#ECANCELED
 125

	)

37 #ifndef 
EOWNERDEAD


38 #define 
	#EOWNERDEAD
 130

	)

41 #ifndef 
ENOTRECOVERABLE


42 #define 
	#ENOTRECOVERABLE
 131

	)

45 #ifndef 
ERFKILL


46 #define 
	#ERFKILL
 132

	)

49 #ifndef 
EHWPOISON


50 #define 
	#EHWPOISON
 133

	)

	@/usr/include/bits/fcntl.h

19 #ifndef 
_FCNTL_H


23 #ifdef 
__x86_64__


24 #define 
	#__O_LARGEFILE
 0

	)

27 #ifdef 
__x86_64__


29 #define 
	#F_GETLK64
 5

	)

30 #define 
	#F_SETLK64
 6

	)

31 #define 
	#F_SETLKW64
 7

	)

35 struct 
	sflock


37 short int 
	ml_type
;

38 short int 
	ml_whence
;

39 #ifndef 
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_start
;

41 
__off_t
 
	ml_len
;

43 
__off64_t
 
	ml_start
;

44 
__off64_t
 
	ml_len
;

46 
__pid_t
 
	ml_pid
;

49 #ifdef 
__USE_LARGEFILE64


50 struct 
	sflock64


52 short int 
	ml_type
;

53 short int 
	ml_whence
;

54 
__off64_t
 
	ml_start
;

55 
__off64_t
 
	ml_len
;

56 
__pid_t
 
	ml_pid
;

61 #include 
	~<bits/fcntl-linux.h
>

	@/usr/include/bits/fcntl2.h

19 #ifndef 
_FCNTL_H


25 #ifndef 
__USE_FILE_OFFSET64


26 extern int 
	$__open_2
 (const char *
__path
, int 
__oflag
) 
	`__nonnull
 ((1));

27 extern int 
	`__REDIRECT
 (
__open_alias
, (const char *
__path
, int 
__oflag
, ...),

28 
open
) 
	`__nonnull
 ((1));

30 extern int 
	`__REDIRECT
 (
__open_2
, (const char *
__path
, int 
__oflag
),

31 
__open64_2
) 
	`__nonnull
 ((1));

32 extern int 
	`__REDIRECT
 (
__open_alias
, (const char *
__path
, int 
__oflag
, ...),

33 
open64
) 
	`__nonnull
 ((1));

35 
	`__errordecl
 (
__open_too_many_args
,

37 
	`__errordecl
 (
__open_missing_mode
,

40 
__fortify_function
 int

41 
	$open
 (const char *
__path
, int 
__oflag
, ...)

43 if (
	`__va_arg_pack_len
 () > 1)

44 
	`__open_too_many_args
 ();

46 if (
	`__builtin_constant_p
 (
__oflag
))

48 if (
	`__OPEN_NEEDS_MODE
 (
__oflag
) && 
	`__va_arg_pack_len
 () < 1)

50 
	`__open_missing_mode
 ();

51 return 
	`__open_2
 (
__path
, 
__oflag
);

53 return 
	`__open_alias
 (
__path
, 
__oflag
, 
	`__va_arg_pack
 ());

56 if (
	`__va_arg_pack_len
 () < 1)

57 return 
	`__open_2
 (
__path
, 
__oflag
);

59 return 
	`__open_alias
 (
__path
, 
__oflag
, 
	`__va_arg_pack
 ());

60 
	}
}

63 #ifdef 
__USE_LARGEFILE64


64 extern int 
	$__open64_2
 (const char *
__path
, int 
__oflag
) 
	`__nonnull
 ((1));

65 extern int 
	`__REDIRECT
 (
__open64_alias
, (const char *
__path
, int 
__oflag
,

66 ...), 
open64
) 
	`__nonnull
 ((1));

67 
	`__errordecl
 (
__open64_too_many_args
,

69 
	`__errordecl
 (
__open64_missing_mode
,

72 
__fortify_function
 int

73 
	$open64
 (const char *
__path
, int 
__oflag
, ...)

75 if (
	`__va_arg_pack_len
 () > 1)

76 
	`__open64_too_many_args
 ();

78 if (
	`__builtin_constant_p
 (
__oflag
))

80 if (
	`__OPEN_NEEDS_MODE
 (
__oflag
) && 
	`__va_arg_pack_len
 () < 1)

82 
	`__open64_missing_mode
 ();

83 return 
	`__open64_2
 (
__path
, 
__oflag
);

85 return 
	`__open64_alias
 (
__path
, 
__oflag
, 
	`__va_arg_pack
 ());

88 if (
	`__va_arg_pack_len
 () < 1)

89 return 
	`__open64_2
 (
__path
, 
__oflag
);

91 return 
	`__open64_alias
 (
__path
, 
__oflag
, 
	`__va_arg_pack
 ());

92 
	}
}

96 #ifdef 
__USE_ATFILE


97 #ifndef 
__USE_FILE_OFFSET64


98 extern int 
	$__openat_2
 (int 
__fd
, const char *
__path
, int 
__oflag
)

99 
	`__nonnull
 ((2));

100 extern int 
	`__REDIRECT
 (
__openat_alias
, (int 
__fd
, const char *
__path
,

101 int 
__oflag
, ...), 
openat
)

102 
	`__nonnull
 ((2));

104 extern int 
	`__REDIRECT
 (
__openat_2
, (int 
__fd
, const char *
__path
,

105 int 
__oflag
), 
__openat64_2
)

106 
	`__nonnull
 ((2));

107 extern int 
	`__REDIRECT
 (
__openat_alias
, (int 
__fd
, const char *
__path
,

108 int 
__oflag
, ...), 
openat64
)

109 
	`__nonnull
 ((2));

111 
	`__errordecl
 (
__openat_too_many_args
,

113 
	`__errordecl
 (
__openat_missing_mode
,

116 
__fortify_function
 int

117 
	$openat
 (int 
__fd
, const char *
__path
, int 
__oflag
, ...)

119 if (
	`__va_arg_pack_len
 () > 1)

120 
	`__openat_too_many_args
 ();

122 if (
	`__builtin_constant_p
 (
__oflag
))

124 if (
	`__OPEN_NEEDS_MODE
 (
__oflag
) && 
	`__va_arg_pack_len
 () < 1)

126 
	`__openat_missing_mode
 ();

127 return 
	`__openat_2
 (
__fd
, 
__path
, 
__oflag
);

129 return 
	`__openat_alias
 (
__fd
, 
__path
, 
__oflag
, 
	`__va_arg_pack
 ());

132 if (
	`__va_arg_pack_len
 () < 1)

133 return 
	`__openat_2
 (
__fd
, 
__path
, 
__oflag
);

135 return 
	`__openat_alias
 (
__fd
, 
__path
, 
__oflag
, 
	`__va_arg_pack
 ());

136 
	}
}

139 #ifdef 
__USE_LARGEFILE64


140 extern int 
	$__openat64_2
 (int 
__fd
, const char *
__path
, int 
__oflag
)

141 
	`__nonnull
 ((2));

142 extern int 
	`__REDIRECT
 (
__openat64_alias
, (int 
__fd
, const char *
__path
,

143 int 
__oflag
, ...), 
openat64
)

144 
	`__nonnull
 ((2));

145 
	`__errordecl
 (
__openat64_too_many_args
,

147 
	`__errordecl
 (
__openat64_missing_mode
,

150 
__fortify_function
 int

151 
	$openat64
 (int 
__fd
, const char *
__path
, int 
__oflag
, ...)

153 if (
	`__va_arg_pack_len
 () > 1)

154 
	`__openat64_too_many_args
 ();

156 if (
	`__builtin_constant_p
 (
__oflag
))

158 if (
	`__OPEN_NEEDS_MODE
 (
__oflag
) && 
	`__va_arg_pack_len
 () < 1)

160 
	`__openat64_missing_mode
 ();

161 return 
	`__openat64_2
 (
__fd
, 
__path
, 
__oflag
);

163 return 
	`__openat64_alias
 (
__fd
, 
__path
, 
__oflag
, 
	`__va_arg_pack
 ());

166 if (
	`__va_arg_pack_len
 () < 1)

167 return 
	`__openat64_2
 (
__fd
, 
__path
, 
__oflag
);

169 return 
	`__openat64_alias
 (
__fd
, 
__path
, 
__oflag
, 
	`__va_arg_pack
 ());

170 
	}
}

	@/usr/include/bits/floatn.h

19 #ifndef 
_BITS_FLOATN_H


20 #define 
	#_BITS_FLOATN_H


	)

22 #include 
	~<features.h
>

29 #if (
defined
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
defined
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5) : 
	$__GNUC_PREREQ
 (4, 4)))

32 #define 
	#__HAVE_FLOAT128
 1

	)

34 #define 
	#__HAVE_FLOAT128
 0

	)

39 #if 
__HAVE_FLOAT128


40 #define 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 #define 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

48 #define 
	#__HAVE_FLOAT64X
 1

	)

54 #define 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

56 #ifndef 
__ASSEMBLER__


60 #if 
__HAVE_FLOAT128


61 #if !
	`__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


63 #define 
	#__f128
(
x
) x##
q


	)

65 #define 
	#__f128
(
x
) x##
f128


	)

70 #if 
__HAVE_FLOAT128


71 #if !
	`__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


74 typedef 
_Complex
 float 
	t__cfloat128
 
	t__attribute__
 ((
	t__mode__
 (
	t__TC__
)));

75 #define 
	#__CFLOAT128
 
__cfloat128


	)

77 #define 
	#__CFLOAT128
 
_Complex
 
_Float128


	)

82 #if 
__HAVE_FLOAT128


85 #if !
	`__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


86 typedef 
__float128
 
	t_Float128
;

90 #if !
	`__GNUC_PREREQ
 (7, 0)

91 #define 
	#__builtin_huge_valf128
() ((
_Float128
) 
	`__builtin_huge_val
 ())

	)

99 #if !
	`__GNUC_PREREQ
 (7, 0)

100 #define 
	#__builtin_copysignf128
 
__builtin_copysignq


	)

101 #define 
	#__builtin_fabsf128
 
__builtin_fabsq


	)

102 #define 
	#__builtin_inff128
() ((
_Float128
) 
	`__builtin_inf
 ())

	)

103 #define 
	#__builtin_nanf128
(
x
) ((
_Float128
) 
	`__builtin_nan
 (x))

	)

104 #define 
	#__builtin_nansf128
(
x
) ((
_Float128
) 
	`__builtin_nans
 (x))

	)

111 #if !
	`__GNUC_PREREQ
 (6, 0)

112 #define 
	#__builtin_signbitf128
 
__signbitf128


	)

119 #include 
	~<bits/floatn-common.h
>

	@/usr/include/bits/getopt_posix.h

20 #ifndef 
_GETOPT_POSIX_H


21 #define 
	#_GETOPT_POSIX_H
 1

	)

23 #if !
defined
 
_UNISTD_H
 && !defined 
_STDIO_H


27 #include 
	~<bits/getopt_core.h
>

29 
	g__BEGIN_DECLS


31 #if 
defined
 
__USE_POSIX2
 && !defined 
__USE_POSIX_IMPLICITLY
 \

32 && !
defined
 
	g__USE_GNU
 && !defined 
	g_GETOPT_H


37 #ifdef 
__REDIRECT


38 extern int 
__REDIRECT_NTH
 (
getopt
, (int 
___argc
, char *const *
___argv
,

39 const char *
__shortopts
),

40 
__posix_getopt
);

42 extern int 
	$__posix_getopt
 (int 
___argc
, char *const *
___argv
,

43 const char *
__shortopts
)

44 
__THROW
 
	`__nonnull
 ((2, 3));

45 #define 
	#getopt
 
__posix_getopt


	)

49 
__END_DECLS


	@/usr/include/bits/ioctl-types.h

19 #ifndef 
_SYS_IOCTL_H


24 #include 
	~<asm/ioctls.h
>

27 struct 
	swinsize


29 unsigned short int 
	mws_row
;

30 unsigned short int 
	mws_col
;

31 unsigned short int 
	mws_xpixel
;

32 unsigned short int 
	mws_ypixel
;

35 #define 
	#NCC
 8

	)

36 struct 
	stermio


38 unsigned short int 
	mc_iflag
;

39 unsigned short int 
	mc_oflag
;

40 unsigned short int 
	mc_cflag
;

41 unsigned short int 
	mc_lflag
;

42 unsigned char 
	mc_line
;

43 unsigned char 
	mc_cc
[
NCC
];

47 #define 
	#TIOCM_LE
 0x001

	)

48 #define 
	#TIOCM_DTR
 0x002

	)

49 #define 
	#TIOCM_RTS
 0x004

	)

50 #define 
	#TIOCM_ST
 0x008

	)

51 #define 
	#TIOCM_SR
 0x010

	)

52 #define 
	#TIOCM_CTS
 0x020

	)

53 #define 
	#TIOCM_CAR
 0x040

	)

54 #define 
	#TIOCM_RNG
 0x080

	)

55 #define 
	#TIOCM_DSR
 0x100

	)

56 #define 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 #define 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 #define 
	#N_TTY
 0

	)

63 #define 
	#N_SLIP
 1

	)

64 #define 
	#N_MOUSE
 2

	)

65 #define 
	#N_PPP
 3

	)

66 #define 
	#N_STRIP
 4

	)

67 #define 
	#N_AX25
 5

	)

68 #define 
	#N_X25
 6

	)

69 #define 
	#N_6PACK
 7

	)

70 #define 
	#N_MASC
 8

	)

71 #define 
	#N_R3964
 9

	)

72 #define 
	#N_PROFIBUS_FDL
 10

	)

73 #define 
	#N_IRDA
 11

	)

74 #define 
	#N_SMSBLOCK
 12

	)

75 #define 
	#N_HDLC
 13

	)

76 #define 
	#N_SYNC_PPP
 14

	)

77 #define 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #ifndef 
_SYS_IOCTL_H


23 #include 
	~<asm/ioctls.h
>

26 #define 
	#SIOCADDRT
 0x890B

	)

27 #define 
	#SIOCDELRT
 0x890C

	)

28 #define 
	#SIOCRTMSG
 0x890D

	)

31 #define 
	#SIOCGIFNAME
 0x8910

	)

32 #define 
	#SIOCSIFLINK
 0x8911

	)

33 #define 
	#SIOCGIFCONF
 0x8912

	)

34 #define 
	#SIOCGIFFLAGS
 0x8913

	)

35 #define 
	#SIOCSIFFLAGS
 0x8914

	)

36 #define 
	#SIOCGIFADDR
 0x8915

	)

37 #define 
	#SIOCSIFADDR
 0x8916

	)

38 #define 
	#SIOCGIFDSTADDR
 0x8917

	)

39 #define 
	#SIOCSIFDSTADDR
 0x8918

	)

40 #define 
	#SIOCGIFBRDADDR
 0x8919

	)

41 #define 
	#SIOCSIFBRDADDR
 0x891a

	)

42 #define 
	#SIOCGIFNETMASK
 0x891b

	)

43 #define 
	#SIOCSIFNETMASK
 0x891c

	)

44 #define 
	#SIOCGIFMETRIC
 0x891d

	)

45 #define 
	#SIOCSIFMETRIC
 0x891e

	)

46 #define 
	#SIOCGIFMEM
 0x891f

	)

47 #define 
	#SIOCSIFMEM
 0x8920

	)

48 #define 
	#SIOCGIFMTU
 0x8921

	)

49 #define 
	#SIOCSIFMTU
 0x8922

	)

50 #define 
	#SIOCSIFNAME
 0x8923

	)

51 #define 
	#SIOCSIFHWADDR
 0x8924

	)

52 #define 
	#SIOCGIFENCAP
 0x8925

	)

53 #define 
	#SIOCSIFENCAP
 0x8926

	)

54 #define 
	#SIOCGIFHWADDR
 0x8927

	)

55 #define 
	#SIOCGIFSLAVE
 0x8929

	)

56 #define 
	#SIOCSIFSLAVE
 0x8930

	)

57 #define 
	#SIOCADDMULTI
 0x8931

	)

58 #define 
	#SIOCDELMULTI
 0x8932

	)

59 #define 
	#SIOCGIFINDEX
 0x8933

	)

60 #define 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 #define 
	#SIOCSIFPFLAGS
 0x8934

	)

62 #define 
	#SIOCGIFPFLAGS
 0x8935

	)

63 #define 
	#SIOCDIFADDR
 0x8936

	)

64 #define 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 #define 
	#SIOCGIFCOUNT
 0x8938

	)

67 #define 
	#SIOCGIFBR
 0x8940

	)

68 #define 
	#SIOCSIFBR
 0x8941

	)

70 #define 
	#SIOCGIFTXQLEN
 0x8942

	)

71 #define 
	#SIOCSIFTXQLEN
 0x8943

	)

76 #define 
	#SIOCDARP
 0x8953

	)

77 #define 
	#SIOCGARP
 0x8954

	)

78 #define 
	#SIOCSARP
 0x8955

	)

81 #define 
	#SIOCDRARP
 0x8960

	)

82 #define 
	#SIOCGRARP
 0x8961

	)

83 #define 
	#SIOCSRARP
 0x8962

	)

87 #define 
	#SIOCGIFMAP
 0x8970

	)

88 #define 
	#SIOCSIFMAP
 0x8971

	)

92 #define 
	#SIOCADDDLCI
 0x8980

	)

93 #define 
	#SIOCDELDLCI
 0x8981

	)

102 #define 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 #define 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/libc-header-start.h

27 #ifndef 
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #undef 
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 #include 
	~<features.h
>

37 #undef 
__GLIBC_USE_LIB_EXT2


38 #if (
defined
 
__USE_GNU
 \

39 || (
defined
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 #define 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 #define 
	#__GLIBC_USE_LIB_EXT2
 0

	)

49 #undef 
__GLIBC_USE_IEC_60559_BFP_EXT


50 #if 
defined
 
__USE_GNU
 || defined 
__STDC_WANT_IEC_60559_BFP_EXT__


51 #define 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

53 #define 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

55 #undef 
__GLIBC_USE_IEC_60559_BFP_EXT_C2X


56 #if 
__GLIBC_USE
 (
IEC_60559_BFP_EXT
) || __GLIBC_USE (
ISOC2X
)

57 #define 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 1

	)

59 #define 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 0

	)

66 #undef 
__GLIBC_USE_IEC_60559_FUNCS_EXT


67 #if 
defined
 
__USE_GNU
 || defined 
__STDC_WANT_IEC_60559_FUNCS_EXT__


68 #define 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

70 #define 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

72 #undef 
__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X


73 #if 
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
) || __GLIBC_USE (
ISOC2X
)

74 #define 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 1

	)

76 #define 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 0

	)

81 #undef 
__GLIBC_USE_IEC_60559_TYPES_EXT


82 #if 
defined
 
__USE_GNU
 || defined 
__STDC_WANT_IEC_60559_TYPES_EXT__


83 #define 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

85 #define 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/posix_opt.h

19 #ifndef 
_BITS_POSIX_OPT_H


20 #define 
	#_BITS_POSIX_OPT_H
 1

	)

23 #define 
	#_POSIX_JOB_CONTROL
 1

	)

26 #define 
	#_POSIX_SAVED_IDS
 1

	)

32 #define 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

35 #define 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

38 #define 
	#_POSIX_FSYNC
 200809L

	)

41 #define 
	#_POSIX_MAPPED_FILES
 200809L

	)

44 #define 
	#_POSIX_MEMLOCK
 200809L

	)

47 #define 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

50 #define 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

53 #define 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

57 #define 
	#_POSIX_VDISABLE
 '\0'

	)

60 #define 
	#_POSIX_NO_TRUNC
 1

	)

63 #define 
	#_XOPEN_REALTIME
 1

	)

66 #define 
	#_XOPEN_REALTIME_THREADS
 1

	)

69 #define 
	#_XOPEN_SHM
 1

	)

72 #define 
	#_POSIX_THREADS
 200809L

	)

75 #define 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

76 #define 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

79 #define 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

82 #define 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

85 #define 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

88 #define 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

92 #define 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

94 #ifdef 
__USE_XOPEN2K8


96 #define 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

99 #define 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

103 #define 
	#_POSIX_SEMAPHORES
 200809L

	)

106 #define 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

109 #define 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

110 #define 
	#_POSIX_ASYNC_IO
 1

	)

112 #define 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

114 #define 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

117 #define 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

120 #define 
	#_LFS_LARGEFILE
 1

	)

121 #define 
	#_LFS64_LARGEFILE
 1

	)

122 #define 
	#_LFS64_STDIO
 1

	)

125 #define 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

128 #define 
	#_POSIX_CPUTIME
 0

	)

131 #define 
	#_POSIX_THREAD_CPUTIME
 0

	)

134 #define 
	#_POSIX_REGEXP
 1

	)

137 #define 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

140 #define 
	#_POSIX_SHELL
 1

	)

143 #define 
	#_POSIX_TIMEOUTS
 200809L

	)

146 #define 
	#_POSIX_SPIN_LOCKS
 200809L

	)

149 #define 
	#_POSIX_SPAWN
 200809L

	)

152 #define 
	#_POSIX_TIMERS
 200809L

	)

155 #define 
	#_POSIX_BARRIERS
 200809L

	)

158 #define 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

161 #define 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

164 #define 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

167 #define 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

170 #define 
	#_POSIX_ADVISORY_INFO
 200809L

	)

173 #define 
	#_POSIX_IPV6
 200809L

	)

176 #define 
	#_POSIX_RAW_SOCKETS
 200809L

	)

179 #define 
	#_POSIX2_CHAR_TERM
 200809L

	)

182 #define 
	#_POSIX_SPORADIC_SERVER
 -1

	)

183 #define 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

186 #define 
	#_POSIX_TRACE
 -1

	)

187 #define 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

188 #define 
	#_POSIX_TRACE_INHERIT
 -1

	)

189 #define 
	#_POSIX_TRACE_LOG
 -1

	)

192 #define 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

19 #ifndef 
_BITS_PTHREADTYPES_COMMON_H


20 #define 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 #include 
	~<bits/thread-shared-types.h
>

27 typedef unsigned long int 
	tpthread_t
;

34 char 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 int 
	m__align
;

36 } 
	tpthread_mutexattr_t
;

43 char 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 int 
	m__align
;

45 } 
	tpthread_condattr_t
;

49 typedef unsigned int 
	tpthread_key_t
;

53 typedef int 
	t__ONCE_ALIGNMENT
 
	tpthread_once_t
;

56 union 
	upthread_attr_t


58 char 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 long int 
	m__align
;

61 #ifndef 
__have_pthread_attr_t


62 typedef union 
pthread_attr_t
 
	tpthread_attr_t
;

63 #define 
	#__have_pthread_attr_t
 1

	)

69 struct 
__pthread_mutex_s
 
	m__data
;

70 char 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 long int 
	m__align
;

72 } 
	tpthread_mutex_t
;

77 struct 
__pthread_cond_s
 
	m__data
;

78 char 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__extension__
 long long int 
	m__align
;

80 } 
	tpthread_cond_t
;

83 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


88 struct 
__pthread_rwlock_arch_t
 
	m__data
;

89 char 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 long int 
	m__align
;

91 } 
	tpthread_rwlock_t
;

95 char 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 long int 
	m__align
;

97 } 
	tpthread_rwlockattr_t
;

101 #ifdef 
__USE_XOPEN2K


103 typedef volatile int 
	tpthread_spinlock_t
;

110 char 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 long int 
	m__align
;

112 } 
	tpthread_barrier_t
;

116 char 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 int 
	m__align
;

118 } 
	tpthread_barrierattr_t
;

	@/usr/include/bits/stat.h

18 #if !
defined
 
_SYS_STAT_H
 && !defined 
_FCNTL_H


22 #ifndef 
_BITS_STAT_H


23 #define 
	#_BITS_STAT_H
 1

	)

26 #ifndef 
__x86_64__


27 #define 
	#_STAT_VER_LINUX_OLD
 1

	)

28 #define 
	#_STAT_VER_KERNEL
 1

	)

29 #define 
	#_STAT_VER_SVR4
 2

	)

30 #define 
	#_STAT_VER_LINUX
 3

	)

33 #define 
	#_MKNOD_VER_LINUX
 1

	)

34 #define 
	#_MKNOD_VER_SVR4
 2

	)

35 #define 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 #define 
	#_STAT_VER_KERNEL
 0

	)

38 #define 
	#_STAT_VER_LINUX
 1

	)

41 #define 
	#_MKNOD_VER_LINUX
 0

	)

44 #define 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 struct 
	sstat


48 
__dev_t
 
	mst_dev
;

49 #ifndef 
__x86_64__


50 unsigned short int 
	m__pad1
;

52 #if 
defined
 
__x86_64__
 || !defined 
__USE_FILE_OFFSET64


53 
__ino_t
 
	mst_ino
;

55 
__ino_t
 
	m__st_ino
;

57 #ifndef 
__x86_64__


58 
__mode_t
 
	mst_mode
;

59 
__nlink_t
 
	mst_nlink
;

61 
__nlink_t
 
	mst_nlink
;

62 
__mode_t
 
	mst_mode
;

64 
__uid_t
 
	mst_uid
;

65 
__gid_t
 
	mst_gid
;

66 #ifdef 
__x86_64__


67 int 
	m__pad0
;

69 
__dev_t
 
	mst_rdev
;

70 #ifndef 
__x86_64__


71 unsigned short int 
	m__pad2
;

73 #if 
defined
 
__x86_64__
 || !defined 
__USE_FILE_OFFSET64


74 
__off_t
 
	mst_size
;

76 
__off64_t
 
	mst_size
;

78 
__blksize_t
 
	mst_blksize
;

79 #if 
defined
 
__x86_64__
 || !defined 
__USE_FILE_OFFSET64


80 
__blkcnt_t
 
	mst_blocks
;

82 
__blkcnt64_t
 
	mst_blocks
;

84 #ifdef 
__USE_XOPEN2K8


91 struct 
timespec
 
	mst_atim
;

92 struct 
timespec
 
	mst_mtim
;

93 struct 
timespec
 
	mst_ctim
;

94 #define 
	#st_atime
 
st_atim
.
tv_sec


	)

95 #define 
	#st_mtime
 
st_mtim
.
tv_sec


	)

96 #define 
	#st_ctime
 
st_ctim
.
tv_sec


	)

98 
__time_t
 
	mst_atime
;

99 
__syscall_ulong_t
 
	mst_atimensec
;

100 
__time_t
 
	mst_mtime
;

101 
__syscall_ulong_t
 
	mst_mtimensec
;

102 
__time_t
 
	mst_ctime
;

103 
__syscall_ulong_t
 
	mst_ctimensec
;

105 #ifdef 
__x86_64__


106 
__syscall_slong_t
 
	m__glibc_reserved
[3];

108 #ifndef 
__USE_FILE_OFFSET64


109 unsigned long int 
	m__glibc_reserved4
;

110 unsigned long int 
	m__glibc_reserved5
;

112 
__ino64_t
 
	mst_ino
;

117 #ifdef 
__USE_LARGEFILE64


119 struct 
	sstat64


121 
__dev_t
 
	mst_dev
;

122 #ifdef 
__x86_64__


123 
__ino64_t
 
	mst_ino
;

124 
__nlink_t
 
	mst_nlink
;

125 
__mode_t
 
	mst_mode
;

127 unsigned int 
	m__pad1
;

128 
__ino_t
 
	m__st_ino
;

129 
__mode_t
 
	mst_mode
;

130 
__nlink_t
 
	mst_nlink
;

132 
__uid_t
 
	mst_uid
;

133 
__gid_t
 
	mst_gid
;

134 #ifdef 
__x86_64__


135 int 
	m__pad0
;

136 
__dev_t
 
	mst_rdev
;

137 
__off_t
 
	mst_size
;

139 
__dev_t
 
	mst_rdev
;

140 unsigned int 
	m__pad2
;

141 
__off64_t
 
	mst_size
;

143 
__blksize_t
 
	mst_blksize
;

144 
__blkcnt64_t
 
	mst_blocks
;

145 #ifdef 
__USE_XOPEN2K8


152 struct 
timespec
 
	mst_atim
;

153 struct 
timespec
 
	mst_mtim
;

154 struct 
timespec
 
	mst_ctim
;

156 
__time_t
 
	mst_atime
;

157 
__syscall_ulong_t
 
	mst_atimensec
;

158 
__time_t
 
	mst_mtime
;

159 
__syscall_ulong_t
 
	mst_mtimensec
;

160 
__time_t
 
	mst_ctime
;

161 
__syscall_ulong_t
 
	mst_ctimensec
;

163 #ifdef 
__x86_64__


164 
__syscall_slong_t
 
	m__glibc_reserved
[3];

166 
__ino64_t
 
	mst_ino
;

172 #define 
	#_STATBUF_ST_BLKSIZE


	)

173 #define 
	#_STATBUF_ST_RDEV


	)

175 #define 
	#_STATBUF_ST_NSEC


	)

179 #define 
	#__S_IFMT
 0170000

	)

182 #define 
	#__S_IFDIR
 0040000

	)

183 #define 
	#__S_IFCHR
 0020000

	)

184 #define 
	#__S_IFBLK
 0060000

	)

185 #define 
	#__S_IFREG
 0100000

	)

186 #define 
	#__S_IFIFO
 0010000

	)

187 #define 
	#__S_IFLNK
 0120000

	)

188 #define 
	#__S_IFSOCK
 0140000

	)

192 #define 
	#__S_TYPEISMQ
(
buf
) ((buf)->
st_mode
 - (buf)->st_mode)

	)

193 #define 
	#__S_TYPEISSEM
(
buf
) ((buf)->
st_mode
 - (buf)->st_mode)

	)

194 #define 
	#__S_TYPEISSHM
(
buf
) ((buf)->
st_mode
 - (buf)->st_mode)

	)

198 #define 
	#__S_ISUID
 04000

	)

199 #define 
	#__S_ISGID
 02000

	)

200 #define 
	#__S_ISVTX
 01000

	)

201 #define 
	#__S_IREAD
 0400

	)

202 #define 
	#__S_IWRITE
 0200

	)

203 #define 
	#__S_IEXEC
 0100

	)

205 #ifdef 
__USE_ATFILE


206 #define 
	#UTIME_NOW
 ((1l << 30) - 1l)

	)

207 #define 
	#UTIME_OMIT
 ((1l << 30) - 2l)

	)

	@/usr/include/bits/stdint-intn.h

19 #ifndef 
_BITS_STDINT_INTN_H


20 #define 
	#_BITS_STDINT_INTN_H
 1

	)

22 #include 
	~<bits/types.h
>

24 typedef 
__int8_t
 
	tint8_t
;

25 typedef 
__int16_t
 
	tint16_t
;

26 typedef 
__int32_t
 
	tint32_t
;

27 typedef 
__int64_t
 
	tint64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #ifndef 
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
fprintf
)

24 
	$__LDBL_REDIR_DECL
 (
printf
)

25 
	$__LDBL_REDIR_DECL
 (
sprintf
)

26 
	$__LDBL_REDIR_DECL
 (
vfprintf
)

27 
	$__LDBL_REDIR_DECL
 (
vprintf
)

28 
	$__LDBL_REDIR_DECL
 (
vsprintf
)

29 #if !
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 #if 
defined
 
__LDBL_COMPAT


31 
	$__LDBL_REDIR1_DECL
 (
fscanf
, 
__nldbl___isoc99_fscanf
)

32 
	$__LDBL_REDIR1_DECL
 (
scanf
, 
__nldbl___isoc99_scanf
)

33 
	$__LDBL_REDIR1_DECL
 (
sscanf
, 
__nldbl___isoc99_sscanf
)

34 #elif 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

35 
	$__LDBL_REDIR1_DECL
 (
fscanf
, 
__isoc99_fscanfieee128
)

36 
	$__LDBL_REDIR1_DECL
 (
scanf
, 
__isoc99_scanfieee128
)

37 
	$__LDBL_REDIR1_DECL
 (
sscanf
, 
__isoc99_sscanfieee128
)

39 #error 
bits
/
stdlib
-
ldbl
.
h
 
included
 
when
 
no
 ldbl 
redirections
 
are
 
required
.

42 
	$__LDBL_REDIR_DECL
 (
fscanf
)

43 
	$__LDBL_REDIR_DECL
 (
scanf
)

44 
	$__LDBL_REDIR_DECL
 (
sscanf
)

47 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_UNIX98


48 
	$__LDBL_REDIR_DECL
 (
snprintf
)

49 
	$__LDBL_REDIR_DECL
 (
vsnprintf
)

52 #ifdef 
__USE_ISOC99


53 #if !
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

54 #if 
defined
 
__LDBL_COMPAT


55 
	$__LDBL_REDIR1_DECL
 (
vfscanf
, 
__nldbl___isoc99_vfscanf
)

56 
	$__LDBL_REDIR1_DECL
 (
vscanf
, 
__nldbl___isoc99_vscanf
)

57 
	$__LDBL_REDIR1_DECL
 (
vsscanf
, 
__nldbl___isoc99_vsscanf
)

58 #elif 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

59 
	$__LDBL_REDIR1_DECL
 (
vfscanf
, 
__isoc99_vfscanfieee128
)

60 
	$__LDBL_REDIR1_DECL
 (
vscanf
, 
__isoc99_vscanfieee128
)

61 
	$__LDBL_REDIR1_DECL
 (
vsscanf
, 
__isoc99_vsscanfieee128
)

63 #error 
bits
/
stdlib
-
ldbl
.
h
 
included
 
when
 
no
 ldbl 
redirections
 
are
 
required
.

66 
	$__LDBL_REDIR_DECL
 (
vfscanf
)

67 
	$__LDBL_REDIR_DECL
 (
vsscanf
)

68 
	$__LDBL_REDIR_DECL
 (
vscanf
)

72 #ifdef 
__USE_XOPEN2K8


73 
	$__LDBL_REDIR_DECL
 (
vdprintf
)

74 
	$__LDBL_REDIR_DECL
 (
dprintf
)

77 #ifdef 
__USE_GNU


78 
	$__LDBL_REDIR_DECL
 (
vasprintf
)

79 
	$__LDBL_REDIR2_DECL
 (
asprintf
)

80 
	$__LDBL_REDIR_DECL
 (
asprintf
)

81 
	$__LDBL_REDIR_DECL
 (
obstack_printf
)

82 
	$__LDBL_REDIR_DECL
 (
obstack_vprintf
)

85 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


86 
	$__LDBL_REDIR2_DECL
 (
sprintf_chk
)

87 
	$__LDBL_REDIR2_DECL
 (
vsprintf_chk
)

88 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_UNIX98


89 
	$__LDBL_REDIR2_DECL
 (
snprintf_chk
)

90 
	$__LDBL_REDIR2_DECL
 (
vsnprintf_chk
)

92 #if 
__USE_FORTIFY_LEVEL
 > 1

93 
	$__LDBL_REDIR2_DECL
 (
fprintf_chk
)

94 
	$__LDBL_REDIR2_DECL
 (
printf_chk
)

95 
	$__LDBL_REDIR2_DECL
 (
vfprintf_chk
)

96 
	$__LDBL_REDIR2_DECL
 (
vprintf_chk
)

97 #ifdef 
__USE_XOPEN2K8


98 
	$__LDBL_REDIR2_DECL
 (
dprintf_chk
)

99 
	$__LDBL_REDIR2_DECL
 (
vdprintf_chk
)

101 #ifdef 
__USE_GNU


102 
	$__LDBL_REDIR2_DECL
 (
asprintf_chk
)

103 
	$__LDBL_REDIR2_DECL
 (
vasprintf_chk
)

104 
	$__LDBL_REDIR2_DECL
 (
obstack_printf_chk
)

105 
	$__LDBL_REDIR2_DECL
 (
obstack_vprintf_chk
)

	@/usr/include/bits/stdio.h

19 #ifndef 
_BITS_STDIO_H


20 #define 
	#_BITS_STDIO_H
 1

	)

22 #ifndef 
_STDIO_H


26 #ifndef 
__extern_inline


27 #define 
	#__STDIO_INLINE
 
inline


	)

29 #define 
	#__STDIO_INLINE
 
__extern_inline


	)

33 #ifdef 
__USE_EXTERN_INLINES


36 #if !(
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function
)

38 
__STDIO_INLINE
 int

39 
	$vprintf
 (const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__arg
)

41 return 
	`vfprintf
 (
stdout
, 
__fmt
, 
__arg
);

42 
	}
}

46 
__STDIO_INLINE
 int

47 
	$getchar
 (void)

49 return 
	`getc
 (
stdin
);

50 
	}
}

53 #ifdef 
__USE_MISC


55 
__STDIO_INLINE
 int

56 
	$fgetc_unlocked
 (
FILE
 *
__fp
)

58 return 
	`__getc_unlocked_body
 (
__fp
);

59 
	}
}

63 #ifdef 
__USE_POSIX


65 
__STDIO_INLINE
 int

66 
	$getc_unlocked
 (
FILE
 *
__fp
)

68 return 
	`__getc_unlocked_body
 (
__fp
);

69 
	}
}

72 
__STDIO_INLINE
 int

73 
	$getchar_unlocked
 (void)

75 return 
	`__getc_unlocked_body
 (
stdin
);

76 
	}
}

81 
__STDIO_INLINE
 int

82 
	$putchar
 (int 
__c
)

84 return 
	`putc
 (
__c
, 
stdout
);

85 
	}
}

88 #ifdef 
__USE_MISC


90 
__STDIO_INLINE
 int

91 
	$fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
)

93 return 
	`__putc_unlocked_body
 (
__c
, 
__stream
);

94 
	}
}

98 #ifdef 
__USE_POSIX


100 
__STDIO_INLINE
 int

101 
	$putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
)

103 return 
	`__putc_unlocked_body
 (
__c
, 
__stream
);

104 
	}
}

107 
__STDIO_INLINE
 int

108 
	$putchar_unlocked
 (int 
__c
)

110 return 
	`__putc_unlocked_body
 (
__c
, 
stdout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$getline
 (char **
__lineptr
, 
size_t
 *
__n
, 
FILE
 *
__stream
)

120 return 
	`__getdelim
 (
__lineptr
, 
__n
, '\n', 
__stream
);

121 
	}
}

125 #ifdef 
__USE_MISC


127 
__STDIO_INLINE
 int

128 
__NTH
 (
	$feof_unlocked
 (
FILE
 *
__stream
))

130 return 
	`__feof_unlocked_body
 (
__stream
);

131 
	}
}

134 
__STDIO_INLINE
 int

135 
__NTH
 (
	$ferror_unlocked
 (
FILE
 *
__stream
))

137 return 
	`__ferror_unlocked_body
 (
__stream
);

138 
	}
}

144 #if 
defined
 
__USE_MISC
 && defined 
__GNUC__
 && defined 
__OPTIMIZE__
 \

145 && !
defined
 
	g__cplusplus


147 #define 
	#fread_unlocked
(
ptr
, 
size
, 
n
, 
stream
) \

148 (
	`__extension__
 ((
	`__builtin_constant_p
 (
size
) && __builtin_constant_p (
n
) \

149 && (
size_t
) (
size
) * (size_t) (
n
) <= 8 \

150 && (
size_t
) (
size
) != 0) \

151 ? ({ char *
__ptr
 = (char *) (
ptr
); \

152 
FILE
 *
__stream
 = (
stream
); \

153 
size_t
 
__cnt
; \

154 for (
__cnt
 = (
size_t
) (
size
) * (size_t) (
n
); \

155 
__cnt
 > 0; --__cnt) \

157 int 
__c
 = 
	`getc_unlocked
 (
__stream
); \

158 if (
__c
 == 
EOF
) \

160 *
__ptr
++ = 
__c
; \

162 ((
size_t
) (
size
) * (size_t) (
n
) - 
__cnt
) \

163 / (
size_t
) (
size
); }) \

164 : (((
	`__builtin_constant_p
 (
size
) && (
size_t
) (size) == 0) \

165 || (
	`__builtin_constant_p
 (
n
) && (
size_t
) (n) == 0)) \

167 ? ((void) (
ptr
), (void) (
stream
), (void) (
size
), \

168 (void) (
n
), (
size_t
) 0) \

169 : 
	`fread_unlocked
 (
ptr
, 
size
, 
n
, 
stream
))))

	)

171 #define 
	#fwrite_unlocked
(
ptr
, 
size
, 
n
, 
stream
) \

172 (
	`__extension__
 ((
	`__builtin_constant_p
 (
size
) && __builtin_constant_p (
n
) \

173 && (
size_t
) (
size
) * (size_t) (
n
) <= 8 \

174 && (
size_t
) (
size
) != 0) \

175 ? ({ const char *
__ptr
 = (const char *) (
ptr
); \

176 
FILE
 *
__stream
 = (
stream
); \

177 
size_t
 
__cnt
; \

178 for (
__cnt
 = (
size_t
) (
size
) * (size_t) (
n
); \

179 
__cnt
 > 0; --__cnt) \

180 if (
	`putc_unlocked
 (*
__ptr
++, 
__stream
) == 
EOF
) \

182 ((
size_t
) (
size
) * (size_t) (
n
) - 
__cnt
) \

183 / (
size_t
) (
size
); }) \

184 : (((
	`__builtin_constant_p
 (
size
) && (
size_t
) (size) == 0) \

185 || (
	`__builtin_constant_p
 (
n
) && (
size_t
) (n) == 0)) \

187 ? ((void) (
ptr
), (void) (
stream
), (void) (
size
), \

188 (void) (
n
), (
size_t
) 0) \

189 : 
	`fwrite_unlocked
 (
ptr
, 
size
, 
n
, 
stream
))))

	)

193 #undef 
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #ifndef 
_BITS_STDIO2_H


20 #define 
	#_BITS_STDIO2_H
 1

	)

22 #ifndef 
_STDIO_H


26 extern int 
	$__sprintf_chk
 (char *
__restrict
 
__s
, int 
__flag
, 
size_t
 
__slen
,

27 const char *
__restrict
 
__format
, ...) 
__THROW


28 
	`__attr_access
 ((
__write_only__
, 1, 3));

29 extern int 
	$__vsprintf_chk
 (char *
__restrict
 
__s
, int 
__flag
, 
size_t
 
__slen
,

30 const char *
__restrict
 
__format
,

31 
__gnuc_va_list
 
__ap
) 
__THROW


32 
	`__attr_access
 ((
__write_only__
, 1, 3));

34 #ifdef 
__va_arg_pack


35 
__fortify_function
 int

36 
	`__NTH
 (
	$sprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__fmt
, ...))

38 return 
	`__builtin___sprintf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

39 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_arg_pack
 ());

40 
	}
}

41 #elif !
defined
 
__cplusplus


42 #define 
	#sprintf
(
str
, ...) \

43 
	`__builtin___sprintf_chk
 (
str
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

44 
__VA_ARGS__
)

	)

47 
__fortify_function
 int

48 
__NTH
 (
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__fmt
,

49 
__gnuc_va_list
 
__ap
))

51 return 
	`__builtin___vsprintf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

52 
	`__bos
 (
__s
), 
__fmt
, 
__ap
);

53 
	}
}

55 #if 
defined
 
__USE_ISOC99
 || defined 
__USE_UNIX98


57 extern int 
	$__snprintf_chk
 (char *
__restrict
 
__s
, 
size_t
 
__n
, int 
__flag
,

58 
size_t
 
__slen
, const char *
__restrict
 
__format
,

59 ...) 
__THROW


60 
	`__attr_access
 ((
__write_only__
, 1, 2));

61 extern int 
	$__vsnprintf_chk
 (char *
__restrict
 
__s
, 
size_t
 
__n
, int 
__flag
,

62 
size_t
 
__slen
, const char *
__restrict
 
__format
,

63 
__gnuc_va_list
 
__ap
) 
__THROW
;

65 #ifdef 
__va_arg_pack


66 
__fortify_function
 int

67 
	`__NTH
 (
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__n
,

68 const char *
__restrict
 
__fmt
, ...))

70 return 
	`__builtin___snprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

71 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_arg_pack
 ());

72 
	}
}

73 #elif !
defined
 
__cplusplus


74 #define 
	#snprintf
(
str
, 
len
, ...) \

75 
	`__builtin___snprintf_chk
 (
str
, 
len
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

76 
__VA_ARGS__
)

	)

79 
__fortify_function
 int

80 
__NTH
 (
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__n
,

81 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
))

83 return 
	`__builtin___vsnprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

84 
	`__bos
 (
__s
), 
__fmt
, 
__ap
);

85 
	}
}

89 #if 
__USE_FORTIFY_LEVEL
 > 1

91 extern int 
__fprintf_chk
 (
FILE
 *
__restrict
 
__stream
, int 
__flag
,

92 const char *
__restrict
 
__format
, ...);

93 extern int 
__printf_chk
 (int 
__flag
, const char *
__restrict
 
__format
, ...);

94 extern int 
__vfprintf_chk
 (
FILE
 *
__restrict
 
__stream
, int 
__flag
,

95 const char *
__restrict
 
__format
, 
__gnuc_va_list
 
__ap
);

96 extern int 
__vprintf_chk
 (int 
__flag
, const char *
__restrict
 
__format
,

97 
__gnuc_va_list
 
__ap
);

99 #ifdef 
__va_arg_pack


100 
__fortify_function
 int

101 
	$fprintf
 (
FILE
 *
__restrict
 
__stream
, const char *__restrict 
__fmt
, ...)

103 return 
	`__fprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

104 
	`__va_arg_pack
 ());

105 
	}
}

107 
__fortify_function
 int

108 
	$printf
 (const char *
__restrict
 
__fmt
, ...)

110 return 
	`__printf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_arg_pack
 ());

111 
	}
}

112 #elif !
defined
 
__cplusplus


113 #define 
	#printf
(...) \

114 
	`__printf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

115 #define 
	#fprintf
(
stream
, ...) \

116 
	`__fprintf_chk
 (
stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

119 
__fortify_function
 int

120 
	$vprintf
 (const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

122 #ifdef 
__USE_EXTERN_INLINES


123 return 
	`__vfprintf_chk
 (
stdout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

125 return 
	`__vprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

127 
	}
}

129 
__fortify_function
 int

130 
	$vfprintf
 (
FILE
 *
__restrict
 
__stream
,

131 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

133 return 
	`__vfprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

134 
	}
}

136 #ifdef 
__USE_XOPEN2K8


137 extern int 
	$__dprintf_chk
 (int 
__fd
, int 
__flag
, const char *
__restrict
 
__fmt
,

138 ...) 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

139 extern int 
	$__vdprintf_chk
 (int 
__fd
, int 
__flag
,

140 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__arg
)

141 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

143 #ifdef 
__va_arg_pack


144 
__fortify_function
 int

145 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

147 return 
	`__dprintf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

148 
	`__va_arg_pack
 ());

149 
	}
}

150 #elif !
defined
 
__cplusplus


151 #define 
	#dprintf
(
fd
, ...) \

152 
	`__dprintf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

155 
__fortify_function
 int

156 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

158 return 
	`__vdprintf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

159 
	}
}

162 #ifdef 
__USE_GNU


164 extern int 
	$__asprintf_chk
 (char **
__restrict
 
__ptr
, int 
__flag
,

165 const char *
__restrict
 
__fmt
, ...)

166 
__THROW
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 3, 4))) 
__wur
;

167 extern int 
	$__vasprintf_chk
 (char **
__restrict
 
__ptr
, int 
__flag
,

168 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__arg
)

169 
__THROW
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 3, 0))) 
__wur
;

170 extern int 
	$__obstack_printf_chk
 (struct 
obstack
 *
__restrict
 
__obstack
,

171 int 
__flag
, const char *
__restrict
 
__format
,

173 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

174 extern int 
	$__obstack_vprintf_chk
 (struct 
obstack
 *
__restrict
 
__obstack
,

175 int 
__flag
,

176 const char *
__restrict
 
__format
,

177 
__gnuc_va_list
 
__args
)

178 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

180 #ifdef 
__va_arg_pack


181 
__fortify_function
 int

182 
	`__NTH
 (
	$asprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
, ...))

184 return 
	`__asprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

185 
	`__va_arg_pack
 ());

186 
	}
}

188 
__fortify_function
 int

189 
__NTH
 (
	$__asprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
,

192 return 
	`__asprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

193 
	`__va_arg_pack
 ());

194 
	}
}

196 
__fortify_function
 int

197 
__NTH
 (
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

198 const char *
__restrict
 
__fmt
, ...))

200 return 
	`__obstack_printf_chk
 (
__obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

201 
	`__va_arg_pack
 ());

202 
	}
}

203 #elif !
defined
 
__cplusplus


204 #define 
	#asprintf
(
ptr
, ...) \

205 
	`__asprintf_chk
 (
ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 #define 
	#__asprintf
(
ptr
, ...) \

207 
	`__asprintf_chk
 (
ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

208 #define 
	#obstack_printf
(
obstack
, ...) \

209 
	`__obstack_printf_chk
 (
obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

212 
__fortify_function
 int

213 
__NTH
 (
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
,

214 
__gnuc_va_list
 
__ap
))

216 return 
	`__vasprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

217 
	}
}

219 
__fortify_function
 int

220 
__NTH
 (
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

221 const char *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
))

223 return 
	`__obstack_vprintf_chk
 (
__obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

224 
__ap
);

225 
	}
}

231 #if 
__GLIBC_USE
 (
DEPRECATED_GETS
)

232 extern char *
	$__gets_chk
 (char *
__str
, 
size_t
) 
__wur
;

233 extern char *
	`__REDIRECT
 (
__gets_warn
, (char *
__str
), 
gets
)

234 
__wur
 
	`__warnattr
 ("please use fgets or getline instead, gets can't "

237 
__fortify_function
 
__wur
 char *

238 
	$gets
 (char *
__str
)

240 if (
	`__bos
 (
__str
) != (
size_t
) -1)

241 return 
	`__gets_chk
 (
__str
, 
	`__bos
 (__str));

242 return 
	`__gets_warn
 (
__str
);

243 
	}
}

246 extern char *
	$__fgets_chk
 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

247 
FILE
 *
__restrict
 
__stream
)

248 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 3));

249 extern char *
	`__REDIRECT
 (
__fgets_alias
,

250 (char *
__restrict
 
__s
, int 
__n
,

251 
FILE
 *
__restrict
 
__stream
), 
fgets
)

252 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

253 extern char *
	`__REDIRECT
 (
__fgets_chk_warn
,

254 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

255 
FILE
 *
__restrict
 
__stream
), 
__fgets_chk
)

256 
__wur
 
	`__warnattr
 ("fgets called with bigger size than length "

259 
__fortify_function
 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2)) char *

260 
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

262 if (
	`__bos
 (
__s
) != (
size_t
) -1)

264 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

265 return 
	`__fgets_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

267 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
))

268 return 
	`__fgets_chk_warn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

270 return 
	`__fgets_alias
 (
__s
, 
__n
, 
__stream
);

271 
	}
}

273 extern 
size_t
 
	$__fread_chk
 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

274 
size_t
 
__size
, size_t 
__n
,

275 
FILE
 *
__restrict
 
__stream
) 
__wur
;

276 extern 
size_t
 
	`__REDIRECT
 (
__fread_alias
,

277 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

278 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
),

279 
fread
) 
__wur
;

280 extern 
size_t
 
	`__REDIRECT
 (
__fread_chk_warn
,

281 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

282 
size_t
 
__size
, size_t 
__n
,

283 
FILE
 *
__restrict
 
__stream
),

284 
__fread_chk
)

285 
__wur
 
	`__warnattr
 ("fread called with bigger size * nmemb than length "

288 
__fortify_function
 
__wur
 
size_t


289 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
, size_t 
__n
,

290 
FILE
 *
__restrict
 
__stream
)

292 if (
	`__bos0
 (
__ptr
) != (
size_t
) -1)

294 if (!
	`__builtin_constant_p
 (
__size
)

295 || !
	`__builtin_constant_p
 (
__n
)

296 || (
__size
 | 
__n
) >= (((
size_t
) 1) << (8 * sizeof (size_t) / 2)))

297 return 
	`__fread_chk
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
, 
__stream
);

299 if (
__size
 * 
__n
 > 
	`__bos0
 (
__ptr
))

300 return 
	`__fread_chk_warn
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
, 
__stream
);

302 return 
	`__fread_alias
 (
__ptr
, 
__size
, 
__n
, 
__stream
);

303 
	}
}

305 #ifdef 
__USE_GNU


306 extern char *
	$__fgets_unlocked_chk
 (char *
__restrict
 
__s
, 
size_t
 
__size
,

307 int 
__n
, 
FILE
 *
__restrict
 
__stream
)

308 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 3));

309 extern char *
	`__REDIRECT
 (
__fgets_unlocked_alias
,

310 (char *
__restrict
 
__s
, int 
__n
,

311 
FILE
 *
__restrict
 
__stream
), 
fgets_unlocked
)

312 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

313 extern char *
	`__REDIRECT
 (
__fgets_unlocked_chk_warn
,

314 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

315 
FILE
 *
__restrict
 
__stream
), 
__fgets_unlocked_chk
)

316 
__wur
 
	`__warnattr
 ("fgets_unlocked called with bigger size than length "

319 
__fortify_function
 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2)) char *

320 
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

322 if (
	`__bos
 (
__s
) != (
size_t
) -1)

324 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

325 return 
	`__fgets_unlocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

327 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
))

328 return 
	`__fgets_unlocked_chk_warn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

330 return 
	`__fgets_unlocked_alias
 (
__s
, 
__n
, 
__stream
);

331 
	}
}

334 #ifdef 
__USE_MISC


335 #undef 
fread_unlocked


336 extern 
size_t
 
	$__fread_unlocked_chk
 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

337 
size_t
 
__size
, size_t 
__n
,

338 
FILE
 *
__restrict
 
__stream
) 
__wur
;

339 extern 
size_t
 
	`__REDIRECT
 (
__fread_unlocked_alias
,

340 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

341 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
),

342 
fread_unlocked
) 
__wur
;

343 extern 
size_t
 
	`__REDIRECT
 (
__fread_unlocked_chk_warn
,

344 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

345 
size_t
 
__size
, size_t 
__n
,

346 
FILE
 *
__restrict
 
__stream
),

347 
__fread_unlocked_chk
)

348 
__wur
 
	`__warnattr
 ("fread_unlocked called with bigger size * nmemb than "

351 
__fortify_function
 
__wur
 
size_t


352 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
, size_t 
__n
,

353 
FILE
 *
__restrict
 
__stream
)

355 if (
	`__bos0
 (
__ptr
) != (
size_t
) -1)

357 if (!
	`__builtin_constant_p
 (
__size
)

358 || !
	`__builtin_constant_p
 (
__n
)

359 || (
__size
 | 
__n
) >= (((
size_t
) 1) << (8 * sizeof (size_t) / 2)))

360 return 
	`__fread_unlocked_chk
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
,

361 
__stream
);

363 if (
__size
 * 
__n
 > 
	`__bos0
 (
__ptr
))

364 return 
	`__fread_unlocked_chk_warn
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
,

365 
__stream
);

368 #ifdef 
__USE_EXTERN_INLINES


369 if (
	`__builtin_constant_p
 (
__size
)

370 && 
	`__builtin_constant_p
 (
__n
)

371 && (
__size
 | 
__n
) < (((
size_t
) 1) << (8 * sizeof (size_t) / 2))

372 && 
__size
 * 
__n
 <= 8)

374 
size_t
 
__cnt
 = 
__size
 * 
__n
;

375 char *
__cptr
 = (char *) 
__ptr
;

376 if (
__cnt
 == 0)

379 for (; 
__cnt
 > 0; --__cnt)

381 int 
__c
 = 
	`getc_unlocked
 (
__stream
);

382 if (
__c
 == 
EOF
)

384 *
__cptr
++ = 
__c
;

386 return (
__cptr
 - (char *) 
__ptr
) / 
__size
;

389 return 
	`__fread_unlocked_alias
 (
__ptr
, 
__size
, 
__n
, 
__stream
);

390 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #ifndef 
_BITS_STDIO_LIM_H


19 #define 
	#_BITS_STDIO_LIM_H
 1

	)

21 #ifndef 
_STDIO_H


25 #define 
	#L_tmpnam
 20

	)

26 #define 
	#TMP_MAX
 238328

	)

27 #define 
	#FILENAME_MAX
 4096

	)

29 #ifdef 
__USE_POSIX


30 #define 
	#L_ctermid
 9

	)

31 #if !
defined
 
__USE_XOPEN2K
 || defined 
__USE_GNU


32 #define 
	#L_cuserid
 9

	)

36 #undef 
FOPEN_MAX


37 #define 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__extern_inline
 void *

20 
	$bsearch
 (const void *
__key
, const void *
__base
, 
size_t
 
__nmemb
, size_t 
__size
,

21 
__compar_fn_t
 
__compar
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 const void *
__p
;

25 int 
__comparison
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 while (
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (void *) (((const char *) 
__base
) + (
__idx
 * 
__size
));

33 
__comparison
 = (*
__compar
) (
__key
, 
__p
);

34 if (
__comparison
 < 0)

35 
__u
 = 
__idx
;

36 else if (
__comparison
 > 0)

37 
__l
 = 
__idx
 + 1;

39 return (void *) 
__p
;

42 return 
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #ifndef 
_STDLIB_H


23 #ifdef 
__USE_EXTERN_INLINES


24 
__extern_inline
 double

25 
__NTH
 (
	$atof
 (const char *
__nptr
))

27 return 
	`strtod
 (
__nptr
, (char **) 
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #ifndef 
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 #ifdef 
__LDBL_COMPAT


25 
	$__LDBL_REDIR1_DECL
 (
strtold
, 
strtod
)

27 
	$__LDBL_REDIR1_DECL
 (
strtold
, 
__strtoieee128
)

31 #ifdef 
__USE_GNU


32 #ifdef 
__LDBL_COMPAT


33 
	$__LDBL_REDIR1_DECL
 (
strtold_l
, 
strtod_l
)

35 
	$__LDBL_REDIR1_DECL
 (
strtold_l
, 
__strtoieee128_l
)

39 #if 
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

40 #ifdef 
__LDBL_COMPAT


41 
	$__LDBL_REDIR1_DECL
 (
strfroml
, 
strfromd
)

43 
	$__LDBL_REDIR1_DECL
 (
strfroml
, 
__strfromieee128
)

47 #ifdef 
__USE_MISC


48 #if 
defined
 
__LDBL_COMPAT


49 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

50 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

51 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

52 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

53 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

54 #elif 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

55 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
__qecvtieee128
)

56 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
__qfcvtieee128
)

57 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
__qgcvtieee128
)

58 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
__qecvtieee128_r
)

59 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
__qfcvtieee128_r
)

61 #error 
bits
/
stdlib
-
ldbl
.
h
 
included
 
when
 
no
 ldbl 
redirections
 
are
 
required
.

	@/usr/include/bits/stdlib.h

19 #ifndef 
_STDLIB_H


23 extern char *
	$__realpath_chk
 (const char *
__restrict
 
__name
,

24 char *
__restrict
 
__resolved
,

25 
size_t
 
__resolvedlen
) 
__THROW
 
__wur
;

26 extern char *
	`__REDIRECT_NTH
 (
__realpath_alias
,

27 (const char *
__restrict
 
__name
,

28 char *
__restrict
 
__resolved
), 
realpath
) 
__wur
;

29 extern char *
	`__REDIRECT_NTH
 (
__realpath_chk_warn
,

30 (const char *
__restrict
 
__name
,

31 char *
__restrict
 
__resolved
,

32 
size_t
 
__resolvedlen
), 
__realpath_chk
) 
__wur


33 
	`__warnattr
 ("second argument of realpath must be either NULL or at "

36 
__fortify_function
 
__wur
 char *

37 
	`__NTH
 (
	$realpath
 (const char *
__restrict
 
__name
, char *__restrict 
__resolved
))

39 if (
	`__bos
 (
__resolved
) != (
size_t
) -1)

41 #if 
defined
 
_LIBC_LIMITS_H_
 && defined 
PATH_MAX


42 if (
	`__bos
 (
__resolved
) < 
PATH_MAX
)

43 return 
	`__realpath_chk_warn
 (
__name
, 
__resolved
, 
	`__bos
 (__resolved));

45 return 
	`__realpath_chk
 (
__name
, 
__resolved
, 
	`__bos
 (__resolved));

48 return 
	`__realpath_alias
 (
__name
, 
__resolved
);

49 
	}
}

52 extern int 
	$__ptsname_r_chk
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
,

53 
size_t
 
__nreal
) 
__THROW
 
	`__nonnull
 ((2))

54 
	`__attr_access
 ((
__write_only__
, 2, 3));

55 extern int 
	`__REDIRECT_NTH
 (
__ptsname_r_alias
, (int 
__fd
, char *
__buf
,

56 
size_t
 
__buflen
), 
ptsname_r
)

57 
	`__nonnull
 ((2)) 
	`__attr_access
 ((
__write_only__
, 2, 3));

58 extern int 
	`__REDIRECT_NTH
 (
__ptsname_r_chk_warn
,

59 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
,

60 
size_t
 
__nreal
), 
__ptsname_r_chk
)

61 
	`__nonnull
 ((2)) 
	`__warnattr
 ("ptsname_r called with buflen bigger than "

64 
__fortify_function
 int

65 
	`__NTH
 (
	$ptsname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
))

67 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

69 if (!
	`__builtin_constant_p
 (
__buflen
))

70 return 
	`__ptsname_r_chk
 (
__fd
, 
__buf
, 
__buflen
, 
	`__bos
 (__buf));

71 if (
__buflen
 > 
	`__bos
 (
__buf
))

72 return 
	`__ptsname_r_chk_warn
 (
__fd
, 
__buf
, 
__buflen
, 
	`__bos
 (__buf));

74 return 
	`__ptsname_r_alias
 (
__fd
, 
__buf
, 
__buflen
);

75 
	}
}

78 extern int 
	$__wctomb_chk
 (char *
__s
, 
wchar_t
 
__wchar
, 
size_t
 
__buflen
)

79 
__THROW
 
__wur
;

80 extern int 
	`__REDIRECT_NTH
 (
__wctomb_alias
, (char *
__s
, 
wchar_t
 
__wchar
),

81 
wctomb
) 
__wur
;

83 
__fortify_function
 
__wur
 int

84 
	`__NTH
 (
	$wctomb
 (char *
__s
, 
wchar_t
 
__wchar
))

89 #define 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #if 
defined
 
MB_LEN_MAX
 && MB_LEN_MAX != 
__STDLIB_MB_LEN_MAX


93 if (
	`__bos
 (
__s
) != (
size_t
) -1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94 return 
	`__wctomb_chk
 (
__s
, 
__wchar
, 
	`__bos
 (__s));

95 return 
	`__wctomb_alias
 (
__s
, 
__wchar
);

96 
	}
}

99 extern 
size_t
 
	$__mbstowcs_chk
 (
wchar_t
 *
__restrict
 
__dst
,

100 const char *
__restrict
 
__src
,

101 
size_t
 
__len
, size_t 
__dstlen
) 
__THROW


102 
	`__attr_access
 ((
__write_only__
, 1, 3)) __attr_access ((
__read_only__
, 2));

103 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbstowcs_alias
,

104 (
wchar_t
 *
__restrict
 
__dst
,

105 const char *
__restrict
 
__src
,

106 
size_t
 
__len
), 
mbstowcs
)

107 
	`__attr_access
 ((
__write_only__
, 1, 3)) __attr_access ((
__read_only__
, 2));

108 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbstowcs_chk_warn
,

109 (
wchar_t
 *
__restrict
 
__dst
,

110 const char *
__restrict
 
__src
,

111 
size_t
 
__len
, size_t 
__dstlen
), 
__mbstowcs_chk
)

112 
	`__warnattr
 ("mbstowcs called with dst buffer smaller than len "

115 
__fortify_function
 
size_t


116 
	`__NTH
 (
	$mbstowcs
 (
wchar_t
 *
__restrict
 
__dst
, const char *__restrict 
__src
,

117 
size_t
 
__len
))

119 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

121 if (!
	`__builtin_constant_p
 (
__len
))

122 return 
	`__mbstowcs_chk
 (
__dst
, 
__src
, 
__len
,

123 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

125 if (
__len
 > 
	`__bos
 (
__dst
) / sizeof (
wchar_t
))

126 return 
	`__mbstowcs_chk_warn
 (
__dst
, 
__src
, 
__len
,

127 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

129 return 
	`__mbstowcs_alias
 (
__dst
, 
__src
, 
__len
);

130 
	}
}

133 extern 
size_t
 
	$__wcstombs_chk
 (char *
__restrict
 
__dst
,

134 const 
wchar_t
 *
__restrict
 
__src
,

135 
size_t
 
__len
, size_t 
__dstlen
) 
__THROW


136 
	`__attr_access
 ((
__write_only__
, 1, 3)) __attr_access ((
__read_only__
, 2));

137 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcstombs_alias
,

138 (char *
__restrict
 
__dst
,

139 const 
wchar_t
 *
__restrict
 
__src
,

140 
size_t
 
__len
), 
wcstombs
)

141 
	`__attr_access
 ((
__write_only__
, 1, 3)) __attr_access ((
__read_only__
, 2));

142 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcstombs_chk_warn
,

143 (char *
__restrict
 
__dst
,

144 const 
wchar_t
 *
__restrict
 
__src
,

145 
size_t
 
__len
, size_t 
__dstlen
), 
__wcstombs_chk
)

146 
	`__warnattr
 ("wcstombs called with dst buffer smaller than len");

148 
__fortify_function
 
size_t


149 
	`__NTH
 (
	$wcstombs
 (char *
__restrict
 
__dst
, const 
wchar_t
 *__restrict 
__src
,

150 
size_t
 
__len
))

152 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

154 if (!
	`__builtin_constant_p
 (
__len
))

155 return 
	`__wcstombs_chk
 (
__dst
, 
__src
, 
__len
, 
	`__bos
 (__dst));

156 if (
__len
 > 
	`__bos
 (
__dst
))

157 return 
	`__wcstombs_chk_warn
 (
__dst
, 
__src
, 
__len
, 
	`__bos
 (__dst));

159 return 
	`__wcstombs_alias
 (
__dst
, 
__src
, 
__len
);

160 
	}
}

	@/usr/include/bits/string_fortified.h

18 #ifndef 
_BITS_STRING_FORTIFIED_H


19 #define 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #ifndef 
_STRING_H


25 #if !
__GNUC_PREREQ
 (5,0)

26 
__warndecl
 (
__warn_memset_zero_len
,

30 
__fortify_function
 void *

31 
__NTH
 (
	$memcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

32 
size_t
 
__len
))

34 return 
	`__builtin___memcpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

35 
	}
}

37 
__fortify_function
 void *

38 
__NTH
 (
	$memmove
 (void *
__dest
, const void *
__src
, 
size_t
 
__len
))

40 return 
	`__builtin___memmove_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

41 
	}
}

43 #ifdef 
__USE_GNU


44 
__fortify_function
 void *

45 
__NTH
 (
	$mempcpy
 (void *
__restrict
 
__dest
, const void *__restrict 
__src
,

46 
size_t
 
__len
))

48 return 
	`__builtin___mempcpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

49 
	}
}

58 
__fortify_function
 void *

59 
__NTH
 (
	$memset
 (void *
__dest
, int 
__ch
, 
size_t
 
__len
))

63 #if !
	`__GNUC_PREREQ
 (5,0)

64 if (
	`__builtin_constant_p
 (
__len
) && __len == 0

65 && (!
	`__builtin_constant_p
 (
__ch
) || __ch != 0))

67 
	`__warn_memset_zero_len
 ();

68 return 
__dest
;

71 return 
	`__builtin___memset_chk
 (
__dest
, 
__ch
, 
__len
, 
	`__bos0
 (__dest));

72 
	}
}

74 #ifdef 
__USE_MISC


75 #include 
	~<bits/strings_fortified.h
>

77 void 
	$__explicit_bzero_chk
 (void *
__dest
, 
size_t
 
__len
, size_t 
__destlen
)

78 
__THROW
 
	`__nonnull
 ((1)) 
	`__attr_access
 ((
__write_only__
, 1, 2));

80 
__fortify_function
 void

81 
	`__NTH
 (
	$explicit_bzero
 (void *
__dest
, 
size_t
 
__len
))

83 
	`__explicit_bzero_chk
 (
__dest
, 
__len
, 
	`__bos0
 (__dest));

84 
	}
}

87 
__fortify_function
 char *

88 
__NTH
 (
	$strcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

90 return 
	`__builtin___strcpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

91 
	}
}

93 #ifdef 
__USE_GNU


94 
__fortify_function
 char *

95 
__NTH
 (
	$stpcpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

97 return 
	`__builtin___stpcpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

98 
	}
}

102 
__fortify_function
 char *

103 
__NTH
 (
	$strncpy
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

104 
size_t
 
__len
))

106 return 
	`__builtin___strncpy_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos
 (__dest));

107 
	}
}

110 extern char *
	$__stpncpy_chk
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
,

111 
size_t
 
__destlen
) 
__THROW


112 
	`__attr_access
 ((
__write_only__
, 1, 3)) __attr_access ((
__read_only__
, 2));

113 extern char *
	`__REDIRECT_NTH
 (
__stpncpy_alias
, (char *
__dest
, const char *
__src
,

114 
size_t
 
__n
), 
stpncpy
);

116 
__fortify_function
 char *

117 
	`__NTH
 (
	$stpncpy
 (char *
__dest
, const char *
__src
, 
size_t
 
__n
))

119 if (
	`__bos
 (
__dest
) != (
size_t
) -1

120 && (!
	`__builtin_constant_p
 (
__n
) || __n > 
	`__bos
 (
__dest
)))

121 return 
	`__stpncpy_chk
 (
__dest
, 
__src
, 
__n
, 
	`__bos
 (__dest));

122 return 
	`__stpncpy_alias
 (
__dest
, 
__src
, 
__n
);

123 
	}
}

126 
__fortify_function
 char *

127 
__NTH
 (
	$strcat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
))

129 return 
	`__builtin___strcat_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest));

130 
	}
}

133 
__fortify_function
 char *

134 
__NTH
 (
	$strncat
 (char *
__restrict
 
__dest
, const char *__restrict 
__src
,

135 
size_t
 
__len
))

137 return 
	`__builtin___strncat_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos
 (__dest));

138 
	}
}

	@/usr/include/bits/termios.h

19 #ifndef 
_TERMIOS_H


23 typedef unsigned char 
	tcc_t
;

24 typedef unsigned int 
	tspeed_t
;

25 typedef unsigned int 
	ttcflag_t
;

27 #include 
	~<bits/termios-struct.h
>

28 #include 
	~<bits/termios-c_cc.h
>

29 #include 
	~<bits/termios-c_iflag.h
>

30 #include 
	~<bits/termios-c_oflag.h
>

33 #define 
	#B0
 0000000

	)

34 #define 
	#B50
 0000001

	)

35 #define 
	#B75
 0000002

	)

36 #define 
	#B110
 0000003

	)

37 #define 
	#B134
 0000004

	)

38 #define 
	#B150
 0000005

	)

39 #define 
	#B200
 0000006

	)

40 #define 
	#B300
 0000007

	)

41 #define 
	#B600
 0000010

	)

42 #define 
	#B1200
 0000011

	)

43 #define 
	#B1800
 0000012

	)

44 #define 
	#B2400
 0000013

	)

45 #define 
	#B4800
 0000014

	)

46 #define 
	#B9600
 0000015

	)

47 #define 
	#B19200
 0000016

	)

48 #define 
	#B38400
 0000017

	)

49 #ifdef 
__USE_MISC


50 #define 
	#EXTA
 
B19200


	)

51 #define 
	#EXTB
 
B38400


	)

53 #include 
	~<bits/termios-baud.h
>

55 #include 
	~<bits/termios-c_cflag.h
>

56 #include 
	~<bits/termios-c_lflag.h
>

58 #ifdef 
__USE_MISC


60 #define 
	#TIOCSER_TEMT
 0x01

	)

64 #define 
	#TCOOFF
 0

	)

65 #define 
	#TCOON
 1

	)

66 #define 
	#TCIOFF
 2

	)

67 #define 
	#TCION
 3

	)

70 #define 
	#TCIFLUSH
 0

	)

71 #define 
	#TCOFLUSH
 1

	)

72 #define 
	#TCIOFLUSH
 2

	)

74 #include 
	~<bits/termios-tcflow.h
>

76 #include 
	~<bits/termios-misc.h
>

	@/usr/include/bits/time.h

23 #ifndef 
_BITS_TIME_H


24 #define 
	#_BITS_TIME_H
 1

	)

26 #include 
	~<bits/types.h
>

34 #define 
	#CLOCKS_PER_SEC
 ((
__clock_t
) 1000000)

	)

36 #if (!
defined
 
__STRICT_ANSI__
 || defined 
__USE_POSIX
) \

37 && !
defined
 
__USE_XOPEN2K


40 extern long int 
__sysconf
 (int);

41 #define 
	#CLK_TCK
 ((
__clock_t
) 
	`__sysconf
 (2))

	)

44 #ifdef 
__USE_POSIX199309


46 #define 
	#CLOCK_REALTIME
 0

	)

48 #define 
	#CLOCK_MONOTONIC
 1

	)

50 #define 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 #define 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 #define 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 #define 
	#CLOCK_REALTIME_COARSE
 5

	)

58 #define 
	#CLOCK_MONOTONIC_COARSE
 6

	)

60 #define 
	#CLOCK_BOOTTIME
 7

	)

62 #define 
	#CLOCK_REALTIME_ALARM
 8

	)

64 #define 
	#CLOCK_BOOTTIME_ALARM
 9

	)

66 #define 
	#CLOCK_TAI
 11

	)

69 #define 
	#TIMER_ABSTIME
 1

	)

72 #ifdef 
__USE_GNU


73 #include 
	~<bits/timex.h
>

75 
__BEGIN_DECLS


78 extern int 
	$clock_adjtime
 (
__clockid_t
 
__clock_id
, struct 
timex
 *
__utx
) 
__THROW
;

80 
__END_DECLS


	@/usr/include/bits/types.h

23 #ifndef 
_BITS_TYPES_H


24 #define 
	#_BITS_TYPES_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/wordsize.h
>

28 #include 
	~<bits/timesize.h
>

31 typedef unsigned char 
	t__u_char
;

32 typedef unsigned short int 
	t__u_short
;

33 typedef unsigned int 
	t__u_int
;

34 typedef unsigned long int 
	t__u_long
;

37 typedef signed char 
	t__int8_t
;

38 typedef unsigned char 
	t__uint8_t
;

39 typedef signed short int 
	t__int16_t
;

40 typedef unsigned short int 
	t__uint16_t
;

41 typedef signed int 
	t__int32_t
;

42 typedef unsigned int 
	t__uint32_t
;

43 #if 
__WORDSIZE
 == 64

44 typedef signed long int 
	t__int64_t
;

45 typedef unsigned long int 
	t__uint64_t
;

47 
__extension__
 typedef signed long long int 
	t__int64_t
;

48 
__extension__
 typedef unsigned long long int 
	t__uint64_t
;

52 typedef 
__int8_t
 
	t__int_least8_t
;

53 typedef 
__uint8_t
 
	t__uint_least8_t
;

54 typedef 
__int16_t
 
	t__int_least16_t
;

55 typedef 
__uint16_t
 
	t__uint_least16_t
;

56 typedef 
__int32_t
 
	t__int_least32_t
;

57 typedef 
__uint32_t
 
	t__uint_least32_t
;

58 typedef 
__int64_t
 
	t__int_least64_t
;

59 typedef 
__uint64_t
 
	t__uint_least64_t
;

62 #if 
__WORDSIZE
 == 64

63 typedef long int 
	t__quad_t
;

64 typedef unsigned long int 
	t__u_quad_t
;

66 
__extension__
 typedef long long int 
	t__quad_t
;

67 
__extension__
 typedef unsigned long long int 
	t__u_quad_t
;

71 #if 
__WORDSIZE
 == 64

72 typedef long int 
	t__intmax_t
;

73 typedef unsigned long int 
	t__uintmax_t
;

75 
__extension__
 typedef long long int 
	t__intmax_t
;

76 
__extension__
 typedef unsigned long long int 
	t__uintmax_t
;

109 #define 
	#__S16_TYPE
 short int

	)

110 #define 
	#__U16_TYPE
 unsigned short int

	)

111 #define 
	#__S32_TYPE
 int

	)

112 #define 
	#__U32_TYPE
 unsigned int

	)

113 #define 
	#__SLONGWORD_TYPE
 long int

	)

114 #define 
	#__ULONGWORD_TYPE
 unsigned long int

	)

115 #if 
__WORDSIZE
 == 32

116 #define 
	#__SQUAD_TYPE
 
__int64_t


	)

117 #define 
	#__UQUAD_TYPE
 
__uint64_t


	)

118 #define 
	#__SWORD_TYPE
 int

	)

119 #define 
	#__UWORD_TYPE
 unsigned int

	)

120 #define 
	#__SLONG32_TYPE
 long int

	)

121 #define 
	#__ULONG32_TYPE
 unsigned long int

	)

122 #define 
	#__S64_TYPE
 
__int64_t


	)

123 #define 
	#__U64_TYPE
 
__uint64_t


	)

126 #define 
	#__STD_TYPE
 
__extension__
 typedef

	)

127 #elif 
__WORDSIZE
 == 64

128 #define 
	t__SQUAD_TYPE
 long int

	)

129 #define 
	t__UQUAD_TYPE
 unsigned long int

	)

130 #define 
	t__SWORD_TYPE
 long int

	)

131 #define 
	t__UWORD_TYPE
 unsigned long int

	)

132 #define 
	t__SLONG32_TYPE
 int

	)

133 #define 
	t__ULONG32_TYPE
 unsigned int

	)

134 #define 
	t__S64_TYPE
 long int

	)

135 #define 
	t__U64_TYPE
 unsigned long int

	)

137 #define 
	t__STD_TYPE
 typedef

	)

141 #include 
	~<bits/typesizes.h
>

142 #include 
	~<bits/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__ino_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__ino64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__nlink_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__clock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__rlim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__rlim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__useconds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__suseconds_t
;

163 
__STD_TYPE
 
__SUSECONDS64_T_TYPE
 
	g__suseconds64_t
;

165 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

166 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

169 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__clockid_t
;

172 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timer_t
;

175 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

180 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blkcnt_t
;

181 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blkcnt64_t
;

184 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblkcnt_t
;

185 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblkcnt64_t
;

188 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfilcnt_t
;

189 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfilcnt64_t
;

192 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsword_t
;

194 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

197 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__syscall_slong_t
;

199 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__syscall_ulong_t
;

203 typedef 
__off64_t
 
	t__loff_t
;

204 typedef char *
	t__caddr_t
;

207 
__STD_TYPE
 
__SWORD_TYPE
 
	g__intptr_t
;

210 
__STD_TYPE
 
__U32_TYPE
 
	g__socklen_t
;

215 typedef int 
	t__sig_atomic_t
;

220 #if 
__TIMESIZE
 == 64 && 
defined
 
__LIBC


221 #define 
	#__time64_t
 
__time_t


	)

222 #elif 
__TIMESIZE
 != 64

223 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

226 #undef 
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #ifndef 
__FILE_defined


2 #define 
	#__FILE_defined
 1

	)

4 struct 
	g_IO_FILE
;

7 typedef struct 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #ifndef 
____FILE_defined


2 #define 
	#____FILE_defined
 1

	)

4 struct 
	g_IO_FILE
;

5 typedef struct 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #ifndef 
_____fpos64_t_defined


2 #define 
	#_____fpos64_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

5 #include 
	~<bits/types/__mbstate_t.h
>

10 typedef struct 
	s_G_fpos64_t


12 
__off64_t
 
	m__pos
;

13 
__mbstate_t
 
	m__state
;

14 } 
	t__fpos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #ifndef 
_____fpos_t_defined


2 #define 
	#_____fpos_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

5 #include 
	~<bits/types/__mbstate_t.h
>

10 typedef struct 
	s_G_fpos_t


12 
__off_t
 
	m__pos
;

13 
__mbstate_t
 
	m__state
;

14 } 
	t__fpos_t
;

	@/usr/include/bits/types/clock_t.h

1 #ifndef 
__clock_t_defined


2 #define 
	#__clock_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 typedef 
__clock_t
 
	tclock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #ifndef 
__clockid_t_defined


2 #define 
	#__clockid_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 typedef 
__clockid_t
 
	tclockid_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #ifndef 
__cookie_io_functions_t_defined


19 #define 
	#__cookie_io_functions_t_defined
 1

	)

21 #include 
	~<bits/types.h
>

27 typedef 
__ssize_t
 
	tcookie_read_function_t
 (void *
	t__cookie
, char *
	t__buf
,

28 
	tsize_t
 
	t__nbytes
);

36 typedef 
__ssize_t
 
	tcookie_write_function_t
 (void *
	t__cookie
, const char *
	t__buf
,

37 
	tsize_t
 
	t__nbytes
);

45 typedef int 
	tcookie_seek_function_t
 (void *
	t__cookie
, 
	t__off64_t
 *
	t__pos
, int 
	t__w
);

48 typedef int 
	tcookie_close_function_t
 (void *
	t__cookie
);

55 typedef struct 
	s_IO_cookie_io_functions_t


57 
cookie_read_function_t
 *
	mread
;

58 
cookie_write_function_t
 *
	mwrite
;

59 
cookie_seek_function_t
 *
	mseek
;

60 
cookie_close_function_t
 *
	mclose
;

61 } 
	tcookie_io_functions_t
;

	@/usr/include/bits/types/error_t.h

19 #ifndef 
__error_t_defined


20 #define 
	#__error_t_defined
 1

	)

22 typedef int 
	terror_t
;

	@/usr/include/bits/types/locale_t.h

19 #ifndef 
_BITS_TYPES_LOCALE_T_H


20 #define 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 #include 
	~<bits/types/__locale_t.h
>

24 typedef 
__locale_t
 
	tlocale_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #ifndef 
__struct_FILE_defined


19 #define 
	#__struct_FILE_defined
 1

	)

25 #if 
defined
 
_IO_USE_OLD_IO_FILE
 && !defined 
_LIBC


29 #if 
defined
 
_IO_lock_t_defined
 && !defined 
_LIBC


33 #include 
	~<bits/types.h
>

35 struct 
	g_IO_FILE
;

36 struct 
	g_IO_marker
;

37 struct 
	g_IO_codecvt
;

38 struct 
	g_IO_wide_data
;

42 #ifndef 
_IO_lock_t_defined


43 typedef void 
	t_IO_lock_t
;

49 struct 
	s_IO_FILE


51 int 
	m_flags
;

54 char *
	m_IO_read_ptr
;

55 char *
	m_IO_read_end
;

56 char *
	m_IO_read_base
;

57 char *
	m_IO_write_base
;

58 char *
	m_IO_write_ptr
;

59 char *
	m_IO_write_end
;

60 char *
	m_IO_buf_base
;

61 char *
	m_IO_buf_end
;

64 char *
	m_IO_save_base
;

65 char *
	m_IO_backup_base
;

66 char *
	m_IO_save_end
;

68 struct 
_IO_marker
 *
	m_markers
;

70 struct 
_IO_FILE
 *
	m_chain
;

72 int 
	m_fileno
;

73 int 
	m_flags2
;

74 
__off_t
 
	m_old_offset
;

77 unsigned short 
	m_cur_column
;

78 signed char 
	m_vtable_offset
;

79 char 
	m_shortbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifdef 
_IO_USE_OLD_IO_FILE


85 struct 
	s_IO_FILE_complete


87 struct 
_IO_FILE
 
	m_file
;

89 
__off64_t
 
	m_offset
;

91 struct 
_IO_codecvt
 *
	m_codecvt
;

92 struct 
_IO_wide_data
 *
	m_wide_data
;

93 struct 
_IO_FILE
 *
	m_freeres_list
;

94 void *
	m_freeres_buf
;

95 
size_t
 
	m__pad5
;

96 int 
	m_mode
;

98 char 
	m_unused2
[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (
size_t
)];

102 #define 
	#__getc_unlocked_body
(
_fp
) \

103 (
	`__glibc_unlikely
 ((
_fp
)->
_IO_read_ptr
 >= (_fp)->
_IO_read_end
) \

104 ? 
	`__uflow
 (
_fp
) : *(unsigned char *) (_fp)->
_IO_read_ptr
++)

	)

106 #define 
	#__putc_unlocked_body
(
_ch
, 
_fp
) \

107 (
	`__glibc_unlikely
 ((
_fp
)->
_IO_write_ptr
 >= (_fp)->
_IO_write_end
) \

108 ? 
	`__overflow
 (
_fp
, (unsigned char) (
_ch
)) \

109 : (unsigned char) (*(
_fp
)->
_IO_write_ptr
++ = (
_ch
)))

	)

111 #define 
	#_IO_EOF_SEEN
 0x0010

	)

112 #define 
	#__feof_unlocked_body
(
_fp
) (((_fp)->
_flags
 & 
_IO_EOF_SEEN
) != 0)

	)

114 #define 
	#_IO_ERR_SEEN
 0x0020

	)

115 #define 
	#__ferror_unlocked_body
(
_fp
) (((_fp)->
_flags
 & 
_IO_ERR_SEEN
) != 0)

	)

117 #define 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/types/struct_itimerspec.h

1 #ifndef 
__itimerspec_defined


2 #define 
	#__itimerspec_defined
 1

	)

4 #include 
	~<bits/types.h
>

5 #include 
	~<bits/types/struct_timespec.h
>

8 struct 
	sitimerspec


10 struct 
timespec
 
	mit_interval
;

11 struct 
timespec
 
	mit_value
;

	@/usr/include/bits/types/struct_timespec.h

2 #ifndef 
_STRUCT_TIMESPEC


3 #define 
	#_STRUCT_TIMESPEC
 1

	)

5 #include 
	~<bits/types.h
>

6 #include 
	~<bits/endian.h
>

10 struct 
	stimespec


12 
__time_t
 
	mtv_sec
;

13 #if 
__WORDSIZE
 == 64 \

14 || (
defined
 
	m__SYSCALL_WORDSIZE
 && __SYSCALL_WORDSIZE == 64) \

15 || 
__TIMESIZE
 == 32

16 
__syscall_slong_t
 
tv_nsec
;

18 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


20 long int 
	mtv_nsec
;

22 long int 
	mtv_nsec
;

	@/usr/include/bits/types/struct_tm.h

1 #ifndef 
__struct_tm_defined


2 #define 
	#__struct_tm_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 struct 
	stm


9 int 
	mtm_sec
;

10 int 
	mtm_min
;

11 int 
	mtm_hour
;

12 int 
	mtm_mday
;

13 int 
	mtm_mon
;

14 int 
	mtm_year
;

15 int 
	mtm_wday
;

16 int 
	mtm_yday
;

17 int 
	mtm_isdst
;

19 #ifdef 
__USE_MISC


20 long int 
	mtm_gmtoff
;

21 const char *
	mtm_zone
;

23 long int 
	m__tm_gmtoff
;

24 const char *
	m__tm_zone
;

	@/usr/include/bits/types/time_t.h

1 #ifndef 
__time_t_defined


2 #define 
	#__time_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 typedef 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #ifndef 
__timer_t_defined


2 #define 
	#__timer_t_defined
 1

	)

4 #include 
	~<bits/types.h
>

7 typedef 
__timer_t
 
	ttimer_t
;

	@/usr/include/bits/unistd.h

19 #ifndef 
_UNISTD_H


23 extern 
ssize_t
 
	$__read_chk
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

24 
size_t
 
__buflen
)

25 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

26 extern 
ssize_t
 
	`__REDIRECT
 (
__read_alias
, (int 
__fd
, void *
__buf
,

27 
size_t
 
__nbytes
), 
read
)

28 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

29 extern 
ssize_t
 
	`__REDIRECT
 (
__read_chk_warn
,

30 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

31 
size_t
 
__buflen
), 
__read_chk
)

32 
__wur
 
	`__warnattr
 ("read called with bigger length than size of "

35 
__fortify_function
 
__wur
 
ssize_t


36 
	$read
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
)

38 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

40 if (!
	`__builtin_constant_p
 (
__nbytes
))

41 return 
	`__read_chk
 (
__fd
, 
__buf
, 
__nbytes
, 
	`__bos0
 (__buf));

43 if (
__nbytes
 > 
	`__bos0
 (
__buf
))

44 return 
	`__read_chk_warn
 (
__fd
, 
__buf
, 
__nbytes
, 
	`__bos0
 (__buf));

46 return 
	`__read_alias
 (
__fd
, 
__buf
, 
__nbytes
);

47 
	}
}

49 #ifdef 
__USE_UNIX98


50 extern 
ssize_t
 
	$__pread_chk
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

51 
__off_t
 
__offset
, 
size_t
 
__bufsize
)

52 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

53 extern 
ssize_t
 
	$__pread64_chk
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

54 
__off64_t
 
__offset
, 
size_t
 
__bufsize
)

55 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

56 extern 
ssize_t
 
	`__REDIRECT
 (
__pread_alias
,

57 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

58 
__off_t
 
__offset
), 
pread
)

59 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

60 extern 
ssize_t
 
	`__REDIRECT
 (
__pread64_alias
,

61 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

62 
__off64_t
 
__offset
), 
pread64
)

63 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

64 extern 
ssize_t
 
	`__REDIRECT
 (
__pread_chk_warn
,

65 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

66 
__off_t
 
__offset
, 
size_t
 
__bufsize
), 
__pread_chk
)

67 
__wur
 
	`__warnattr
 ("pread called with bigger length than size of "

69 extern 
ssize_t
 
	`__REDIRECT
 (
__pread64_chk_warn
,

70 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
,

71 
__off64_t
 
__offset
, 
size_t
 
__bufsize
),

72 
__pread64_chk
)

73 
__wur
 
	`__warnattr
 ("pread64 called with bigger length than size of "

76 #ifndef 
__USE_FILE_OFFSET64


77 
__fortify_function
 
__wur
 
ssize_t


78 
	$pread
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
, 
__off_t
 
__offset
)

80 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

82 if (!
	`__builtin_constant_p
 (
__nbytes
))

83 return 
	`__pread_chk
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
, 
	`__bos0
 (__buf));

85 if ( 
__nbytes
 > 
	`__bos0
 (
__buf
))

86 return 
	`__pread_chk_warn
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
,

87 
	`__bos0
 (
__buf
));

89 return 
	`__pread_alias
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
);

90 
	}
}

92 
__fortify_function
 
__wur
 
ssize_t


93 
	$pread
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
, 
__off64_t
 
__offset
)

95 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

97 if (!
	`__builtin_constant_p
 (
__nbytes
))

98 return 
	`__pread64_chk
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
, 
	`__bos0
 (__buf));

100 if ( 
__nbytes
 > 
	`__bos0
 (
__buf
))

101 return 
	`__pread64_chk_warn
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
,

102 
	`__bos0
 (
__buf
));

105 return 
	`__pread64_alias
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
);

106 
	}
}

109 #ifdef 
__USE_LARGEFILE64


110 
__fortify_function
 
__wur
 
ssize_t


111 
	$pread64
 (int 
__fd
, void *
__buf
, 
size_t
 
__nbytes
, 
__off64_t
 
__offset
)

113 if (
	`__bos0
 (
__buf
) != (
size_t
) -1)

115 if (!
	`__builtin_constant_p
 (
__nbytes
))

116 return 
	`__pread64_chk
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
, 
	`__bos0
 (__buf));

118 if ( 
__nbytes
 > 
	`__bos0
 (
__buf
))

119 return 
	`__pread64_chk_warn
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
,

120 
	`__bos0
 (
__buf
));

123 return 
	`__pread64_alias
 (
__fd
, 
__buf
, 
__nbytes
, 
__offset
);

124 
	}
}

128 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K


129 extern 
ssize_t
 
	$__readlink_chk
 (const char *
__restrict
 
__path
,

130 char *
__restrict
 
__buf
, 
size_t
 
__len
,

131 
size_t
 
__buflen
)

132 
__THROW
 
	`__nonnull
 ((1, 2)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

133 extern 
ssize_t
 
	`__REDIRECT_NTH
 (
__readlink_alias
,

134 (const char *
__restrict
 
__path
,

135 char *
__restrict
 
__buf
, 
size_t
 
__len
), 
readlink
)

136 
	`__nonnull
 ((1, 2)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 3));

137 extern 
ssize_t
 
	`__REDIRECT_NTH
 (
__readlink_chk_warn
,

138 (const char *
__restrict
 
__path
,

139 char *
__restrict
 
__buf
, 
size_t
 
__len
,

140 
size_t
 
__buflen
), 
__readlink_chk
)

141 
	`__nonnull
 ((1, 2)) 
__wur
 
	`__warnattr
 ("readlink called with bigger length "

144 
__fortify_function
 
	`__nonnull
 ((1, 2)) 
__wur
 
ssize_t


145 
	`__NTH
 (
	$readlink
 (const char *
__restrict
 
__path
, char *__restrict 
__buf
,

146 
size_t
 
__len
))

148 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

150 if (!
	`__builtin_constant_p
 (
__len
))

151 return 
	`__readlink_chk
 (
__path
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

153 if ( 
__len
 > 
	`__bos
 (
__buf
))

154 return 
	`__readlink_chk_warn
 (
__path
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

156 return 
	`__readlink_alias
 (
__path
, 
__buf
, 
__len
);

157 
	}
}

160 #ifdef 
__USE_ATFILE


161 extern 
ssize_t
 
	$__readlinkat_chk
 (int 
__fd
, const char *
__restrict
 
__path
,

162 char *
__restrict
 
__buf
, 
size_t
 
__len
,

163 
size_t
 
__buflen
)

164 
__THROW
 
	`__nonnull
 ((2, 3)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 3, 4));

165 extern 
ssize_t
 
	`__REDIRECT_NTH
 (
__readlinkat_alias
,

166 (int 
__fd
, const char *
__restrict
 
__path
,

167 char *
__restrict
 
__buf
, 
size_t
 
__len
),

168 
readlinkat
)

169 
	`__nonnull
 ((2, 3)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 3, 4));

170 extern 
ssize_t
 
	`__REDIRECT_NTH
 (
__readlinkat_chk_warn
,

171 (int 
__fd
, const char *
__restrict
 
__path
,

172 char *
__restrict
 
__buf
, 
size_t
 
__len
,

173 
size_t
 
__buflen
), 
__readlinkat_chk
)

174 
	`__nonnull
 ((2, 3)) 
__wur
 
	`__warnattr
 ("readlinkat called with bigger "

178 
__fortify_function
 
	`__nonnull
 ((2, 3)) 
__wur
 
ssize_t


179 
	`__NTH
 (
	$readlinkat
 (int 
__fd
, const char *
__restrict
 
__path
,

180 char *
__restrict
 
__buf
, 
size_t
 
__len
))

182 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

184 if (!
	`__builtin_constant_p
 (
__len
))

185 return 
	`__readlinkat_chk
 (
__fd
, 
__path
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

187 if (
__len
 > 
	`__bos
 (
__buf
))

188 return 
	`__readlinkat_chk_warn
 (
__fd
, 
__path
, 
__buf
, 
__len
,

189 
	`__bos
 (
__buf
));

191 return 
	`__readlinkat_alias
 (
__fd
, 
__path
, 
__buf
, 
__len
);

192 
	}
}

195 extern char *
	$__getcwd_chk
 (char *
__buf
, 
size_t
 
__size
, size_t 
__buflen
)

196 
__THROW
 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

197 extern char *
	`__REDIRECT_NTH
 (
__getcwd_alias
,

198 (char *
__buf
, 
size_t
 
__size
), 
getcwd
)

199 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

200 extern char *
	`__REDIRECT_NTH
 (
__getcwd_chk_warn
,

201 (char *
__buf
, 
size_t
 
__size
, size_t 
__buflen
),

202 
__getcwd_chk
)

203 
__wur
 
	`__warnattr
 ("getcwd caller with bigger length than size of "

206 
__fortify_function
 
__wur
 char *

207 
	`__NTH
 (
	$getcwd
 (char *
__buf
, 
size_t
 
__size
))

209 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

211 if (!
	`__builtin_constant_p
 (
__size
))

212 return 
	`__getcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

214 if (
__size
 > 
	`__bos
 (
__buf
))

215 return 
	`__getcwd_chk_warn
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

217 return 
	`__getcwd_alias
 (
__buf
, 
__size
);

218 
	}
}

220 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN_EXTENDED


221 extern char *
	$__getwd_chk
 (char *
__buf
, 
size_t
 
buflen
)

222 
__THROW
 
	`__nonnull
 ((1)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

223 extern char *
	`__REDIRECT_NTH
 (
__getwd_warn
, (char *
__buf
), 
getwd
)

224 
	`__nonnull
 ((1)) 
__wur
 
	`__warnattr
 ("please use getcwd instead, as getwd "

227 
__fortify_function
 
	`__nonnull
 ((1)) 
__attribute_deprecated__
 
__wur
 char *

228 
	`__NTH
 (
	$getwd
 (char *
__buf
))

230 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

231 return 
	`__getwd_chk
 (
__buf
, 
	`__bos
 (__buf));

232 return 
	`__getwd_warn
 (
__buf
);

233 
	}
}

236 extern 
size_t
 
	$__confstr_chk
 (int 
__name
, char *
__buf
, 
size_t
 
__len
,

237 
size_t
 
__buflen
) 
__THROW


238 
	`__attr_access
 ((
__write_only__
, 2, 3));

239 extern 
size_t
 
	`__REDIRECT_NTH
 (
__confstr_alias
, (int 
__name
, char *
__buf
,

240 
size_t
 
__len
), 
confstr
)

241 
	`__attr_access
 ((
__write_only__
, 2, 3));

242 extern 
size_t
 
	`__REDIRECT_NTH
 (
__confstr_chk_warn
,

243 (int 
__name
, char *
__buf
, 
size_t
 
__len
,

244 
size_t
 
__buflen
), 
__confstr_chk
)

245 
	`__warnattr
 ("confstr called with bigger length than size of destination "

248 
__fortify_function
 
size_t


249 
	`__NTH
 (
	$confstr
 (int 
__name
, char *
__buf
, 
size_t
 
__len
))

251 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

253 if (!
	`__builtin_constant_p
 (
__len
))

254 return 
	`__confstr_chk
 (
__name
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

256 if (
	`__bos
 (
__buf
) < 
__len
)

257 return 
	`__confstr_chk_warn
 (
__name
, 
__buf
, 
__len
, 
	`__bos
 (__buf));

259 return 
	`__confstr_alias
 (
__name
, 
__buf
, 
__len
);

260 
	}
}

263 extern int 
	$__getgroups_chk
 (int 
__size
, 
__gid_t
 
__list
[], 
size_t
 
__listlen
)

264 
__THROW
 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 1));

265 extern int 
	`__REDIRECT_NTH
 (
__getgroups_alias
, (int 
__size
, 
__gid_t
 
__list
[]),

266 
getgroups
) 
__wur
 
	`__attr_access
 ((
__write_only__
, 2, 1));

267 extern int 
	`__REDIRECT_NTH
 (
__getgroups_chk_warn
,

268 (int 
__size
, 
__gid_t
 
__list
[], 
size_t
 
__listlen
),

269 
__getgroups_chk
)

270 
__wur
 
	`__warnattr
 ("getgroups called with bigger group count than what "

273 
__fortify_function
 int

274 
	`__NTH
 (
	$getgroups
 (int 
__size
, 
__gid_t
 
__list
[]))

276 if (
	`__bos
 (
__list
) != (
size_t
) -1)

278 if (!
	`__builtin_constant_p
 (
__size
) || __size < 0)

279 return 
	`__getgroups_chk
 (
__size
, 
__list
, 
	`__bos
 (__list));

281 if (
__size
 * sizeof (
__gid_t
) > 
	`__bos
 (
__list
))

282 return 
	`__getgroups_chk_warn
 (
__size
, 
__list
, 
	`__bos
 (__list));

284 return 
	`__getgroups_alias
 (
__size
, 
__list
);

285 
	}
}

288 extern int 
	$__ttyname_r_chk
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
,

289 
size_t
 
__nreal
) 
__THROW
 
	`__nonnull
 ((2))

290 
	`__attr_access
 ((
__write_only__
, 2, 3));

291 extern int 
	`__REDIRECT_NTH
 (
__ttyname_r_alias
, (int 
__fd
, char *
__buf
,

292 
size_t
 
__buflen
), 
ttyname_r
)

293 
	`__nonnull
 ((2));

294 extern int 
	`__REDIRECT_NTH
 (
__ttyname_r_chk_warn
,

295 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
,

296 
size_t
 
__nreal
), 
__ttyname_r_chk
)

297 
	`__nonnull
 ((2)) 
	`__warnattr
 ("ttyname_r called with bigger buflen than "

300 
__fortify_function
 int

301 
	`__NTH
 (
	$ttyname_r
 (int 
__fd
, char *
__buf
, 
size_t
 
__buflen
))

303 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

305 if (!
	`__builtin_constant_p
 (
__buflen
))

306 return 
	`__ttyname_r_chk
 (
__fd
, 
__buf
, 
__buflen
, 
	`__bos
 (__buf));

308 if (
__buflen
 > 
	`__bos
 (
__buf
))

309 return 
	`__ttyname_r_chk_warn
 (
__fd
, 
__buf
, 
__buflen
, 
	`__bos
 (__buf));

311 return 
	`__ttyname_r_alias
 (
__fd
, 
__buf
, 
__buflen
);

312 
	}
}

315 #ifdef 
__USE_POSIX199506


316 extern int 
	$__getlogin_r_chk
 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
)

317 
	`__nonnull
 ((1)) 
	`__attr_access
 ((
__write_only__
, 1, 2));

318 extern int 
	`__REDIRECT
 (
__getlogin_r_alias
, (char *
__buf
, 
size_t
 
__buflen
),

319 
getlogin_r
) 
	`__nonnull
 ((1));

320 extern int 
	`__REDIRECT
 (
__getlogin_r_chk_warn
,

321 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
),

322 
__getlogin_r_chk
)

323 
	`__nonnull
 ((1)) 
	`__warnattr
 ("getlogin_r called with bigger buflen than "

326 
__fortify_function
 int

327 
	$getlogin_r
 (char *
__buf
, 
size_t
 
__buflen
)

329 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

331 if (!
	`__builtin_constant_p
 (
__buflen
))

332 return 
	`__getlogin_r_chk
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

334 if (
__buflen
 > 
	`__bos
 (
__buf
))

335 return 
	`__getlogin_r_chk_warn
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

337 return 
	`__getlogin_r_alias
 (
__buf
, 
__buflen
);

338 
	}
}

342 #if 
defined
 
__USE_MISC
 || defined 
__USE_UNIX98


343 extern int 
	$__gethostname_chk
 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
)

344 
__THROW
 
	`__nonnull
 ((1)) 
	`__attr_access
 ((
__write_only__
, 1, 2));

345 extern int 
	`__REDIRECT_NTH
 (
__gethostname_alias
, (char *
__buf
, 
size_t
 
__buflen
),

346 
gethostname
)

347 
	`__nonnull
 ((1)) 
	`__attr_access
 ((
__write_only__
, 1, 2));

348 extern int 
	`__REDIRECT_NTH
 (
__gethostname_chk_warn
,

349 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
),

350 
__gethostname_chk
)

351 
	`__nonnull
 ((1)) 
	`__warnattr
 ("gethostname called with bigger buflen than "

354 
__fortify_function
 int

355 
	`__NTH
 (
	$gethostname
 (char *
__buf
, 
size_t
 
__buflen
))

357 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

359 if (!
	`__builtin_constant_p
 (
__buflen
))

360 return 
	`__gethostname_chk
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

362 if (
__buflen
 > 
	`__bos
 (
__buf
))

363 return 
	`__gethostname_chk_warn
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

365 return 
	`__gethostname_alias
 (
__buf
, 
__buflen
);

366 
	}
}

370 #if 
defined
 
__USE_MISC
 || (defined 
__USE_XOPEN
 && !defined 
__USE_UNIX98
)

371 extern int 
	$__getdomainname_chk
 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
)

372 
__THROW
 
	`__nonnull
 ((1)) 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

373 extern int 
	`__REDIRECT_NTH
 (
__getdomainname_alias
, (char *
__buf
,

374 
size_t
 
__buflen
),

375 
getdomainname
) 
	`__nonnull
 ((1))

376 
__wur
 
	`__attr_access
 ((
__write_only__
, 1, 2));

377 extern int 
	`__REDIRECT_NTH
 (
__getdomainname_chk_warn
,

378 (char *
__buf
, 
size_t
 
__buflen
, size_t 
__nreal
),

379 
__getdomainname_chk
)

380 
	`__nonnull
 ((1)) 
__wur
 
	`__warnattr
 ("getdomainname called with bigger "

384 
__fortify_function
 int

385 
	`__NTH
 (
	$getdomainname
 (char *
__buf
, 
size_t
 
__buflen
))

387 if (
	`__bos
 (
__buf
) != (
size_t
) -1)

389 if (!
	`__builtin_constant_p
 (
__buflen
))

390 return 
	`__getdomainname_chk
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

392 if (
__buflen
 > 
	`__bos
 (
__buf
))

393 return 
	`__getdomainname_chk_warn
 (
__buf
, 
__buflen
, 
	`__bos
 (__buf));

395 return 
	`__getdomainname_alias
 (
__buf
, 
__buflen
);

396 
	}
}

	@/usr/include/bits/unistd_ext.h

19 #ifndef 
_UNISTD_H


23 #ifdef 
__USE_GNU


34 extern 
__pid_t
 
	$gettid
 (void) 
__THROW
;

	@/usr/include/bits/waitflags.h

19 #if !
defined
 
_SYS_WAIT_H
 && !defined 
_STDLIB_H


25 #define 
	#WNOHANG
 1

	)

26 #define 
	#WUNTRACED
 2

	)

29 #if 
defined
 
__USE_XOPEN_EXTENDED
 || defined 
__USE_XOPEN2K8


30 #define 
	#WSTOPPED
 2

	)

31 #define 
	#WEXITED
 4

	)

32 #define 
	#WCONTINUED
 8

	)

33 #define 
	#WNOWAIT
 0x01000000

	)

36 #define 
	#__WNOTHREAD
 0x20000000

	)

38 #define 
	#__WALL
 0x40000000

	)

39 #define 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #if !
defined
 
_SYS_WAIT_H
 && !defined 
_STDLIB_H


28 #define 
	#__WEXITSTATUS
(
status
) (((status) & 0xff00) >> 8)

	)

31 #define 
	#__WTERMSIG
(
status
) ((status) & 0x7f)

	)

34 #define 
	#__WSTOPSIG
(
status
) 
	`__WEXITSTATUS
(status)

	)

37 #define 
	#__WIFEXITED
(
status
) (
	`__WTERMSIG
(status) == 0)

	)

40 #define 
	#__WIFSIGNALED
(
status
) \

41 (((signed char) (((
status
) & 0x7f) + 1) >> 1) > 0)

	)

44 #define 
	#__WIFSTOPPED
(
status
) (((status) & 0xff) == 0x7f)

	)

48 #ifdef 
WCONTINUED


49 #define 
	#__WIFCONTINUED
(
status
) ((status) == 
__W_CONTINUED
)

	)

53 #define 
	#__WCOREDUMP
(
status
) ((status) & 
__WCOREFLAG
)

	)

56 #define 
	#__W_EXITCODE
(
ret
, 
sig
) ((ret) << 8 | (sig))

	)

57 #define 
	#__W_STOPCODE
(
sig
) ((sig) << 8 | 0x7f)

	)

58 #define 
	#__W_CONTINUED
 0xffff

	)

59 #define 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/endian.h

18 #ifndef 
_ENDIAN_H


19 #define 
	#_ENDIAN_H
 1

	)

21 #include 
	~<features.h
>

24 #include 
	~<bits/endian.h
>

26 #ifdef 
__USE_MISC


27 #define 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 #define 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 #define 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 #define 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #if 
defined
 
__USE_MISC
 && !defined 
__ASSEMBLER__


35 #include 
	~<bits/byteswap.h
>

36 #include 
	~<bits/uintn-identity.h
>

38 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


39 #define 
	#htobe16
(
x
) 
	`__bswap_16
 (x)

	)

40 #define 
	#htole16
(
x
) 
	`__uint16_identity
 (x)

	)

41 #define 
	#be16toh
(
x
) 
	`__bswap_16
 (x)

	)

42 #define 
	#le16toh
(
x
) 
	`__uint16_identity
 (x)

	)

44 #define 
	#htobe32
(
x
) 
	`__bswap_32
 (x)

	)

45 #define 
	#htole32
(
x
) 
	`__uint32_identity
 (x)

	)

46 #define 
	#be32toh
(
x
) 
	`__bswap_32
 (x)

	)

47 #define 
	#le32toh
(
x
) 
	`__uint32_identity
 (x)

	)

49 #define 
	#htobe64
(
x
) 
	`__bswap_64
 (x)

	)

50 #define 
	#htole64
(
x
) 
	`__uint64_identity
 (x)

	)

51 #define 
	#be64toh
(
x
) 
	`__bswap_64
 (x)

	)

52 #define 
	#le64toh
(
x
) 
	`__uint64_identity
 (x)

	)

55 #define 
	#htobe16
(
x
) 
	`__uint16_identity
 (x)

	)

56 #define 
	#htole16
(
x
) 
	`__bswap_16
 (x)

	)

57 #define 
	#be16toh
(
x
) 
	`__uint16_identity
 (x)

	)

58 #define 
	#le16toh
(
x
) 
	`__bswap_16
 (x)

	)

60 #define 
	#htobe32
(
x
) 
	`__uint32_identity
 (x)

	)

61 #define 
	#htole32
(
x
) 
	`__bswap_32
 (x)

	)

62 #define 
	#be32toh
(
x
) 
	`__uint32_identity
 (x)

	)

63 #define 
	#le32toh
(
x
) 
	`__bswap_32
 (x)

	)

65 #define 
	#htobe64
(
x
) 
	`__uint64_identity
 (x)

	)

66 #define 
	#htole64
(
x
) 
	`__bswap_64
 (x)

	)

67 #define 
	#be64toh
(
x
) 
	`__uint64_identity
 (x)

	)

68 #define 
	#le64toh
(
x
) 
	`__bswap_64
 (x)

	)

	@/usr/include/features.h

18 #ifndef 
_FEATURES_H


19 #define 
	#_FEATURES_H
 1

	)

120 #undef 
__USE_ISOC11


121 #undef 
__USE_ISOC99


122 #undef 
__USE_ISOC95


123 #undef 
__USE_ISOCXX11


124 #undef 
__USE_POSIX


125 #undef 
__USE_POSIX2


126 #undef 
__USE_POSIX199309


127 #undef 
__USE_POSIX199506


128 #undef 
__USE_XOPEN


129 #undef 
__USE_XOPEN_EXTENDED


130 #undef 
__USE_UNIX98


131 #undef 
__USE_XOPEN2K


132 #undef 
__USE_XOPEN2KXSI


133 #undef 
__USE_XOPEN2K8


134 #undef 
__USE_XOPEN2K8XSI


135 #undef 
__USE_LARGEFILE


136 #undef 
__USE_LARGEFILE64


137 #undef 
__USE_FILE_OFFSET64


138 #undef 
__USE_MISC


139 #undef 
__USE_ATFILE


140 #undef 
__USE_GNU


141 #undef 
__USE_FORTIFY_LEVEL


142 #undef 
__KERNEL_STRICT_NAMES


143 #undef 
__GLIBC_USE_ISOC2X


144 #undef 
__GLIBC_USE_DEPRECATED_GETS


145 #undef 
__GLIBC_USE_DEPRECATED_SCANF


149 #ifndef 
_LOOSE_KERNEL_NAMES


150 #define 
	#__KERNEL_STRICT_NAMES


	)

160 #if 
defined
 
__GNUC__
 && defined 
__GNUC_MINOR__


161 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) \

162 ((
__GNUC__
 << 16) + 
__GNUC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

164 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) 0

	)

171 #if 
defined
 
__clang_major__
 && defined 
__clang_minor__


172 #define 
	#__glibc_clang_prereq
(
maj
, 
min
) \

173 ((
__clang_major__
 << 16) + 
__clang_minor__
 >= ((
maj
) << 16) + (
min
))

	)

175 #define 
	#__glibc_clang_prereq
(
maj
, 
min
) 0

	)

179 #define 
	#__GLIBC_USE
(
F
) 
__GLIBC_USE_
 ## 
	)
F

185 #if (
defined
 
_BSD_SOURCE
 || defined 
_SVID_SOURCE
) \

186 && !
defined
 
	g_DEFAULT_SOURCE


188 #undef 
_DEFAULT_SOURCE


189 #define 
	#_DEFAULT_SOURCE
 1

	)

193 #ifdef 
_GNU_SOURCE


194 #undef 
_ISOC95_SOURCE


195 #define 
	#_ISOC95_SOURCE
 1

	)

196 #undef 
_ISOC99_SOURCE


197 #define 
	#_ISOC99_SOURCE
 1

	)

198 #undef 
_ISOC11_SOURCE


199 #define 
	#_ISOC11_SOURCE
 1

	)

200 #undef 
_ISOC2X_SOURCE


201 #define 
	#_ISOC2X_SOURCE
 1

	)

202 #undef 
_POSIX_SOURCE


203 #define 
	#_POSIX_SOURCE
 1

	)

204 #undef 
_POSIX_C_SOURCE


205 #define 
	#_POSIX_C_SOURCE
 200809L

	)

206 #undef 
_XOPEN_SOURCE


207 #define 
	#_XOPEN_SOURCE
 700

	)

208 #undef 
_XOPEN_SOURCE_EXTENDED


209 #define 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #undef 
_LARGEFILE64_SOURCE


211 #define 
	#_LARGEFILE64_SOURCE
 1

	)

212 #undef 
_DEFAULT_SOURCE


213 #define 
	#_DEFAULT_SOURCE
 1

	)

214 #undef 
_ATFILE_SOURCE


215 #define 
	#_ATFILE_SOURCE
 1

	)

220 #if (
defined
 
_DEFAULT_SOURCE
 \

221 || (!
defined
 
	g__STRICT_ANSI__
 \

222 && !
defined
 
	g_ISOC99_SOURCE
 && !defined 
	g_ISOC11_SOURCE
 \

223 && !
defined
 
	g_ISOC2X_SOURCE
 \

224 && !
defined
 
	g_POSIX_SOURCE
 && !defined 
	g_POSIX_C_SOURCE
 \

225 && !
defined
 
	g_XOPEN_SOURCE
))

226 #undef 
_DEFAULT_SOURCE


227 #define 
	#_DEFAULT_SOURCE
 1

	)

231 #if (
defined
 
_ISOC2X_SOURCE
 \

232 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 #define 
	#__GLIBC_USE_ISOC2X
 1

	)

235 #define 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #if (
defined
 
_ISOC11_SOURCE
 || defined 
_ISOC2X_SOURCE
 \

240 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 #define 
	#__USE_ISOC11
 1

	)

245 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

246 || 
defined
 
_ISOC2X_SOURCE
 \

247 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 #define 
	#__USE_ISOC99
 1

	)

252 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

253 || 
defined
 
_ISOC2X_SOURCE
 \

254 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 #define 
	#__USE_ISOC95
 1

	)

258 #ifdef 
__cplusplus


260 #if 
__cplusplus
 >= 201703L

261 #define 
	#__USE_ISOC11
 1

	)

265 #if 
__cplusplus
 >= 201103L || 
defined
 
__GXX_EXPERIMENTAL_CXX0X__


266 #define 
	#__USE_ISOCXX11
 1

	)

267 #define 
	#__USE_ISOC99
 1

	)

274 #ifdef 
_DEFAULT_SOURCE


275 #if !
defined
 
_POSIX_SOURCE
 && !defined 
_POSIX_C_SOURCE


276 #define 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #undef 
_POSIX_SOURCE


279 #define 
	#_POSIX_SOURCE
 1

	)

280 #undef 
_POSIX_C_SOURCE


281 #define 
	#_POSIX_C_SOURCE
 200809L

	)

284 #if ((!
defined
 
__STRICT_ANSI__
 \

285 || (
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
defined
 
_POSIX_SOURCE
 && !defined 
_POSIX_C_SOURCE
)

287 #define 
	#_POSIX_SOURCE
 1

	)

288 #if 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 #define 
	#_POSIX_C_SOURCE
 2

	)

290 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 #define 
	#_POSIX_C_SOURCE
 199506L

	)

292 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 #define 
	#_POSIX_C_SOURCE
 200112L

	)

295 #define 
	#_POSIX_C_SOURCE
 200809L

	)

297 #define 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #if ((!
defined
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
defined
 
_REENTRANT
 || defined 
_THREAD_SAFE
))

308 #define 
	#_POSIX_SOURCE
 1

	)

309 #undef 
_POSIX_C_SOURCE


310 #define 
	#_POSIX_C_SOURCE
 199506L

	)

313 #if (
defined
 
_POSIX_SOURCE
 \

314 || (
defined
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
defined
 
_XOPEN_SOURCE
)

316 #define 
	#__USE_POSIX
 1

	)

319 #if 
defined
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 2 || defined 
_XOPEN_SOURCE


320 #define 
	#__USE_POSIX2
 1

	)

323 #if 
defined
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 #define 
	#__USE_POSIX199309
 1

	)

327 #if 
defined
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 #define 
	#__USE_POSIX199506
 1

	)

331 #if 
defined
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 #define 
	#__USE_XOPEN2K
 1

	)

333 #undef 
__USE_ISOC95


334 #define 
	#__USE_ISOC95
 1

	)

335 #undef 
__USE_ISOC99


336 #define 
	#__USE_ISOC99
 1

	)

339 #if 
defined
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 #define 
	#__USE_XOPEN2K8
 1

	)

341 #undef 
_ATFILE_SOURCE


342 #define 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 #define 
	#__USE_XOPEN
 1

	)

347 #if (
_XOPEN_SOURCE
 - 0) >= 500

348 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

349 #define 
	#__USE_UNIX98
 1

	)

350 #undef 
_LARGEFILE_SOURCE


351 #define 
	#_LARGEFILE_SOURCE
 1

	)

352 #if (
_XOPEN_SOURCE
 - 0) >= 600

353 #if (
_XOPEN_SOURCE
 - 0) >= 700

354 #define 
	#__USE_XOPEN2K8
 1

	)

355 #define 
	#__USE_XOPEN2K8XSI
 1

	)

357 #define 
	#__USE_XOPEN2K
 1

	)

358 #define 
	#__USE_XOPEN2KXSI
 1

	)

359 #undef 
__USE_ISOC95


360 #define 
	#__USE_ISOC95
 1

	)

361 #undef 
__USE_ISOC99


362 #define 
	#__USE_ISOC99
 1

	)

365 #ifdef 
_XOPEN_SOURCE_EXTENDED


366 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifdef 
_LARGEFILE_SOURCE


372 #define 
	#__USE_LARGEFILE
 1

	)

375 #ifdef 
_LARGEFILE64_SOURCE


376 #define 
	#__USE_LARGEFILE64
 1

	)

379 #if 
defined
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 #define 
	#__USE_FILE_OFFSET64
 1

	)

383 #if 
defined
 
_DEFAULT_SOURCE


384 #define 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 #define 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 #define 
	#__USE_GNU
 1

	)

395 #if 
defined
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

396 #if !
defined
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

397 #warning 
_FORTIFY_SOURCE
 
requires
 
compiling
 
with
 
optimization
 (-
O
)

398 #elif !
__GNUC_PREREQ
 (4, 1)

399 #warning 
_FORTIFY_SOURCE
 
requires
 
GCC
 4.1 
or
 
later


400 #elif 
_FORTIFY_SOURCE
 > 1

401 #define 
	#__USE_FORTIFY_LEVEL
 2

	)

403 #define 
	#__USE_FORTIFY_LEVEL
 1

	)

406 #ifndef 
__USE_FORTIFY_LEVEL


407 #define 
	#__USE_FORTIFY_LEVEL
 0

	)

414 #if 
defined
 
__cplusplus
 ? __cplusplus >= 201402L : defined 
__USE_ISOC11


415 #define 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

417 #define 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

432 #if (
defined
 
__USE_GNU
 \

433 && (
defined
 
	g__cplusplus
 \

434 ? (
	g__cplusplus
 < 201103L && !
defined
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

435 : (!
defined
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

436 #define 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

438 #define 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

443 #include 
	~<stdc-predef.h
>

451 #undef 
__GNU_LIBRARY__


452 #define 
	#__GNU_LIBRARY__
 6

	)

456 #define 
	#__GLIBC__
 2

	)

457 #define 
	#__GLIBC_MINOR__
 32

	)

459 #define 
	#__GLIBC_PREREQ
(
maj
, 
min
) \

460 ((
__GLIBC__
 << 16) + 
__GLIBC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

463 #ifndef 
__ASSEMBLER__


464 #ifndef 
_SYS_CDEFS_H


465 #include 
	~<sys/cdefs.h
>

470 #if 
defined
 
__USE_FILE_OFFSET64
 && !defined 
__REDIRECT


471 #define 
	#__USE_LARGEFILE
 1

	)

472 #define 
	#__USE_LARGEFILE64
 1

	)

478 #if 
__GNUC_PREREQ
 (2, 7) && 
defined
 
__OPTIMIZE__
 \

479 && !
defined
 
	g__OPTIMIZE_SIZE__
 && !defined 
	g__NO_INLINE__
 \

480 && 
defined
 
	g__extern_inline


481 #define 
	#__USE_EXTERN_INLINES
 1

	)

489 #include 
	~<gnu/stubs.h
>

	@/usr/include/strings.h

18 #ifndef 
_STRINGS_H


19 #define 
	#_STRINGS_H
 1

	)

21 #include 
	~<features.h
>

22 #define 
	#__need_size_t


	)

23 #include 
	~<stddef.h
>

26 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (4, 4)

27 #define 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K8


34 extern int 
	$bcmp
 (const void *
__s1
, const void *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

38 extern void 
	$bcopy
 (const void *
__src
, void *
__dest
, 
size_t
 
__n
)

39 
__THROW
 
	`__nonnull
 ((1, 2));

42 extern void 
	$bzero
 (void *
__s
, 
size_t
 
__n
) 
__THROW
 
	`__nonnull
 ((1));

45 #ifdef 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 extern char *
	`index
 (char *
__s
, int 
__c
)

49 
__THROW
 
	`__asm
 ("index") 
__attribute_pure__
 
	`__nonnull
 ((1));

50 extern const char *
	`index
 (const char *
__s
, int 
__c
)

51 
__THROW
 
	`__asm
 ("index") 
__attribute_pure__
 
	`__nonnull
 ((1));

53 #if 
defined
 
__OPTIMIZE__


54 
__extern_always_inline
 char *

55 
	`index
 (char *
__s
, int 
__c
) 
__THROW


57 return 
	`__builtin_index
 (
__s
, 
__c
);

60 
__extern_always_inline
 const char *

61 
	`index
 (const char *
__s
, int 
__c
) 
__THROW


63 return 
	`__builtin_index
 (
__s
, 
__c
);

66 
	}
}

68 extern char *
	$index
 (const char *
__s
, int 
__c
)

69 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

73 #ifdef 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 extern char *
	`rindex
 (char *
__s
, int 
__c
)

77 
__THROW
 
	`__asm
 ("rindex") 
__attribute_pure__
 
	`__nonnull
 ((1));

78 extern const char *
	`rindex
 (const char *
__s
, int 
__c
)

79 
__THROW
 
	`__asm
 ("rindex") 
__attribute_pure__
 
	`__nonnull
 ((1));

81 #if 
defined
 
__OPTIMIZE__


82 
__extern_always_inline
 char *

83 
	`rindex
 (char *
__s
, int 
__c
) 
__THROW


85 return 
	`__builtin_rindex
 (
__s
, 
__c
);

88 
__extern_always_inline
 const char *

89 
	`rindex
 (const char *
__s
, int 
__c
) 
__THROW


91 return 
	`__builtin_rindex
 (
__s
, 
__c
);

94 
	}
}

96 extern char *
	$rindex
 (const char *
__s
, int 
__c
)

97 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1));

101 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K8
 || defined 
__USE_XOPEN2K8XSI


104 extern int 
	$ffs
 (int 
__i
) 
__THROW
 
__attribute_const__
;

109 #ifdef 
__USE_MISC


110 extern int 
	$ffsl
 (long int 
__l
) 
__THROW
 
__attribute_const__
;

111 
__extension__
 extern int 
	$ffsll
 (long long int 
__ll
)

112 
__THROW
 
__attribute_const__
;

116 extern int 
	$strcasecmp
 (const char *
__s1
, const char *
__s2
)

117 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

120 extern int 
	$strncasecmp
 (const char *
__s1
, const char *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 #include 
	~<bits/types/locale_t.h
>

128 extern int 
	$strcasecmp_l
 (const char *
__s1
, const char *
__s2
, 
locale_t
 
__loc
)

129 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 3));

133 extern int 
	$strncasecmp_l
 (const char *
__s1
, const char *
__s2
,

134 
size_t
 
__n
, 
locale_t
 
__loc
)

135 
__THROW
 
__attribute_pure__
 
	`__nonnull
 ((1, 2, 4));

138 
__END_DECLS


140 #if 
	`__GNUC_PREREQ
 (3,4) && 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
defined
 
__fortify_function


143 #if 
defined
 
__USE_MISC
 || !defined 
__USE_XOPEN2K8


144 #include 
	~<bits/strings_fortified.h
>

	@/usr/include/sys/select.h

21 #ifndef 
_SYS_SELECT_H


22 #define 
	#_SYS_SELECT_H
 1

	)

24 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

30 #include 
	~<bits/select.h
>

33 #include 
	~<bits/types/sigset_t.h
>

36 #include 
	~<bits/types/time_t.h
>

37 #include 
	~<bits/types/struct_timeval.h
>

38 #ifdef 
__USE_XOPEN2K


39 #include 
	~<bits/types/struct_timespec.h
>

42 #ifndef 
__suseconds_t_defined


43 typedef 
__suseconds_t
 
	tsuseconds_t
;

44 #define 
	#__suseconds_t_defined


	)

49 typedef long int 
	t__fd_mask
;

52 #undef 
__NFDBITS


54 #define 
	#__NFDBITS
 (8 * (int) sizeof (
__fd_mask
))

	)

55 #define 
	#__FD_ELT
(
d
) ((d) / 
__NFDBITS
)

	)

56 #define 
	#__FD_MASK
(
d
) ((
__fd_mask
) (1UL << ((d) % 
__NFDBITS
)))

	)

63 #ifdef 
__USE_XOPEN


64 
__fd_mask
 
	mfds_bits
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 #define 
	#__FDS_BITS
(
set
) ((set)->
fds_bits
)

	)

67 
__fd_mask
 
	m__fds_bits
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 #define 
	#__FDS_BITS
(
set
) ((set)->
__fds_bits
)

	)

70 } 
	tfd_set
;

73 #define 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifdef 
__USE_MISC


77 typedef 
__fd_mask
 
	tfd_mask
;

80 #define 
	#NFDBITS
 
__NFDBITS


	)

85 #define 
	#FD_SET
(
fd
, 
fdsetp
) 
	`__FD_SET
 (fd, fdsetp)

	)

86 #define 
	#FD_CLR
(
fd
, 
fdsetp
) 
	`__FD_CLR
 (fd, fdsetp)

	)

87 #define 
	#FD_ISSET
(
fd
, 
fdsetp
) 
	`__FD_ISSET
 (fd, fdsetp)

	)

88 #define 
	#FD_ZERO
(
fdsetp
) 
	`__FD_ZERO
 (fdsetp)

	)

91 
__BEGIN_DECLS


101 extern int 
select
 (int 
__nfds
, 
fd_set
 *
__restrict
 
__readfds
,

102 
fd_set
 *
__restrict
 
__writefds
,

103 
fd_set
 *
__restrict
 
__exceptfds
,

104 struct 
timeval
 *
__restrict
 
__timeout
);

106 #ifdef 
__USE_XOPEN2K


113 extern int 
pselect
 (int 
__nfds
, 
fd_set
 *
__restrict
 
__readfds
,

114 
fd_set
 *
__restrict
 
__writefds
,

115 
fd_set
 *
__restrict
 
__exceptfds
,

116 const struct 
timespec
 *
__restrict
 
__timeout
,

117 const 
__sigset_t
 *
__restrict
 
__sigmask
);

122 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__GNUC__


123 #include 
	~<bits/select2.h
>

126 
	g__END_DECLS


	@/usr/include/sys/ttydefaults.h

40 #ifndef 
_SYS_TTYDEFAULTS_H_


41 #define 
	#_SYS_TTYDEFAULTS_H_


	)

46 #define 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 #define 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 #define 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 #define 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 #define 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 #define 
	#CTRL
(
x
) (x&037)

	)

56 #define 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifdef 
_POSIX_VDISABLE


58 #define 
	#CEOL
 
_POSIX_VDISABLE


	)

60 #define 
	#CEOL
 '\0'

	)

62 #define 
	#CERASE
 0177

	)

63 #define 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifdef 
_POSIX_VDISABLE


65 #define 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 #define 
	#CSTATUS
 '\0'

	)

69 #define 
	#CKILL
 
	`CTRL
('u')

	)

70 #define 
	#CMIN
 1

	)

71 #define 
	#CQUIT
 034

	)

72 #define 
	#CSUSP
 
	`CTRL
('z')

	)

73 #define 
	#CTIME
 0

	)

74 #define 
	#CDSUSP
 
	`CTRL
('y')

	)

75 #define 
	#CSTART
 
	`CTRL
('q')

	)

76 #define 
	#CSTOP
 
	`CTRL
('s')

	)

77 #define 
	#CLNEXT
 
	`CTRL
('v')

	)

78 #define 
	#CDISCARD
 
	`CTRL
('o')

	)

79 #define 
	#CWERASE
 
	`CTRL
('w')

	)

80 #define 
	#CREPRINT
 
	`CTRL
('r')

	)

81 #define 
	#CEOT
 
CEOF


	)

83 #define 
	#CBRK
 
CEOL


	)

84 #define 
	#CRPRNT
 
CREPRINT


	)

85 #define 
	#CFLUSH
 
CDISCARD


	)

93 #ifdef 
TTYDEFCHARS


94 
cc_t
 
	gttydefchars
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #undef 
TTYDEFCHARS


	@/usr/include/asm/ioctls.h

1 #include 
	~<asm-generic/ioctls.h
>

	@/usr/include/bits/byteswap.h

19 #if !
defined
 
_BYTESWAP_H
 && !defined 
_NETINET_IN_H
 && !defined 
_ENDIAN_H


23 #ifndef 
_BITS_BYTESWAP_H


24 #define 
	#_BITS_BYTESWAP_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

30 #define 
	#__bswap_constant_16
(
x
) \

31 ((
__uint16_t
) ((((
x
) >> 8) & 0xff) | (((x) & 0xff) << 8)))

	)

33 static 
__inline
 
__uint16_t


34 
	$__bswap_16
 (
__uint16_t
 
__bsx
)

36 #if 
	`__GNUC_PREREQ
 (4, 8)

37 return 
	`__builtin_bswap16
 (
__bsx
);

39 return 
	`__bswap_constant_16
 (
__bsx
);

41 
	}
}

44 #define 
	#__bswap_constant_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
) & 0x0000ff00u) << 8) | (((x) & 0x000000ffu) << 24))

	)

48 static 
__inline
 
__uint32_t


49 
	$__bswap_32
 (
__uint32_t
 
__bsx
)

51 #if 
	`__GNUC_PREREQ
 (4, 3)

52 return 
	`__builtin_bswap32
 (
__bsx
);

54 return 
	`__bswap_constant_32
 (
__bsx
);

56 
	}
}

59 #define 
	#__bswap_constant_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
) & 0x00000000000000ffull) << 56))

	)

69 
__extension__
 static 
__inline
 
__uint64_t


70 
	$__bswap_64
 (
__uint64_t
 
__bsx
)

72 #if 
	`__GNUC_PREREQ
 (4, 3)

73 return 
	`__builtin_bswap64
 (
__bsx
);

75 return 
	`__bswap_constant_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/endianness.h

1 #ifndef 
_BITS_ENDIANNESS_H


2 #define 
	#_BITS_ENDIANNESS_H
 1

	)

4 #ifndef 
_BITS_ENDIAN_H


9 #define 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #ifndef 
_FCNTL_H


37 #ifdef 
__USE_GNU


38 #include 
	~<bits/types/struct_iovec.h
>

42 #define 
	#O_ACCMODE
 0003

	)

43 #define 
	#O_RDONLY
 00

	)

44 #define 
	#O_WRONLY
 01

	)

45 #define 
	#O_RDWR
 02

	)

46 #ifndef 
O_CREAT


47 #define 
	#O_CREAT
 0100

	)

49 #ifndef 
O_EXCL


50 #define 
	#O_EXCL
 0200

	)

52 #ifndef 
O_NOCTTY


53 #define 
	#O_NOCTTY
 0400

	)

55 #ifndef 
O_TRUNC


56 #define 
	#O_TRUNC
 01000

	)

58 #ifndef 
O_APPEND


59 #define 
	#O_APPEND
 02000

	)

61 #ifndef 
O_NONBLOCK


62 #define 
	#O_NONBLOCK
 04000

	)

64 #ifndef 
O_NDELAY


65 #define 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #ifndef 
O_SYNC


68 #define 
	#O_SYNC
 04010000

	)

70 #define 
	#O_FSYNC
 
O_SYNC


	)

71 #ifndef 
O_ASYNC


72 #define 
	#O_ASYNC
 020000

	)

74 #ifndef 
__O_LARGEFILE


75 #define 
	#__O_LARGEFILE
 0100000

	)

78 #ifndef 
__O_DIRECTORY


79 #define 
	#__O_DIRECTORY
 0200000

	)

81 #ifndef 
__O_NOFOLLOW


82 #define 
	#__O_NOFOLLOW
 0400000

	)

84 #ifndef 
__O_CLOEXEC


85 #define 
	#__O_CLOEXEC
 02000000

	)

87 #ifndef 
__O_DIRECT


88 #define 
	#__O_DIRECT
 040000

	)

90 #ifndef 
__O_NOATIME


91 #define 
	#__O_NOATIME
 01000000

	)

93 #ifndef 
__O_PATH


94 #define 
	#__O_PATH
 010000000

	)

96 #ifndef 
__O_DSYNC


97 #define 
	#__O_DSYNC
 010000

	)

99 #ifndef 
__O_TMPFILE


100 #define 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #ifndef 
F_GETLK


104 #ifndef 
__USE_FILE_OFFSET64


105 #define 
	#F_GETLK
 5

	)

106 #define 
	#F_SETLK
 6

	)

107 #define 
	#F_SETLKW
 7

	)

109 #define 
	#F_GETLK
 
F_GETLK64


	)

110 #define 
	#F_SETLK
 
F_SETLK64


	)

111 #define 
	#F_SETLKW
 
F_SETLKW64


	)

114 #ifndef 
F_GETLK64


115 #define 
	#F_GETLK64
 12

	)

116 #define 
	#F_SETLK64
 13

	)

117 #define 
	#F_SETLKW64
 14

	)

131 #ifdef 
__USE_GNU


132 #define 
	#F_OFD_GETLK
 36

	)

133 #define 
	#F_OFD_SETLK
 37

	)

134 #define 
	#F_OFD_SETLKW
 38

	)

137 #ifdef 
__USE_LARGEFILE64


138 #define 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifdef 
__USE_XOPEN2K8


142 #define 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 #define 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 #define 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifdef 
__USE_GNU


148 #define 
	#O_DIRECT
 
__O_DIRECT


	)

149 #define 
	#O_NOATIME
 
__O_NOATIME


	)

150 #define 
	#O_PATH
 
__O_PATH


	)

151 #define 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #if 
defined
 
__USE_POSIX199309
 || defined 
__USE_UNIX98


158 #define 
	#O_DSYNC
 
__O_DSYNC


	)

159 #if 
defined
 
__O_RSYNC


160 #define 
	#O_RSYNC
 
__O_RSYNC


	)

162 #define 
	#O_RSYNC
 
O_SYNC


	)

167 #define 
	#F_DUPFD
 0

	)

168 #define 
	#F_GETFD
 1

	)

169 #define 
	#F_SETFD
 2

	)

170 #define 
	#F_GETFL
 3

	)

171 #define 
	#F_SETFL
 4

	)

173 #ifndef 
__F_SETOWN


174 #define 
	#__F_SETOWN
 8

	)

175 #define 
	#__F_GETOWN
 9

	)

178 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


179 #define 
	#F_SETOWN
 
__F_SETOWN


	)

180 #define 
	#F_GETOWN
 
__F_GETOWN


	)

183 #ifndef 
__F_SETSIG


184 #define 
	#__F_SETSIG
 10

	)

185 #define 
	#__F_GETSIG
 11

	)

187 #ifndef 
__F_SETOWN_EX


188 #define 
	#__F_SETOWN_EX
 15

	)

189 #define 
	#__F_GETOWN_EX
 16

	)

192 #ifdef 
__USE_GNU


193 #define 
	#F_SETSIG
 
__F_SETSIG


	)

194 #define 
	#F_GETSIG
 
__F_GETSIG


	)

195 #define 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 #define 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifdef 
__USE_GNU


200 #define 
	#F_SETLEASE
 1024

	)

201 #define 
	#F_GETLEASE
 1025

	)

202 #define 
	#F_NOTIFY
 1026

	)

203 #define 
	#F_SETPIPE_SZ
 1031

	)

204 #define 
	#F_GETPIPE_SZ
 1032

	)

205 #define 
	#F_ADD_SEALS
 1033

	)

206 #define 
	#F_GET_SEALS
 1034

	)

208 #define 
	#F_GET_RW_HINT
 1035

	)

209 #define 
	#F_SET_RW_HINT
 1036

	)

210 #define 
	#F_GET_FILE_RW_HINT
 1037

	)

211 #define 
	#F_SET_FILE_RW_HINT
 1038

	)

213 #ifdef 
__USE_XOPEN2K8


214 #define 
	#F_DUPFD_CLOEXEC
 1030

	)

219 #define 
	#FD_CLOEXEC
 1

	)

221 #ifndef 
F_RDLCK


223 #define 
	#F_RDLCK
 0

	)

224 #define 
	#F_WRLCK
 1

	)

225 #define 
	#F_UNLCK
 2

	)

230 #ifndef 
F_EXLCK


231 #define 
	#F_EXLCK
 4

	)

232 #define 
	#F_SHLCK
 8

	)

235 #ifdef 
__USE_MISC


237 #define 
	#LOCK_SH
 1

	)

238 #define 
	#LOCK_EX
 2

	)

239 #define 
	#LOCK_NB
 4

	)

241 #define 
	#LOCK_UN
 8

	)

244 #ifdef 
__USE_GNU


245 #define 
	#LOCK_MAND
 32

	)

246 #define 
	#LOCK_READ
 64

	)

247 #define 
	#LOCK_WRITE
 128

	)

248 #define 
	#LOCK_RW
 192

	)

251 #ifdef 
__USE_GNU


253 #define 
	#DN_ACCESS
 0x00000001

	)

254 #define 
	#DN_MODIFY
 0x00000002

	)

255 #define 
	#DN_CREATE
 0x00000004

	)

256 #define 
	#DN_DELETE
 0x00000008

	)

257 #define 
	#DN_RENAME
 0x00000010

	)

258 #define 
	#DN_ATTRIB
 0x00000020

	)

259 #define 
	#DN_MULTISHOT
 0x80000000

	)

263 #ifdef 
__USE_GNU


265 enum 
	e__pid_type


267 
	mF_OWNER_TID
 = 0,

268 
	mF_OWNER_PID
,

269 
	mF_OWNER_PGRP
,

270 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


274 struct 
	sf_owner_ex


276 enum 
__pid_type
 
	mtype
;

277 
__pid_t
 
	mpid
;

281 #ifdef 
__USE_GNU


283 #define 
	#F_SEAL_SEAL
 0x0001

	)

284 #define 
	#F_SEAL_SHRINK
 0x0002

	)

285 #define 
	#F_SEAL_GROW
 0x0004

	)

286 #define 
	#F_SEAL_WRITE
 0x0008

	)

287 #define 
	#F_SEAL_FUTURE_WRITE
 0x0010

	)

291 #ifdef 
__USE_GNU


293 #define 
	#RWH_WRITE_LIFE_NOT_SET
 0

	)

294 #define 
	#RWF_WRITE_LIFE_NOT_SET
 
RWH_WRITE_LIFE_NOT_SET


	)

295 #define 
	#RWH_WRITE_LIFE_NONE
 1

	)

296 #define 
	#RWH_WRITE_LIFE_SHORT
 2

	)

297 #define 
	#RWH_WRITE_LIFE_MEDIUM
 3

	)

298 #define 
	#RWH_WRITE_LIFE_LONG
 4

	)

299 #define 
	#RWH_WRITE_LIFE_EXTREME
 5

	)

304 #ifdef 
__USE_MISC


305 #define 
	#FAPPEND
 
O_APPEND


	)

306 #define 
	#FFSYNC
 
O_FSYNC


	)

307 #define 
	#FASYNC
 
O_ASYNC


	)

308 #define 
	#FNONBLOCK
 
O_NONBLOCK


	)

309 #define 
	#FNDELAY
 
O_NDELAY


	)

312 #ifndef 
__POSIX_FADV_DONTNEED


313 #define 
	#__POSIX_FADV_DONTNEED
 4

	)

314 #define 
	#__POSIX_FADV_NOREUSE
 5

	)

317 #ifdef 
__USE_XOPEN2K


318 #define 
	#POSIX_FADV_NORMAL
 0

	)

319 #define 
	#POSIX_FADV_RANDOM
 1

	)

320 #define 
	#POSIX_FADV_SEQUENTIAL
 2

	)

321 #define 
	#POSIX_FADV_WILLNEED
 3

	)

322 #define 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

323 #define 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

327 #ifdef 
__USE_GNU


329 #define 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

332 #define 
	#SYNC_FILE_RANGE_WRITE
 2

	)

335 #define 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

340 #define 
	#SYNC_FILE_RANGE_WRITE_AND_WAIT
 (
SYNC_FILE_RANGE_WRITE
 \

341 | 
SYNC_FILE_RANGE_WAIT_BEFORE
 \

342 | 
SYNC_FILE_RANGE_WAIT_AFTER
)

	)

345 #define 
	#SPLICE_F_MOVE
 1

	)

346 #define 
	#SPLICE_F_NONBLOCK
 2

	)

349 #define 
	#SPLICE_F_MORE
 4

	)

350 #define 
	#SPLICE_F_GIFT
 8

	)

354 #include 
	~<linux/falloc.h
>

358 struct 
	sfile_handle


360 unsigned int 
	mhandle_bytes
;

361 int 
	mhandle_type
;

363 unsigned char 
	mf_handle
[0];

367 #define 
	#MAX_HANDLE_SZ
 128

	)

370 
	g__BEGIN_DECLS


372 #ifdef 
__USE_GNU


375 extern 
__ssize_t
 
	$readahead
 (int 
__fd
, 
__off64_t
 
__offset
, 
size_t
 
__count
)

376 
__THROW
;

383 extern int 
	`sync_file_range
 (int 
__fd
, 
__off64_t
 
__offset
, __off64_t 
__count
,

384 unsigned int 
__flags
);

391 extern 
__ssize_t
 
	`vmsplice
 (int 
__fdout
, const struct 
iovec
 *
__iov
,

392 
size_t
 
__count
, unsigned int 
__flags
);

398 extern 
__ssize_t
 
	`splice
 (int 
__fdin
, 
__off64_t
 *
__offin
, int 
__fdout
,

399 
__off64_t
 *
__offout
, 
size_t
 
__len
,

400 unsigned int 
__flags
);

406 extern 
__ssize_t
 
	`tee
 (int 
__fdin
, int 
__fdout
, 
size_t
 
__len
,

407 unsigned int 
__flags
);

413 #ifndef 
__USE_FILE_OFFSET64


414 extern int 
	`fallocate
 (int 
__fd
, int 
__mode
, 
__off_t
 
__offset
, __off_t 
__len
);

416 #ifdef 
__REDIRECT


417 extern int 
	`__REDIRECT
 (
fallocate
, (int 
__fd
, int 
__mode
, 
__off64_t
 
__offset
,

418 
__off64_t
 
__len
),

419 
fallocate64
);

421 #define 
	#fallocate
 
fallocate64


	)

424 #ifdef 
__USE_LARGEFILE64


425 extern int 
	`fallocate64
 (int 
__fd
, int 
__mode
, 
__off64_t
 
__offset
,

426 
__off64_t
 
__len
);

431 extern int 
	$name_to_handle_at
 (int 
__dfd
, const char *
__name
,

432 struct 
file_handle
 *
__handle
, int *
__mnt_id
,

433 int 
__flags
) 
__THROW
;

439 extern int 
	`open_by_handle_at
 (int 
__mountdirfd
, struct 
file_handle
 *
__handle
,

440 int 
__flags
);

444 
__END_DECLS


	@/usr/include/bits/floatn-common.h

20 #ifndef 
_BITS_FLOATN_COMMON_H


21 #define 
	#_BITS_FLOATN_COMMON_H


	)

23 #include 
	~<features.h
>

24 #include 
	~<bits/long-double.h
>

34 #define 
	#__HAVE_FLOAT16
 0

	)

35 #define 
	#__HAVE_FLOAT32
 1

	)

36 #define 
	#__HAVE_FLOAT64
 1

	)

37 #define 
	#__HAVE_FLOAT32X
 1

	)

38 #define 
	#__HAVE_FLOAT128X
 0

	)

52 #define 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 #define 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 #define 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 #define 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 #define 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 #define 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 #define 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 != 113)

	)

69 #if 
__GNUC_PREREQ
 (7, 0) && !
defined
 
__cplusplus


70 #define 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 #define 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #ifndef 
__ASSEMBLER__


80 #if 
__HAVE_FLOAT16


81 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


83 #define 
	#__f16
(
x
) ((
_Float16
) x##
f
)

	)

85 #define 
	#__f16
(
x
) x##
f16


	)

89 #if 
__HAVE_FLOAT32


90 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


91 #define 
	#__f32
(
x
) x##
f


	)

93 #define 
	#__f32
(
x
) x##
f32


	)

97 #if 
__HAVE_FLOAT64


98 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


99 #ifdef 
__NO_LONG_DOUBLE_MATH


100 #define 
	#__f64
(
x
) x##
l


	)

102 #define 
	#__f64
(
x
) 
	)
x

105 #define 
	#__f64
(
x
) x##
f64


	)

109 #if 
__HAVE_FLOAT32X


110 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


111 #define 
	#__f32x
(
x
) 
	)
x

113 #define 
	#__f32x
(
x
) x##
f32x


	)

117 #if 
__HAVE_FLOAT64X


118 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


119 #if 
__HAVE_FLOAT64X_LONG_DOUBLE


120 #define 
	#__f64x
(
x
) x##
l


	)

122 #define 
	#__f64x
(
x
) 
	`__f128
 (x)

	)

125 #define 
	#__f64x
(
x
) x##
f64x


	)

129 #if 
__HAVE_FLOAT128X


130 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


133 #define 
	#__f128x
(
x
) x##
f128x


	)

138 #if 
__HAVE_FLOAT16


139 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


140 typedef 
_Complex
 float 
	t__cfloat16
 
	t__attribute__
 ((
	t__mode__
 (
	t__HC__
)));

141 #define 
	#__CFLOAT16
 
__cfloat16


	)

143 #define 
	#__CFLOAT16
 
_Complex
 
_Float16


	)

147 #if 
__HAVE_FLOAT32


148 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


149 #define 
	#__CFLOAT32
 
_Complex
 float

	)

151 #define 
	#__CFLOAT32
 
_Complex
 
_Float32


	)

155 #if 
__HAVE_FLOAT64


156 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


157 #ifdef 
__NO_LONG_DOUBLE_MATH


158 #define 
	#__CFLOAT64
 
_Complex
 long double

	)

160 #define 
	#__CFLOAT64
 
_Complex
 double

	)

163 #define 
	#__CFLOAT64
 
_Complex
 
_Float64


	)

167 #if 
__HAVE_FLOAT32X


168 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


169 #define 
	#__CFLOAT32X
 
_Complex
 double

	)

171 #define 
	#__CFLOAT32X
 
_Complex
 
_Float32x


	)

175 #if 
__HAVE_FLOAT64X


176 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


177 #if 
__HAVE_FLOAT64X_LONG_DOUBLE


178 #define 
	#__CFLOAT64X
 
_Complex
 long double

	)

180 #define 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 #define 
	#__CFLOAT64X
 
_Complex
 
_Float64x


	)

187 #if 
__HAVE_FLOAT128X


188 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


191 #define 
	#__CFLOAT128X
 
_Complex
 
_Float128x


	)

196 #if 
__HAVE_FLOAT16


198 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


199 typedef float 
	t_Float16
 
	t__attribute__
 ((
	t__mode__
 (
	t__HF__
)));

202 #if !
__GNUC_PREREQ
 (7, 0)

203 #define 
	#__builtin_huge_valf16
() ((
_Float16
) 
	`__builtin_huge_val
 ())

	)

204 #define 
	#__builtin_inff16
() ((
_Float16
) 
	`__builtin_inf
 ())

	)

205 #define 
	#__builtin_nanf16
(
x
) ((
_Float16
) 
	`__builtin_nan
 (x))

	)

206 #define 
	#__builtin_nansf16
(
x
) ((
_Float16
) 
	`__builtin_nans
 (x))

	)

211 #if 
__HAVE_FLOAT32


213 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


214 typedef float 
	t_Float32
;

217 #if !
__GNUC_PREREQ
 (7, 0)

218 #define 
	#__builtin_huge_valf32
() (
	`__builtin_huge_valf
 ())

	)

219 #define 
	#__builtin_inff32
() (
	`__builtin_inff
 ())

	)

220 #define 
	#__builtin_nanf32
(
x
) (
	`__builtin_nanf
 (x))

	)

221 #define 
	#__builtin_nansf32
(
x
) (
	`__builtin_nansf
 (x))

	)

226 #if 
__HAVE_FLOAT64


235 #ifdef 
__NO_LONG_DOUBLE_MATH


237 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


238 typedef long double 
	t_Float64
;

241 #if !
__GNUC_PREREQ
 (7, 0)

242 #define 
	#__builtin_huge_valf64
() (
	`__builtin_huge_vall
 ())

	)

243 #define 
	#__builtin_inff64
() (
	`__builtin_infl
 ())

	)

244 #define 
	#__builtin_nanf64
(
x
) (
	`__builtin_nanl
 (x))

	)

245 #define 
	#__builtin_nansf64
(
x
) (
	`__builtin_nansl
 (x))

	)

250 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


251 typedef double 
	t_Float64
;

254 #if !
__GNUC_PREREQ
 (7, 0)

255 #define 
	#__builtin_huge_valf64
() (
	`__builtin_huge_val
 ())

	)

256 #define 
	#__builtin_inff64
() (
	`__builtin_inf
 ())

	)

257 #define 
	#__builtin_nanf64
(
x
) (
	`__builtin_nan
 (x))

	)

258 #define 
	#__builtin_nansf64
(
x
) (
	`__builtin_nans
 (x))

	)

265 #if 
__HAVE_FLOAT32X


267 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


268 typedef double 
	t_Float32x
;

271 #if !
__GNUC_PREREQ
 (7, 0)

272 #define 
	#__builtin_huge_valf32x
() (
	`__builtin_huge_val
 ())

	)

273 #define 
	#__builtin_inff32x
() (
	`__builtin_inf
 ())

	)

274 #define 
	#__builtin_nanf32x
(
x
) (
	`__builtin_nan
 (x))

	)

275 #define 
	#__builtin_nansf32x
(
x
) (
	`__builtin_nans
 (x))

	)

280 #if 
__HAVE_FLOAT64X


282 #if 
__HAVE_FLOAT64X_LONG_DOUBLE


284 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


285 typedef long double 
	t_Float64x
;

288 #if !
__GNUC_PREREQ
 (7, 0)

289 #define 
	#__builtin_huge_valf64x
() (
	`__builtin_huge_vall
 ())

	)

290 #define 
	#__builtin_inff64x
() (
	`__builtin_infl
 ())

	)

291 #define 
	#__builtin_nanf64x
(
x
) (
	`__builtin_nanl
 (x))

	)

292 #define 
	#__builtin_nansf64x
(
x
) (
	`__builtin_nansl
 (x))

	)

297 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


298 typedef 
_Float128
 
	t_Float64x
;

301 #if !
__GNUC_PREREQ
 (7, 0)

302 #define 
	#__builtin_huge_valf64x
() (
	`__builtin_huge_valf128
 ())

	)

303 #define 
	#__builtin_inff64x
() (
	`__builtin_inff128
 ())

	)

304 #define 
	#__builtin_nanf64x
(
x
) (
	`__builtin_nanf128
 (x))

	)

305 #define 
	#__builtin_nansf64x
(
x
) (
	`__builtin_nansf128
 (x))

	)

312 #if 
__HAVE_FLOAT128X


314 #if !
__GNUC_PREREQ
 (7, 0) || 
defined
 
__cplusplus


318 #if !
__GNUC_PREREQ
 (7, 0)

319 #define 
	#__builtin_huge_valf128x
() ((
_Float128x
) 
	`__builtin_huge_val
 ())

	)

320 #define 
	#__builtin_inff128x
() ((
_Float128x
) 
	`__builtin_inf
 ())

	)

321 #define 
	#__builtin_nanf128x
(
x
) ((
_Float128x
) 
	`__builtin_nan
 (x))

	)

322 #define 
	#__builtin_nansf128x
(
x
) ((
_Float128x
) 
	`__builtin_nans
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #ifndef 
_GETOPT_CORE_H


21 #define 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 extern char *
optarg
;

50 extern int 
optind
;

55 extern int 
opterr
;

59 extern int 
optopt
;

91 extern int 
	$getopt
 (int 
___argc
, char *const *
___argv
, const char *
__shortopts
)

92 
__THROW
 
	`__nonnull
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/select.h

18 #ifndef 
_SYS_SELECT_H


25 #define 
	#__FD_ZERO
(
s
) \

27 unsigned int 
__i
; \

28 
fd_set
 *
__arr
 = (
s
); \

29 for (
__i
 = 0; __i < sizeof (
fd_set
) / sizeof (
__fd_mask
); ++__i) \

30 
	`__FDS_BITS
 (
__arr
)[
__i
] = 0; \

31 } while (0)

	)

32 #define 
	#__FD_SET
(
d
, 
s
) \

33 ((void) (
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] |= 
	`__FD_MASK
(d)))

	)

34 #define 
	#__FD_CLR
(
d
, 
s
) \

35 ((void) (
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] &= ~
	`__FD_MASK
(d)))

	)

36 #define 
	#__FD_ISSET
(
d
, 
s
) \

37 ((
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)) != 0)

	)

	@/usr/include/bits/select2.h

19 #ifndef 
_SYS_SELECT_H


24 extern long int 
__fdelt_chk
 (long int 
__d
);

25 extern long int 
	$__fdelt_warn
 (long int 
__d
)

26 
	`__warnattr
 ("bit outside of fd_set selected");

27 #undef 
__FD_ELT


28 #define 
	#__FD_ELT
(
d
) \

29 
__extension__
 \

30 ({ long int 
__d
 = (
d
); \

31 (
	`__builtin_constant_p
 (
__d
) \

32 ? (0 <= 
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdelt_warn
 (
__d
)) \

35 : 
	`__fdelt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/strings_fortified.h

19 #ifndef 
__STRINGS_FORTIFIED


20 #define 
	#__STRINGS_FORTIFIED
 1

	)

22 
__fortify_function
 void

23 
__NTH
 (
	$bcopy
 (const void *
__src
, void *
__dest
, 
size_t
 
__len
))

25 (void) 
	`__builtin___memmove_chk
 (
__dest
, 
__src
, 
__len
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__fortify_function
 void

29 
__NTH
 (
	$bzero
 (void *
__dest
, 
size_t
 
__len
))

31 (void) 
	`__builtin___memset_chk
 (
__dest
, '\0', 
__len
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/termios-baud.h

19 #ifndef 
_TERMIOS_H


23 #ifdef 
__USE_MISC


24 #define 
	#CBAUD
 000000010017

	)

25 #define 
	#CBAUDEX
 000000010000

	)

27 #define 
	#CIBAUD
 002003600000

	)

28 #define 
	#CMSPAR
 010000000000

	)

29 #define 
	#CRTSCTS
 020000000000

	)

33 #define 
	#B57600
 0010001

	)

34 #define 
	#B115200
 0010002

	)

35 #define 
	#B230400
 0010003

	)

36 #define 
	#B460800
 0010004

	)

37 #define 
	#B500000
 0010005

	)

38 #define 
	#B576000
 0010006

	)

39 #define 
	#B921600
 0010007

	)

40 #define 
	#B1000000
 0010010

	)

41 #define 
	#B1152000
 0010011

	)

42 #define 
	#B1500000
 0010012

	)

43 #define 
	#B2000000
 0010013

	)

44 #define 
	#B2500000
 0010014

	)

45 #define 
	#B3000000
 0010015

	)

46 #define 
	#B3500000
 0010016

	)

47 #define 
	#B4000000
 0010017

	)

48 #define 
	#__MAX_BAUD
 
B4000000


	)

	@/usr/include/bits/termios-c_cc.h

19 #ifndef 
_TERMIOS_H


24 #define 
	#VINTR
 0

	)

25 #define 
	#VQUIT
 1

	)

26 #define 
	#VERASE
 2

	)

27 #define 
	#VKILL
 3

	)

28 #define 
	#VEOF
 4

	)

29 #define 
	#VTIME
 5

	)

30 #define 
	#VMIN
 6

	)

31 #define 
	#VSWTC
 7

	)

32 #define 
	#VSTART
 8

	)

33 #define 
	#VSTOP
 9

	)

34 #define 
	#VSUSP
 10

	)

35 #define 
	#VEOL
 11

	)

36 #define 
	#VREPRINT
 12

	)

37 #define 
	#VDISCARD
 13

	)

38 #define 
	#VWERASE
 14

	)

39 #define 
	#VLNEXT
 15

	)

40 #define 
	#VEOL2
 16

	)

	@/usr/include/bits/termios-c_cflag.h

19 #ifndef 
_TERMIOS_H


24 #define 
	#CSIZE
 0000060

	)

25 #define 
	#CS5
 0000000

	)

26 #define 
	#CS6
 0000020

	)

27 #define 
	#CS7
 0000040

	)

28 #define 
	#CS8
 0000060

	)

29 #define 
	#CSTOPB
 0000100

	)

30 #define 
	#CREAD
 0000200

	)

31 #define 
	#PARENB
 0000400

	)

32 #define 
	#PARODD
 0001000

	)

33 #define 
	#HUPCL
 0002000

	)

34 #define 
	#CLOCAL
 0004000

	)

	@/usr/include/bits/termios-c_iflag.h

19 #ifndef 
_TERMIOS_H


24 #define 
	#IGNBRK
 0000001

	)

25 #define 
	#BRKINT
 0000002

	)

26 #define 
	#IGNPAR
 0000004

	)

27 #define 
	#PARMRK
 0000010

	)

28 #define 
	#INPCK
 0000020

	)

29 #define 
	#ISTRIP
 0000040

	)

30 #define 
	#INLCR
 0000100

	)

31 #define 
	#IGNCR
 0000200

	)

32 #define 
	#ICRNL
 0000400

	)

33 #define 
	#IUCLC
 0001000

	)

35 #define 
	#IXON
 0002000

	)

36 #define 
	#IXANY
 0004000

	)

37 #define 
	#IXOFF
 0010000

	)

38 #define 
	#IMAXBEL
 0020000

	)

40 #define 
	#IUTF8
 0040000

	)

	@/usr/include/bits/termios-c_lflag.h

19 #ifndef 
_TERMIOS_H


24 #define 
	#ISIG
 0000001

	)

25 #define 
	#ICANON
 0000002

	)

26 #if 
defined
 
__USE_MISC
 || (defined 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

27 #define 
	#XCASE
 0000004

	)

29 #define 
	#ECHO
 0000010

	)

30 #define 
	#ECHOE
 0000020

	)

32 #define 
	#ECHOK
 0000040

	)

33 #define 
	#ECHONL
 0000100

	)

34 #define 
	#NOFLSH
 0000200

	)

35 #define 
	#TOSTOP
 0000400

	)

36 #ifdef 
__USE_MISC


37 #define 
	#ECHOCTL
 0001000

	)

42 #define 
	#ECHOPRT
 0002000

	)

45 #define 
	#ECHOKE
 0004000

	)

48 #define 
	#FLUSHO
 0010000

	)

50 #define 
	#PENDIN
 0040000

	)

54 #define 
	#IEXTEN
 0100000

	)

56 #ifdef 
__USE_MISC


57 #define 
	#EXTPROC
 0200000

	)

	@/usr/include/bits/termios-c_oflag.h

19 #ifndef 
_TERMIOS_H


24 #define 
	#OPOST
 0000001

	)

25 #define 
	#OLCUC
 0000002

	)

27 #define 
	#ONLCR
 0000004

	)

28 #define 
	#OCRNL
 0000010

	)

29 #define 
	#ONOCR
 0000020

	)

30 #define 
	#ONLRET
 0000040

	)

31 #define 
	#OFILL
 0000100

	)

32 #define 
	#OFDEL
 0000200

	)

33 #if 
defined
 
__USE_MISC
 || defined 
__USE_XOPEN


34 #define 
	#NLDLY
 0000400

	)

35 #define 
	#NL0
 0000000

	)

36 #define 
	#NL1
 0000400

	)

37 #define 
	#CRDLY
 0003000

	)

38 #define 
	#CR0
 0000000

	)

39 #define 
	#CR1
 0001000

	)

40 #define 
	#CR2
 0002000

	)

41 #define 
	#CR3
 0003000

	)

42 #define 
	#TABDLY
 0014000

	)

43 #define 
	#TAB0
 0000000

	)

44 #define 
	#TAB1
 0004000

	)

45 #define 
	#TAB2
 0010000

	)

46 #define 
	#TAB3
 0014000

	)

47 #define 
	#BSDLY
 0020000

	)

48 #define 
	#BS0
 0000000

	)

49 #define 
	#BS1
 0020000

	)

50 #define 
	#FFDLY
 0100000

	)

51 #define 
	#FF0
 0000000

	)

52 #define 
	#FF1
 0100000

	)

55 #define 
	#VTDLY
 0040000

	)

56 #define 
	#VT0
 0000000

	)

57 #define 
	#VT1
 0040000

	)

59 #ifdef 
__USE_MISC


60 #define 
	#XTABS
 0014000

	)

	@/usr/include/bits/termios-misc.h

19 #ifndef 
_TERMIOS_H


	@/usr/include/bits/termios-struct.h

19 #ifndef 
_TERMIOS_H


23 #define 
	#NCCS
 32

	)

24 struct 
	stermios


26 
tcflag_t
 
	mc_iflag
;

27 
tcflag_t
 
	mc_oflag
;

28 
tcflag_t
 
	mc_cflag
;

29 
tcflag_t
 
	mc_lflag
;

30 
cc_t
 
	mc_line
;

31 
cc_t
 
	mc_cc
[
NCCS
];

32 
speed_t
 
	mc_ispeed
;

33 
speed_t
 
	mc_ospeed
;

34 #define 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

35 #define 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

	@/usr/include/bits/termios-tcflow.h

19 #ifndef 
_TERMIOS_H


24 #define 
	#TCSANOW
 0

	)

25 #define 
	#TCSADRAIN
 1

	)

26 #define 
	#TCSAFLUSH
 2

	)

	@/usr/include/bits/thread-shared-types.h

19 #ifndef 
_THREAD_SHARED_TYPES_H


20 #define 
	#_THREAD_SHARED_TYPES_H
 1

	)

44 #include 
	~<bits/pthreadtypes-arch.h
>

49 typedef struct 
	s__pthread_internal_list


51 struct 
__pthread_internal_list
 *
	m__prev
;

52 struct 
__pthread_internal_list
 *
	m__next
;

53 } 
	t__pthread_list_t
;

55 typedef struct 
	s__pthread_internal_slist


57 struct 
__pthread_internal_slist
 *
	m__next
;

58 } 
	t__pthread_slist_t
;

74 #include 
	~<bits/struct_mutex.h
>

87 #include 
	~<bits/struct_rwlock.h
>

92 struct 
	s__pthread_cond_s


94 
__extension__
 union

96 
__extension__
 unsigned long long int 
	m__wseq
;

99 unsigned int 
	m__low
;

100 unsigned int 
	m__high
;

101 } 
	m__wseq32
;

103 
__extension__
 union

105 
__extension__
 unsigned long long int 
	m__g1_start
;

108 unsigned int 
	m__low
;

109 unsigned int 
	m__high
;

110 } 
	m__g1_start32
;

112 unsigned int 
	m__g_refs
[2] 
	m__LOCK_ALIGNMENT
;

113 unsigned int 
	m__g_size
[2];

114 unsigned int 
	m__g1_orig_size
;

115 unsigned int 
	m__wrefs
;

116 unsigned int 
	m__g_signals
[2];

119 typedef unsigned int 
	t__tss_t
;

120 typedef unsigned long int 
	t__thrd_t
;

124 int 
__data
 
	m__ONCE_ALIGNMENT
;

125 } 
	t__once_flag
;

127 #define 
	#__ONCE_FLAG_INIT
 { 0 }

	)

	@/usr/include/bits/time64.h

19 #ifndef 
_BITS_TYPES_H


23 #ifndef 
_BITS_TIME64_H


24 #define 
	#_BITS_TIME64_H
 1

	)

28 #if 
__TIMESIZE
 == 64

30 #define 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 #define 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/bits/timesize.h

19 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


21 #define 
	#__TIMESIZE
 64

	)

24 #define 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/bits/timex.h

18 #ifndef 
_BITS_TIMEX_H


19 #define 
	#_BITS_TIMEX_H
 1

	)

21 #include 
	~<bits/types.h
>

22 #include 
	~<bits/types/struct_timeval.h
>

26 struct 
	stimex


28 unsigned int 
	mmodes
;

29 
__syscall_slong_t
 
	moffset
;

30 
__syscall_slong_t
 
	mfreq
;

31 
__syscall_slong_t
 
	mmaxerror
;

32 
__syscall_slong_t
 
	mesterror
;

33 int 
	mstatus
;

34 
__syscall_slong_t
 
	mconstant
;

35 
__syscall_slong_t
 
	mprecision
;

36 
__syscall_slong_t
 
	mtolerance
;

37 struct 
timeval
 
	mtime
;

38 
__syscall_slong_t
 
	mtick
;

39 
__syscall_slong_t
 
	mppsfreq
;

40 
__syscall_slong_t
 
	mjitter
;

41 int 
	mshift
;

42 
__syscall_slong_t
 
	mstabil
;

43 
__syscall_slong_t
 
	mjitcnt
;

44 
__syscall_slong_t
 
	mcalcnt
;

45 
__syscall_slong_t
 
	merrcnt
;

46 
__syscall_slong_t
 
	mstbcnt
;

48 int 
	mtai
;

57 #define 
	#ADJ_OFFSET
 0x0001

	)

58 #define 
	#ADJ_FREQUENCY
 0x0002

	)

59 #define 
	#ADJ_MAXERROR
 0x0004

	)

60 #define 
	#ADJ_ESTERROR
 0x0008

	)

61 #define 
	#ADJ_STATUS
 0x0010

	)

62 #define 
	#ADJ_TIMECONST
 0x0020

	)

63 #define 
	#ADJ_TAI
 0x0080

	)

64 #define 
	#ADJ_SETOFFSET
 0x0100

	)

65 #define 
	#ADJ_MICRO
 0x1000

	)

66 #define 
	#ADJ_NANO
 0x2000

	)

67 #define 
	#ADJ_TICK
 0x4000

	)

68 #define 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

69 #define 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

72 #define 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

73 #define 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

74 #define 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

75 #define 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

76 #define 
	#MOD_STATUS
 
ADJ_STATUS


	)

77 #define 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

78 #define 
	#MOD_CLKB
 
ADJ_TICK


	)

79 #define 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

80 #define 
	#MOD_TAI
 
ADJ_TAI


	)

81 #define 
	#MOD_MICRO
 
ADJ_MICRO


	)

82 #define 
	#MOD_NANO
 
ADJ_NANO


	)

86 #define 
	#STA_PLL
 0x0001

	)

87 #define 
	#STA_PPSFREQ
 0x0002

	)

88 #define 
	#STA_PPSTIME
 0x0004

	)

89 #define 
	#STA_FLL
 0x0008

	)

91 #define 
	#STA_INS
 0x0010

	)

92 #define 
	#STA_DEL
 0x0020

	)

93 #define 
	#STA_UNSYNC
 0x0040

	)

94 #define 
	#STA_FREQHOLD
 0x0080

	)

96 #define 
	#STA_PPSSIGNAL
 0x0100

	)

97 #define 
	#STA_PPSJITTER
 0x0200

	)

98 #define 
	#STA_PPSWANDER
 0x0400

	)

99 #define 
	#STA_PPSERROR
 0x0800

	)

101 #define 
	#STA_CLOCKERR
 0x1000

	)

102 #define 
	#STA_NANO
 0x2000

	)

103 #define 
	#STA_MODE
 0x4000

	)

104 #define 
	#STA_CLK
 0x8000

	)

107 #define 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 \

108 | 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/types/__locale_t.h

20 #ifndef 
_BITS_TYPES___LOCALE_T_H


21 #define 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 struct 
	s__locale_struct


31 struct 
__locale_data
 *
	m__locales
[13];

34 const unsigned short int *
	m__ctype_b
;

35 const int *
	m__ctype_tolower
;

36 const int *
	m__ctype_toupper
;

39 const char *
	m__names
[13];

42 typedef struct 
__locale_struct
 *
	t__locale_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #ifndef 
____mbstate_t_defined


2 #define 
	#____mbstate_t_defined
 1

	)

8 #ifndef 
__WINT_TYPE__


9 #define 
	#__WINT_TYPE__
 unsigned int

	)

15 int 
	m__count
;

18 
__WINT_TYPE__
 
	m__wch
;

19 char 
	m__wchb
[4];

20 } 
	m__value
;

21 } 
	t__mbstate_t
;

	@/usr/include/bits/types/sigset_t.h

1 #ifndef 
__sigset_t_defined


2 #define 
	#__sigset_t_defined
 1

	)

4 #include 
	~<bits/types/__sigset_t.h
>

7 typedef 
__sigset_t
 
	tsigset_t
;

	@/usr/include/bits/types/struct_timeval.h

1 #ifndef 
__timeval_defined


2 #define 
	#__timeval_defined
 1

	)

4 #include 
	~<bits/types.h
>

8 struct 
	stimeval


10 
__time_t
 
	mtv_sec
;

11 
__suseconds_t
 
	mtv_usec
;

	@/usr/include/bits/typesizes.h

19 #ifndef 
_BITS_TYPES_H


23 #ifndef 
_BITS_TYPESIZES_H


24 #define 
	#_BITS_TYPESIZES_H
 1

	)

30 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


31 #define 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 #define 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 #define 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 #define 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 #define 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 #define 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 #define 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 #define 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 #define 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 #define 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifdef 
__x86_64__


45 #define 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 #define 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 #define 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 #define 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 #define 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 #define 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 #define 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 #define 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 #define 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 #define 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 #define 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 #define 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 #define 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 #define 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 #define 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 #define 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 #define 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 #define 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 #define 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 #define 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 #define 
	#__SUSECONDS64_T_TYPE
 
__SQUAD_TYPE


	)

68 #define 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

69 #define 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 #define 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 #define 
	#__TIMER_T_TYPE
 void *

	)

72 #define 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 #define 
	#__FSID_T_TYPE
 struct { int 
__val
[2]; }

	)

74 #define 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #define 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

77 #ifdef 
__x86_64__


81 #define 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

84 #define 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 #define 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

90 #define 
	#__STATFS_MATCHES_STATFS64
 1

	)

93 #define 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 1

	)

95 #define 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

97 #define 
	#__STATFS_MATCHES_STATFS64
 0

	)

99 #define 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 0

	)

103 #define 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uintn-identity.h

19 #if !
defined
 
_NETINET_IN_H
 && !defined 
_ENDIAN_H


23 #ifndef 
_BITS_UINTN_IDENTITY_H


24 #define 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 #include 
	~<bits/types.h
>

32 static 
__inline
 
__uint16_t


33 
	$__uint16_identity
 (
__uint16_t
 
__x
)

35 return 
__x
;

36 
	}
}

38 static 
__inline
 
__uint32_t


39 
	$__uint32_identity
 (
__uint32_t
 
__x
)

41 return 
__x
;

42 
	}
}

44 static 
__inline
 
__uint64_t


45 
	$__uint64_identity
 (
__uint64_t
 
__x
)

47 return 
__x
;

48 
	}
}

	@/usr/include/bits/wordsize.h

3 #if 
defined
 
__x86_64__
 && !defined 
__ILP32__


4 #define 
	#__WORDSIZE
 64

	)

6 #define 
	#__WORDSIZE
 32

	)

7 #define 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 #define 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifdef 
__x86_64__


12 #define 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 #define 
	#__SYSCALL_WORDSIZE
 64

	)

16 #define 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/gnu/stubs.h

6 #if !
defined
 
__x86_64__


7 #include 
	~<gnu/stubs-32.h
>

9 #if 
defined
 
__x86_64__
 && defined 
__LP64__


10 #include 
	~<gnu/stubs-64.h
>

12 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


13 #include 
	~<gnu/stubs-x32.h
>

	@/usr/include/linux/errno.h

1 #include 
	~<asm/errno.h
>

	@/usr/include/stdc-predef.h

18 #ifndef 
_STDC_PREDEF_H


19 #define 
	#_STDC_PREDEF_H
 1

	)

36 #ifdef 
__GCC_IEC_559


37 #if 
__GCC_IEC_559
 > 0

38 #define 
	#__STDC_IEC_559__
 1

	)

41 #define 
	#__STDC_IEC_559__
 1

	)

44 #ifdef 
__GCC_IEC_559_COMPLEX


45 #if 
__GCC_IEC_559_COMPLEX
 > 0

46 #define 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 #define 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 #define 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/sys/cdefs.h

18 #ifndef 
_SYS_CDEFS_H


19 #define 
	#_SYS_CDEFS_H
 1

	)

22 #ifndef 
_FEATURES_H


23 #include 
	~<features.h
>

29 #if 
defined
 
__GNUC__
 && !defined 
__STDC__


34 #undef 
__P


35 #undef 
__PMT


37 #ifdef 
__GNUC__


41 #if 
__GNUC_PREREQ
 (4, 6) && !
defined
 
_LIBC


42 #define 
	#__LEAF
 , 
__leaf__


	)

43 #define 
	#__LEAF_ATTR
 
	`__attribute__
 ((
__leaf__
))

	)

45 #define 
	#__LEAF


	)

46 #define 
	#__LEAF_ATTR


	)

54 #if !
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (3, 3)

55 #define 
	#__THROW
 
	`__attribute__
 ((
__nothrow__
 
__LEAF
))

	)

56 #define 
	#__THROWNL
 
	`__attribute__
 ((
__nothrow__
))

	)

57 #define 
	#__NTH
(
fct
) 
	`__attribute__
 ((
__nothrow__
 
__LEAF
)) 
	)
fct

58 #define 
	#__NTHNL
(
fct
) 
	`__attribute__
 ((
__nothrow__
)) 
	)
fct

60 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (2,8)

61 #define 
	#__THROW
 
	`throw
 ()

	)

62 #define 
	#__THROWNL
 
	`throw
 ()

	)

63 #define 
	#__NTH
(
fct
) 
__LEAF_ATTR
 fct 
	`throw
 ()

	)

64 #define 
	#__NTHNL
(
fct
) fct 
	`throw
 ()

	)

66 #define 
	#__THROW


	)

67 #define 
	#__THROWNL


	)

68 #define 
	#__NTH
(
fct
) 
	)
fct

69 #define 
	#__NTHNL
(
fct
) 
	)
fct

75 #if (
defined
 
__cplusplus
 \

76 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

77 #define 
	#__inline
 
inline


	)

79 #define 
	#__inline


	)

82 #define 
	#__THROW


	)

83 #define 
	#__THROWNL


	)

84 #define 
	#__NTH
(
fct
) 
	)
fct

91 #if 
defined
 
__clang__
 && defined 
__has_extension


92 #define 
	#__glibc_clang_has_extension
(
ext
) 
	`__has_extension
 (ext)

	)

94 #define 
	#__glibc_clang_has_extension
(
ext
) 0

	)

99 #define 
	#__P
(
args
) 
	)
args

100 #define 
	#__PMT
(
args
) 
	)
args

105 #define 
	#__CONCAT
(
x
,
y
) x ## 
	)
y

106 #define 
	#__STRING
(
x
) #x

	)

109 #define 
	#__ptr_t
 void *

	)

113 #ifdef 
__cplusplus


114 #define 
	#__BEGIN_DECLS
 extern "C" {

	)

115 #define 
	#__END_DECLS
 }

	)

117 #define 
	#__BEGIN_DECLS


	)

118 #define 
	#__END_DECLS


	)

123 #define 
	#__bos
(
ptr
) 
	`__builtin_object_size
 (ptr, 
__USE_FORTIFY_LEVEL
 > 1)

	)

124 #define 
	#__bos0
(
ptr
) 
	`__builtin_object_size
 (ptr, 0)

	)

126 #if 
__GNUC_PREREQ
 (4,3)

127 #define 
	#__warndecl
(
name
, 
msg
) \

128 extern void 
	`name
 (void) 
	`__attribute__
((
	`__warning__
 (
msg
)))

	)

129 #define 
	#__warnattr
(
msg
) 
	`__attribute__
((
	`__warning__
 (msg)))

	)

130 #define 
	#__errordecl
(
name
, 
msg
) \

131 extern void 
	`name
 (void) 
	`__attribute__
((
	`__error__
 (
msg
)))

	)

133 #define 
	#__warndecl
(
name
, 
msg
) extern void 
	`name
 (void)

	)

134 #define 
	#__warnattr
(
msg
)

	)

135 #define 
	#__errordecl
(
name
, 
msg
) extern void 
	`name
 (void)

	)

142 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

143 #define 
	#__flexarr
 []

	)

144 #define 
	#__glibc_c99_flexarr_available
 1

	)

145 #elif 
__GNUC_PREREQ
 (2,97)

148 #define 
	#__flexarr
 []

	)

149 #define 
	#__glibc_c99_flexarr_available
 1

	)

150 #elif 
defined
 
__GNUC__


153 #define 
	#__flexarr
 [0]

	)

154 #define 
	#__glibc_c99_flexarr_available
 1

	)

157 #define 
	#__flexarr
 [1]

	)

158 #define 
	#__glibc_c99_flexarr_available
 0

	)

172 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

174 #define 
	#__REDIRECT
(
name
, 
proto
, 
alias
) name proto 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

175 #ifdef 
__cplusplus


176 #define 
	#__REDIRECT_NTH
(
name
, 
proto
, 
alias
) \

177 
name
 
proto
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

178 #define 
	#__REDIRECT_NTHNL
(
name
, 
proto
, 
alias
) \

179 
name
 
proto
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

181 #define 
	#__REDIRECT_NTH
(
name
, 
proto
, 
alias
) \

182 
name
 
proto
 
	`__asm__
 (
	`__ASMNAME
 (#alias)) 
__THROW


	)

183 #define 
	#__REDIRECT_NTHNL
(
name
, 
proto
, 
alias
) \

184 
name
 
proto
 
	`__asm__
 (
	`__ASMNAME
 (#alias)) 
__THROWNL


	)

186 #define 
	#__ASMNAME
(
cname
) 
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, cname)

	)

187 #define 
	#__ASMNAME2
(
prefix
, 
cname
) 
	`__STRING
 (prefix) 
	)
cname

200 #if !
defined
 
__GNUC__
 || __GNUC__ < 2

201 #define 
	#__attribute__
(
xyz
)

	)

207 #if 
__GNUC_PREREQ
 (2,96)

208 #define 
	#__attribute_malloc__
 
	`__attribute__
 ((
__malloc__
))

	)

210 #define 
	#__attribute_malloc__


	)

215 #if 
__GNUC_PREREQ
 (4, 3)

216 #define 
	#__attribute_alloc_size__
(
params
) \

217 
	`__attribute__
 ((
__alloc_size__
 
params
))

	)

219 #define 
	#__attribute_alloc_size__
(
params
)

	)

225 #if 
__GNUC_PREREQ
 (2,96)

226 #define 
	#__attribute_pure__
 
	`__attribute__
 ((
__pure__
))

	)

228 #define 
	#__attribute_pure__


	)

232 #if 
__GNUC_PREREQ
 (2,5)

233 #define 
	#__attribute_const__
 
	`__attribute__
 ((
__const__
))

	)

235 #define 
	#__attribute_const__


	)

241 #if 
__GNUC_PREREQ
 (3,1)

242 #define 
	#__attribute_used__
 
	`__attribute__
 ((
__used__
))

	)

243 #define 
	#__attribute_noinline__
 
	`__attribute__
 ((
__noinline__
))

	)

245 #define 
	#__attribute_used__
 
	`__attribute__
 ((
__unused__
))

	)

246 #define 
	#__attribute_noinline__


	)

250 #if 
__GNUC_PREREQ
 (3,2)

251 #define 
	#__attribute_deprecated__
 
	`__attribute__
 ((
__deprecated__
))

	)

253 #define 
	#__attribute_deprecated__


	)

259 #if 
__GNUC_PREREQ
 (4,5) \

260 || 
	$__glibc_clang_has_extension
 (
__attribute_deprecated_with_message__
)

261 #define 
	#__attribute_deprecated_msg__
(
msg
) \

262 
	`__attribute__
 ((
	`__deprecated__
 (
msg
)))

	)

264 #define 
	#__attribute_deprecated_msg__
(
msg
) 
__attribute_deprecated__


	)

273 #if 
	`__GNUC_PREREQ
 (2,8)

274 #define 
	#__attribute_format_arg__
(
x
) 
	`__attribute__
 ((
	`__format_arg__
 (x)))

	)

276 #define 
	#__attribute_format_arg__
(
x
)

	)

283 #if 
	`__GNUC_PREREQ
 (2,97)

284 #define 
	#__attribute_format_strfmon__
(
a
,
b
) \

285 
	`__attribute__
 ((
	`__format__
 (
__strfmon__
, 
a
, 
b
)))

	)

287 #define 
	#__attribute_format_strfmon__
(
a
,
b
)

	)

292 #if 
	`__GNUC_PREREQ
 (3,3)

293 #define 
	#__nonnull
(
params
) 
	`__attribute__
 ((
__nonnull__
 params))

	)

295 #define 
	#__nonnull
(
params
)

	)

300 #if 
	`__GNUC_PREREQ
 (3,4)

301 #define 
	#__attribute_warn_unused_result__
 \

302 
	`__attribute__
 ((
__warn_unused_result__
))

	)

303 #if 
__USE_FORTIFY_LEVEL
 > 0

304 #define 
	#__wur
 
__attribute_warn_unused_result__


	)

307 #define 
	#__attribute_warn_unused_result__


	)

309 #ifndef 
__wur


310 #define 
	#__wur


	)

314 #if 
	`__GNUC_PREREQ
 (3,2)

318 #undef 
__always_inline


319 #define 
	#__always_inline
 
__inline
 
	`__attribute__
 ((
__always_inline__
))

	)

321 #undef 
__always_inline


322 #define 
	#__always_inline
 
__inline


	)

327 #if 
	`__GNUC_PREREQ
 (4,3)

328 #define 
	#__attribute_artificial__
 
	`__attribute__
 ((
__artificial__
))

	)

330 #define 
	#__attribute_artificial__


	)

342 #if (!
defined
 
__cplusplus
 || 
	`__GNUC_PREREQ
 (4,3) \

343 || (
defined
 
__clang__
 && (defined 
__GNUC_STDC_INLINE__
 \

344 || 
defined
 
__GNUC_GNU_INLINE__
)))

345 #if 
defined
 
__GNUC_STDC_INLINE__
 || defined 
__cplusplus


346 #define 
	#__extern_inline
 extern 
__inline
 
	`__attribute__
 ((
__gnu_inline__
))

	)

347 #define 
	#__extern_always_inline
 \

348 extern 
__always_inline
 
	`__attribute__
 ((
__gnu_inline__
))

	)

350 #define 
	#__extern_inline
 extern 
__inline


	)

351 #define 
	#__extern_always_inline
 extern 
__always_inline


	)

355 #ifdef 
__extern_always_inline


356 #define 
	#__fortify_function
 
__extern_always_inline
 
__attribute_artificial__


	)

361 #if 
	`__GNUC_PREREQ
 (4,3)

362 #define 
	#__va_arg_pack
() 
	`__builtin_va_arg_pack
 ()

	)

363 #define 
	#__va_arg_pack_len
() 
	`__builtin_va_arg_pack_len
 ()

	)

370 #if !
	`__GNUC_PREREQ
 (2,8)

371 #define 
	#__extension__


	)

375 #if !
	`__GNUC_PREREQ
 (2,92)

376 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

377 #define 
	#__restrict
 
restrict


	)

379 #define 
	#__restrict


	)

386 #if 
	`__GNUC_PREREQ
 (3,1) && !
defined
 
__GNUG__


387 #define 
	#__restrict_arr
 
__restrict


	)

389 #ifdef 
__GNUC__


390 #define 
	#__restrict_arr


	)

392 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

393 #define 
	#__restrict_arr
 
restrict


	)

396 #define 
	#__restrict_arr


	)

401 #if 
__GNUC__
 >= 3

402 #define 
	#__glibc_unlikely
(
cond
) 
	`__builtin_expect
 ((cond), 0)

	)

403 #define 
	#__glibc_likely
(
cond
) 
	`__builtin_expect
 ((cond), 1)

	)

405 #define 
	#__glibc_unlikely
(
cond
) (cond)

	)

406 #define 
	#__glibc_likely
(
cond
) (cond)

	)

409 #ifdef 
__has_attribute


410 #define 
	#__glibc_has_attribute
(
attr
) 
	`__has_attribute
 (attr)

	)

412 #define 
	#__glibc_has_attribute
(
attr
) 0

	)

415 #if (!
defined
 
_Noreturn
 \

416 && (
defined
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

417 && !
	$__GNUC_PREREQ
 (4,7))

418 #if 
	`__GNUC_PREREQ
 (2,8)

419 #define 
	#_Noreturn
 
	`__attribute__
 ((
__noreturn__
))

	)

421 #define 
	#_Noreturn


	)

425 #if 
	`__GNUC_PREREQ
 (8, 0)

429 #define 
	#__attribute_nonstring__
 
	`__attribute__
 ((
__nonstring__
))

	)

431 #define 
	#__attribute_nonstring__


	)

435 #undef 
__attribute_copy__


436 #if 
	`__GNUC_PREREQ
 (9, 0)

439 #define 
	#__attribute_copy__
(
arg
) 
	`__attribute__
 ((
	`__copy__
 (arg)))

	)

441 #define 
	#__attribute_copy__
(
arg
)

	)

444 #if (!
defined
 
_Static_assert
 && !defined 
__cplusplus
 \

445 && (
defined
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

446 && (!
	`__GNUC_PREREQ
 (4, 6) || 
defined
 
__STRICT_ANSI__
))

447 #define 
	#_Static_assert
(
expr
, 
diagnostic
) \

448 extern int (*
	`__Static_assert_function
 (void)) \

449 [!!sizeof (struct { int 
__error_if_negative
: (
expr
) ? 2 : -1; })]

	)

452 #include 
	~<bits/wordsize.h
>

453 #include 
	~<bits/long-double.h
>

455 #if 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

456 #ifdef 
__REDIRECT


459 #define 
	#__LDBL_REDIR
(
name
, 
proto
) ... 
unused__ldbl_redir


	)

460 #define 
	#__LDBL_REDIR_DECL
(
name
) \

461 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 ("__" #name "ieee128"));

	)

464 #define 
	#__LDBL_REDIR2_DECL
(
name
) \

465 extern 
	`__typeof
 (
__
##
name
) __##name \

466 
	`__asm
 (
	`__ASMNAME
 ("__" #name "ieee128"));

	)

469 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) ... 
unused__ldbl_redir1


	)

470 #define 
	#__LDBL_REDIR1_DECL
(
name
, 
alias
) \

471 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 (#alias));

	)

473 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) \

474 
	`__REDIRECT_NTH
 (
name
, 
proto
, 
alias
)

	)

475 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

476 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__
##
alias
##
ieee128
)

	)

479 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) ... 
unused__redirect_ldbl


	)

480 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) ... 
unused__ldbl_redir_nth


	)

483 
	`_Static_assert
 (0, "IEEE 128-bits long double requires redirection on this platform");

485 #elif 
defined
 
__LONG_DOUBLE_MATH_OPTIONAL
 && defined 
__NO_LONG_DOUBLE_MATH


486 #define 
	#__LDBL_COMPAT
 1

	)

487 #ifdef 
__REDIRECT


488 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) 
	`__REDIRECT
 (name, proto, alias)

	)

489 #define 
	#__LDBL_REDIR
(
name
, 
proto
) \

490 
	`__LDBL_REDIR1
 (
name
, 
proto
, 
__nldbl_
##name)

	)

491 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) 
	`__REDIRECT_NTH
 (name, proto, alias)

	)

492 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) \

493 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__nldbl_
##name)

	)

494 #define 
	#__LDBL_REDIR2_DECL
(
name
) \

495 extern 
	`__typeof
 (
__
##
name
) __##name 
	`__asm
 (
	`__ASMNAME
 ("__nldbl___" #name));

	)

496 #define 
	#__LDBL_REDIR1_DECL
(
name
, 
alias
) \

497 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 (#alias));

	)

498 #define 
	#__LDBL_REDIR_DECL
(
name
) \

499 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 ("__nldbl_" #name));

	)

500 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) \

501 
	`__LDBL_REDIR1
 (
name
, 
proto
, 
__nldbl_
##
alias
)

	)

502 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

503 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__nldbl_
##
alias
)

	)

506 #if (!
defined
 
__LDBL_COMPAT
 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0) \

507 || !
defined
 
__REDIRECT


508 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) name 
	)
proto

509 #define 
	#__LDBL_REDIR
(
name
, 
proto
) name 
	)
proto

510 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) name proto 
__THROW


	)

511 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) name proto 
__THROW


	)

512 #define 
	#__LDBL_REDIR2_DECL
(
name
)

	)

513 #define 
	#__LDBL_REDIR_DECL
(
name
)

	)

514 #ifdef 
__REDIRECT


515 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) 
	`__REDIRECT
 (name, proto, alias)

	)

516 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

517 
	`__REDIRECT_NTH
 (
name
, 
proto
, 
alias
)

	)

526 #if 
	`__GNUC_PREREQ
 (4,8) || 
	`__glibc_clang_prereq
 (3,5)

527 #define 
	#__glibc_macro_warning1
(
message
) 
	`_Pragma
 (#message)

	)

528 #define 
	#__glibc_macro_warning
(
message
) \

529 
	`__glibc_macro_warning1
 (
GCC
 
warning
 
message
)

	)

531 #define 
	#__glibc_macro_warning
(
msg
)

	)

541 #if !
defined
 
__cplusplus
 \

542 && (
	`__GNUC_PREREQ
 (4, 9) \

543 || 
	`__glibc_clang_has_extension
 (
c_generic_selections
) \

544 || (!
defined
 
__GNUC__
 && defined 
__STDC_VERSION__
 \

545 && 
__STDC_VERSION__
 >= 201112L))

546 #define 
	#__HAVE_GENERIC_SELECTION
 1

	)

548 #define 
	#__HAVE_GENERIC_SELECTION
 0

	)

551 #if 
	`__GNUC_PREREQ
 (10, 0)

557 #define 
	#__attr_access
(
x
) 
	`__attribute__
 ((
__access__
 x))

	)

559 #define 
	#__attr_access
(
x
)

	)

	@/usr/include/asm-generic/ioctls.h

2 #ifndef 
__ASM_GENERIC_IOCTLS_H


3 #define 
	#__ASM_GENERIC_IOCTLS_H


	)

5 #include 
	~<linux/ioctl.h
>

20 #define 
	#TCGETS
 0x5401

	)

21 #define 
	#TCSETS
 0x5402

	)

22 #define 
	#TCSETSW
 0x5403

	)

23 #define 
	#TCSETSF
 0x5404

	)

24 #define 
	#TCGETA
 0x5405

	)

25 #define 
	#TCSETA
 0x5406

	)

26 #define 
	#TCSETAW
 0x5407

	)

27 #define 
	#TCSETAF
 0x5408

	)

28 #define 
	#TCSBRK
 0x5409

	)

29 #define 
	#TCXONC
 0x540A

	)

30 #define 
	#TCFLSH
 0x540B

	)

31 #define 
	#TIOCEXCL
 0x540C

	)

32 #define 
	#TIOCNXCL
 0x540D

	)

33 #define 
	#TIOCSCTTY
 0x540E

	)

34 #define 
	#TIOCGPGRP
 0x540F

	)

35 #define 
	#TIOCSPGRP
 0x5410

	)

36 #define 
	#TIOCOUTQ
 0x5411

	)

37 #define 
	#TIOCSTI
 0x5412

	)

38 #define 
	#TIOCGWINSZ
 0x5413

	)

39 #define 
	#TIOCSWINSZ
 0x5414

	)

40 #define 
	#TIOCMGET
 0x5415

	)

41 #define 
	#TIOCMBIS
 0x5416

	)

42 #define 
	#TIOCMBIC
 0x5417

	)

43 #define 
	#TIOCMSET
 0x5418

	)

44 #define 
	#TIOCGSOFTCAR
 0x5419

	)

45 #define 
	#TIOCSSOFTCAR
 0x541A

	)

46 #define 
	#FIONREAD
 0x541B

	)

47 #define 
	#TIOCINQ
 
FIONREAD


	)

48 #define 
	#TIOCLINUX
 0x541C

	)

49 #define 
	#TIOCCONS
 0x541D

	)

50 #define 
	#TIOCGSERIAL
 0x541E

	)

51 #define 
	#TIOCSSERIAL
 0x541F

	)

52 #define 
	#TIOCPKT
 0x5420

	)

53 #define 
	#FIONBIO
 0x5421

	)

54 #define 
	#TIOCNOTTY
 0x5422

	)

55 #define 
	#TIOCSETD
 0x5423

	)

56 #define 
	#TIOCGETD
 0x5424

	)

57 #define 
	#TCSBRKP
 0x5425

	)

58 #define 
	#TIOCSBRK
 0x5427

	)

59 #define 
	#TIOCCBRK
 0x5428

	)

60 #define 
	#TIOCGSID
 0x5429

	)

61 #define 
	#TCGETS2
 
	`_IOR
('T', 0x2A, struct 
termios2
)

	)

62 #define 
	#TCSETS2
 
	`_IOW
('T', 0x2B, struct 
termios2
)

	)

63 #define 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, struct 
termios2
)

	)

64 #define 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, struct 
termios2
)

	)

65 #define 
	#TIOCGRS485
 0x542E

	)

66 #ifndef 
TIOCSRS485


67 #define 
	#TIOCSRS485
 0x542F

	)

69 #define 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, unsigned int)

	)

70 #define 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, int)

	)

71 #define 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, unsigned int)

	)

72 #define 
	#TCGETX
 0x5432

	)

73 #define 
	#TCSETX
 0x5433

	)

74 #define 
	#TCSETXF
 0x5434

	)

75 #define 
	#TCSETXW
 0x5435

	)

76 #define 
	#TIOCSIG
 
	`_IOW
('T', 0x36, int)

	)

77 #define 
	#TIOCVHANGUP
 0x5437

	)

78 #define 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, int)

	)

79 #define 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, int)

	)

80 #define 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, int)

	)

81 #define 
	#TIOCGPTPEER
 
	`_IO
('T', 0x41)

	)

82 #define 
	#TIOCGISO7816
 
	`_IOR
('T', 0x42, struct 
serial_iso7816
)

	)

83 #define 
	#TIOCSISO7816
 
	`_IOWR
('T', 0x43, struct 
serial_iso7816
)

	)

85 #define 
	#FIONCLEX
 0x5450

	)

86 #define 
	#FIOCLEX
 0x5451

	)

87 #define 
	#FIOASYNC
 0x5452

	)

88 #define 
	#TIOCSERCONFIG
 0x5453

	)

89 #define 
	#TIOCSERGWILD
 0x5454

	)

90 #define 
	#TIOCSERSWILD
 0x5455

	)

91 #define 
	#TIOCGLCKTRMIOS
 0x5456

	)

92 #define 
	#TIOCSLCKTRMIOS
 0x5457

	)

93 #define 
	#TIOCSERGSTRUCT
 0x5458

	)

94 #define 
	#TIOCSERGETLSR
 0x5459

	)

95 #define 
	#TIOCSERGETMULTI
 0x545A

	)

96 #define 
	#TIOCSERSETMULTI
 0x545B

	)

98 #define 
	#TIOCMIWAIT
 0x545C

	)

99 #define 
	#TIOCGICOUNT
 0x545D

	)

105 #ifndef 
FIOQSIZE


106 #define 
	#FIOQSIZE
 0x5460

	)

110 #define 
	#TIOCPKT_DATA
 0

	)

111 #define 
	#TIOCPKT_FLUSHREAD
 1

	)

112 #define 
	#TIOCPKT_FLUSHWRITE
 2

	)

113 #define 
	#TIOCPKT_STOP
 4

	)

114 #define 
	#TIOCPKT_START
 8

	)

115 #define 
	#TIOCPKT_NOSTOP
 16

	)

116 #define 
	#TIOCPKT_DOSTOP
 32

	)

117 #define 
	#TIOCPKT_IOCTL
 64

	)

119 #define 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/errno.h

1 #include 
	~<asm-generic/errno.h
>

	@/usr/include/bits/long-double.h

21 #define 
	#__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 0

	)

	@/usr/include/bits/pthreadtypes-arch.h

18 #ifndef 
_BITS_PTHREADTYPES_ARCH_H


19 #define 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 #include 
	~<bits/wordsize.h
>

23 #ifdef 
__x86_64__


24 #if 
__WORDSIZE
 == 64

25 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

28 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

30 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

31 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

32 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

33 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

36 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

37 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

38 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

39 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

41 #define 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

42 #define 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

43 #define 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

44 #define 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

45 #define 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

47 #define 
	#__LOCK_ALIGNMENT


	)

48 #define 
	#__ONCE_ALIGNMENT


	)

50 #ifndef 
__x86_64__


52 #define 
	#__cleanup_fct_attribute
 
	`__attribute__
 ((
	`__regparm__
 (1)))

	)

	@/usr/include/bits/struct_mutex.h

19 #ifndef 
_THREAD_MUTEX_INTERNAL_H


20 #define 
	#_THREAD_MUTEX_INTERNAL_H
 1

	)

22 struct 
	s__pthread_mutex_s


24 int 
	m__lock
;

25 unsigned int 
	m__count
;

26 int 
	m__owner
;

27 #ifdef 
__x86_64__


28 unsigned int 
	m__nusers
;

32 int 
	m__kind
;

33 #ifdef 
__x86_64__


34 short 
	m__spins
;

35 short 
	m__elision
;

36 
__pthread_list_t
 
	m__list
;

37 #define 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

39 unsigned int 
	m__nusers
;

40 
__extension__
 union

44 short 
	m__espins
;

45 short 
	m__eelision
;

46 #define 
	#__spins
 
__elision_data
.
__espins


	)

47 #define 
	#__elision
 
__elision_data
.
__eelision


	)

48 } 
	m__elision_data
;

49 
__pthread_slist_t
 
	m__list
;

51 #define 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

55 #ifdef 
__x86_64__


56 #define 
	#__PTHREAD_MUTEX_INITIALIZER
(
__kind
) \

57 0, 0, 0, 0, 
__kind
, 0, 0, { 0, 0 }

	)

59 #define 
	#__PTHREAD_MUTEX_INITIALIZER
(
__kind
) \

60 0, 0, 0, 
__kind
, 0, { { 0, 0 } }

	)

	@/usr/include/bits/struct_rwlock.h

20 #ifndef 
_RWLOCK_INTERNAL_H


21 #define 
	#_RWLOCK_INTERNAL_H


	)

23 struct 
	s__pthread_rwlock_arch_t


25 unsigned int 
	m__readers
;

26 unsigned int 
	m__writers
;

27 unsigned int 
	m__wrphase_futex
;

28 unsigned int 
	m__writers_futex
;

29 unsigned int 
	m__pad3
;

30 unsigned int 
	m__pad4
;

31 #ifdef 
__x86_64__


32 int 
	m__cur_writer
;

33 int 
	m__shared
;

34 signed char 
	m__rwelision
;

35 #ifdef 
__ILP32__


36 unsigned char 
	m__pad1
[3];

37 #define 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

39 unsigned char 
	m__pad1
[7];

40 #define 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

42 unsigned long int 
	m__pad2
;

45 unsigned int 
	m__flags
;

49 unsigned char 
	m__flags
;

50 unsigned char 
	m__shared
;

51 signed char 
	m__rwelision
;

52 unsigned char 
	m__pad2
;

53 int 
	m__cur_writer
;

57 #ifdef 
__x86_64__


58 #define 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__flags
) \

59 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 
__flags


	)

61 #define 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__flags
) \

62 0, 0, 0, 0, 0, 0, 
__flags
, 0, 0, 0, 0

	)

	@/usr/include/bits/types/__sigset_t.h

1 #ifndef 
____sigset_t_defined


2 #define 
	#____sigset_t_defined


	)

4 #define 
	#_SIGSET_NWORDS
 (1024 / (8 * sizeof (unsigned long int)))

	)

7 unsigned long int 
	m__val
[
_SIGSET_NWORDS
];

8 } 
	t__sigset_t
;

	@/usr/include/bits/types/struct_iovec.h

19 #ifndef 
__iovec_defined


20 #define 
	#__iovec_defined
 1

	)

22 #define 
	#__need_size_t


	)

23 #include 
	~<stddef.h
>

26 struct 
	siovec


28 void *
	miov_base
;

29 
size_t
 
	miov_len
;

	@/usr/include/gnu/stubs-64.h

6 #ifdef 
_LIBC


7 #error 
Applications
 
may
 
not
 
define
 
the
 
macro
 
_LIBC


10 #define 
	#__stub___compat_bdflush


	)

11 #define 
	#__stub_chflags


	)

12 #define 
	#__stub_fchflags


	)

13 #define 
	#__stub_gtty


	)

14 #define 
	#__stub_revoke


	)

15 #define 
	#__stub_setlogin


	)

16 #define 
	#__stub_sigreturn


	)

17 #define 
	#__stub_stty


	)

	@/usr/include/linux/falloc.h

2 #ifndef 
_FALLOC_H_


3 #define 
	#_FALLOC_H_


	)

5 #define 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 #define 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 #define 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 #define 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 #define 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 #define 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 #define 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/asm-generic/errno.h

2 #ifndef 
_ASM_GENERIC_ERRNO_H


3 #define 
	#_ASM_GENERIC_ERRNO_H


	)

5 #include 
	~<asm-generic/errno-base.h
>

7 #define 
	#EDEADLK
 35

	)

8 #define 
	#ENAMETOOLONG
 36

	)

9 #define 
	#ENOLCK
 37

	)

18 #define 
	#ENOSYS
 38

	)

20 #define 
	#ENOTEMPTY
 39

	)

21 #define 
	#ELOOP
 40

	)

22 #define 
	#EWOULDBLOCK
 
EAGAIN


	)

23 #define 
	#ENOMSG
 42

	)

24 #define 
	#EIDRM
 43

	)

25 #define 
	#ECHRNG
 44

	)

26 #define 
	#EL2NSYNC
 45

	)

27 #define 
	#EL3HLT
 46

	)

28 #define 
	#EL3RST
 47

	)

29 #define 
	#ELNRNG
 48

	)

30 #define 
	#EUNATCH
 49

	)

31 #define 
	#ENOCSI
 50

	)

32 #define 
	#EL2HLT
 51

	)

33 #define 
	#EBADE
 52

	)

34 #define 
	#EBADR
 53

	)

35 #define 
	#EXFULL
 54

	)

36 #define 
	#ENOANO
 55

	)

37 #define 
	#EBADRQC
 56

	)

38 #define 
	#EBADSLT
 57

	)

40 #define 
	#EDEADLOCK
 
EDEADLK


	)

42 #define 
	#EBFONT
 59

	)

43 #define 
	#ENOSTR
 60

	)

44 #define 
	#ENODATA
 61

	)

45 #define 
	#ETIME
 62

	)

46 #define 
	#ENOSR
 63

	)

47 #define 
	#ENONET
 64

	)

48 #define 
	#ENOPKG
 65

	)

49 #define 
	#EREMOTE
 66

	)

50 #define 
	#ENOLINK
 67

	)

51 #define 
	#EADV
 68

	)

52 #define 
	#ESRMNT
 69

	)

53 #define 
	#ECOMM
 70

	)

54 #define 
	#EPROTO
 71

	)

55 #define 
	#EMULTIHOP
 72

	)

56 #define 
	#EDOTDOT
 73

	)

57 #define 
	#EBADMSG
 74

	)

58 #define 
	#EOVERFLOW
 75

	)

59 #define 
	#ENOTUNIQ
 76

	)

60 #define 
	#EBADFD
 77

	)

61 #define 
	#EREMCHG
 78

	)

62 #define 
	#ELIBACC
 79

	)

63 #define 
	#ELIBBAD
 80

	)

64 #define 
	#ELIBSCN
 81

	)

65 #define 
	#ELIBMAX
 82

	)

66 #define 
	#ELIBEXEC
 83

	)

67 #define 
	#EILSEQ
 84

	)

68 #define 
	#ERESTART
 85

	)

69 #define 
	#ESTRPIPE
 86

	)

70 #define 
	#EUSERS
 87

	)

71 #define 
	#ENOTSOCK
 88

	)

72 #define 
	#EDESTADDRREQ
 89

	)

73 #define 
	#EMSGSIZE
 90

	)

74 #define 
	#EPROTOTYPE
 91

	)

75 #define 
	#ENOPROTOOPT
 92

	)

76 #define 
	#EPROTONOSUPPORT
 93

	)

77 #define 
	#ESOCKTNOSUPPORT
 94

	)

78 #define 
	#EOPNOTSUPP
 95

	)

79 #define 
	#EPFNOSUPPORT
 96

	)

80 #define 
	#EAFNOSUPPORT
 97

	)

81 #define 
	#EADDRINUSE
 98

	)

82 #define 
	#EADDRNOTAVAIL
 99

	)

83 #define 
	#ENETDOWN
 100

	)

84 #define 
	#ENETUNREACH
 101

	)

85 #define 
	#ENETRESET
 102

	)

86 #define 
	#ECONNABORTED
 103

	)

87 #define 
	#ECONNRESET
 104

	)

88 #define 
	#ENOBUFS
 105

	)

89 #define 
	#EISCONN
 106

	)

90 #define 
	#ENOTCONN
 107

	)

91 #define 
	#ESHUTDOWN
 108

	)

92 #define 
	#ETOOMANYREFS
 109

	)

93 #define 
	#ETIMEDOUT
 110

	)

94 #define 
	#ECONNREFUSED
 111

	)

95 #define 
	#EHOSTDOWN
 112

	)

96 #define 
	#EHOSTUNREACH
 113

	)

97 #define 
	#EALREADY
 114

	)

98 #define 
	#EINPROGRESS
 115

	)

99 #define 
	#ESTALE
 116

	)

100 #define 
	#EUCLEAN
 117

	)

101 #define 
	#ENOTNAM
 118

	)

102 #define 
	#ENAVAIL
 119

	)

103 #define 
	#EISNAM
 120

	)

104 #define 
	#EREMOTEIO
 121

	)

105 #define 
	#EDQUOT
 122

	)

107 #define 
	#ENOMEDIUM
 123

	)

108 #define 
	#EMEDIUMTYPE
 124

	)

109 #define 
	#ECANCELED
 125

	)

110 #define 
	#ENOKEY
 126

	)

111 #define 
	#EKEYEXPIRED
 127

	)

112 #define 
	#EKEYREVOKED
 128

	)

113 #define 
	#EKEYREJECTED
 129

	)

116 #define 
	#EOWNERDEAD
 130

	)

117 #define 
	#ENOTRECOVERABLE
 131

	)

119 #define 
	#ERFKILL
 132

	)

121 #define 
	#EHWPOISON
 133

	)

	@/usr/include/linux/ioctl.h

2 #ifndef 
_LINUX_IOCTL_H


3 #define 
	#_LINUX_IOCTL_H


	)

5 #include 
	~<asm/ioctl.h
>

	@/usr/include/asm-generic/errno-base.h

2 #ifndef 
_ASM_GENERIC_ERRNO_BASE_H


3 #define 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

5 #define 
	#EPERM
 1

	)

6 #define 
	#ENOENT
 2

	)

7 #define 
	#ESRCH
 3

	)

8 #define 
	#EINTR
 4

	)

9 #define 
	#EIO
 5

	)

10 #define 
	#ENXIO
 6

	)

11 #define 
	#E2BIG
 7

	)

12 #define 
	#ENOEXEC
 8

	)

13 #define 
	#EBADF
 9

	)

14 #define 
	#ECHILD
 10

	)

15 #define 
	#EAGAIN
 11

	)

16 #define 
	#ENOMEM
 12

	)

17 #define 
	#EACCES
 13

	)

18 #define 
	#EFAULT
 14

	)

19 #define 
	#ENOTBLK
 15

	)

20 #define 
	#EBUSY
 16

	)

21 #define 
	#EEXIST
 17

	)

22 #define 
	#EXDEV
 18

	)

23 #define 
	#ENODEV
 19

	)

24 #define 
	#ENOTDIR
 20

	)

25 #define 
	#EISDIR
 21

	)

26 #define 
	#EINVAL
 22

	)

27 #define 
	#ENFILE
 23

	)

28 #define 
	#EMFILE
 24

	)

29 #define 
	#ENOTTY
 25

	)

30 #define 
	#ETXTBSY
 26

	)

31 #define 
	#EFBIG
 27

	)

32 #define 
	#ENOSPC
 28

	)

33 #define 
	#ESPIPE
 29

	)

34 #define 
	#EROFS
 30

	)

35 #define 
	#EMLINK
 31

	)

36 #define 
	#EPIPE
 32

	)

37 #define 
	#EDOM
 33

	)

38 #define 
	#ERANGE
 34

	)

	@/usr/include/asm/ioctl.h

1 #include 
	~<asm-generic/ioctl.h
>

	@/usr/include/asm-generic/ioctl.h

2 #ifndef 
_ASM_GENERIC_IOCTL_H


3 #define 
	#_ASM_GENERIC_IOCTL_H


	)

23 #define 
	#_IOC_NRBITS
 8

	)

24 #define 
	#_IOC_TYPEBITS
 8

	)

31 #ifndef 
_IOC_SIZEBITS


32 #define 
	#_IOC_SIZEBITS
 14

	)

35 #ifndef 
_IOC_DIRBITS


36 #define 
	#_IOC_DIRBITS
 2

	)

39 #define 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

40 #define 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

41 #define 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

42 #define 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

44 #define 
	#_IOC_NRSHIFT
 0

	)

45 #define 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

46 #define 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

47 #define 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

57 #ifndef 
_IOC_NONE


58 #define 
	#_IOC_NONE
 0U

	)

61 #ifndef 
_IOC_WRITE


62 #define 
	#_IOC_WRITE
 1U

	)

65 #ifndef 
_IOC_READ


66 #define 
	#_IOC_READ
 2U

	)

69 #define 
	#_IOC
(
dir
,
type
,
nr
,
size
) \

70 (((
dir
) << 
_IOC_DIRSHIFT
) | \

71 ((
type
) << 
_IOC_TYPESHIFT
) | \

72 ((
nr
) << 
_IOC_NRSHIFT
) | \

73 ((
size
) << 
_IOC_SIZESHIFT
))

	)

75 #define 
	#_IOC_TYPECHECK
(
t
) (sizeof(t))

	)

83 #define 
	#_IO
(
type
,
nr
) 
	`_IOC
(
_IOC_NONE
,(type),(nr),0)

	)

84 #define 
	#_IOR
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_READ
,(type),(nr),(
	`_IOC_TYPECHECK
(size)))

	)

85 #define 
	#_IOW
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_WRITE
,(type),(nr),(
	`_IOC_TYPECHECK
(size)))

	)

86 #define 
	#_IOWR
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,(type),(nr),(
	`_IOC_TYPECHECK
(size)))

	)

87 #define 
	#_IOR_BAD
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_READ
,(type),(nr),sizeof(size))

	)

88 #define 
	#_IOW_BAD
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_WRITE
,(type),(nr),sizeof(size))

	)

89 #define 
	#_IOWR_BAD
(
type
,
nr
,
size
) 
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,(type),(nr),sizeof(size))

	)

92 #define 
	#_IOC_DIR
(
nr
) (((nr) >> 
_IOC_DIRSHIFT
) & 
_IOC_DIRMASK
)

	)

93 #define 
	#_IOC_TYPE
(
nr
) (((nr) >> 
_IOC_TYPESHIFT
) & 
_IOC_TYPEMASK
)

	)

94 #define 
	#_IOC_NR
(
nr
) (((nr) >> 
_IOC_NRSHIFT
) & 
_IOC_NRMASK
)

	)

95 #define 
	#_IOC_SIZE
(
nr
) (((nr) >> 
_IOC_SIZESHIFT
) & 
_IOC_SIZEMASK
)

	)

99 #define 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

100 #define 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

101 #define 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
) << 
_IOC_DIRSHIFT
)

	)

102 #define 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

103 #define 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
124
3525
s_abuf.c
s_bar.c
s_input.c
s_io.c
s_modes.c
s_ops.c
s_output.c
s_rows.c
s_search.c
s_synhl.c
s_term.c
shado.c
shado.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/types.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stat.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/error_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/types/struct_itimerspec.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_tm.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/unistd.h
/usr/include/bits/unistd_ext.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/strings.h
/usr/include/sys/select.h
/usr/include/sys/ttydefaults.h
/usr/include/asm/ioctls.h
/usr/include/bits/byteswap.h
/usr/include/bits/endianness.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/termios-baud.h
/usr/include/bits/termios-c_cc.h
/usr/include/bits/termios-c_cflag.h
/usr/include/bits/termios-c_iflag.h
/usr/include/bits/termios-c_lflag.h
/usr/include/bits/termios-c_oflag.h
/usr/include/bits/termios-misc.h
/usr/include/bits/termios-struct.h
/usr/include/bits/termios-tcflow.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/time64.h
/usr/include/bits/timesize.h
/usr/include/bits/timex.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/typesizes.h
/usr/include/bits/uintn-identity.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/errno.h
/usr/include/bits/long-double.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/struct_mutex.h
/usr/include/bits/struct_rwlock.h
/usr/include/bits/types/__sigset_t.h
/usr/include/bits/types/struct_iovec.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/falloc.h
/usr/include/asm-generic/errno.h
/usr/include/linux/ioctl.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/ioctl.h
